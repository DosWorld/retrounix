Microsoft (R) Macro Assembler Version 6.14.8444		    04/15/22 15:20:05
unixcopy.asm						     Page 1 - 1


				; UNIXCOPY.ASM (Only for 1.44 MB floppy disks)
				; ----------------------------------------------------------------------------
				;
				; RETRO UNIX 8086 (Retro Unix == Turkish Rational Unix)
				; Operating System Project (v0.1) by ERDOGAN TAN (Beginning: 11/07/2012) 
				; 1.44 MB Floppy Disk 
				; Bootable Unix (RUFS) File System - DOS & UNIX FS file export/import Utility
				; (08/12/2012)
				;
				; [ Last Modification: 15/04/2022 ] (Previous: 05/03/2016)
				;
				; Derivation from UNIX Operating System (v1.0 for PDP-11) 
				; (Original) Source Code by Ken Thompson (1971-1972)
				; <Bell Laboratories (17/3/1972)>
				; <Preliminary Release of UNIX Implementation Document>
				;
				; ****************************************************************************
				; 15/04/2022 - mkdir/rmdir link count (and mak_nod) bugfix
				; 04/04/2022 - Inode Table/List Start Address Modification (3 -> 2)
				; 03/04/2022 - (inode count check in 'mak_nod')
				; 22/03/2022 - Free Inode Count calculation bugfix (+1)
				; 05/03/2016

 = 0002				bsFSystemID 	equ 2  ; 'RUFS'	
 = 0006				bsVolumeSerial 	equ 6  ; (4 bytes)
 = 000A				bsFDSign	equ 10 ; 'fd'
 = 000C				bsDriveNumber 	equ 12 ; fd0 or fd1 (0 or 1)
 = 000D				bsReserved 	equ 13 ; 0 (512 bytes per sector)	
 = 000E				bsSecPerTrack	equ 14 ; 18 (9 or 15)	
 = 000F				bsHeads		equ 15 ; 2
 = 0010				bsTracks	equ 16 ; 80
 = 0012				bs_bf_inode_number equ 18 ; 0 or Boot/Startup File I-Number
 = 0014				bsInfoEndsign	equ 20 ; '@'

 = 0029				ROOT_DIR_INODE_NUMBER equ 41

				; DTA (PSP+80h= Offset 128)
 = 0095				DTA_Attrib equ 149 ; PDP+21 ;05/01/2013	
 = 0096				DTA_Time equ 150 ; PSP+22
 = 0098				DTA_Date equ 152 ; PSP 24
 = 009A				DTA_FileSize equ 154 ; PSP + 26
 = 009E				DTA_FileName equ 158 ; PSP + 30

				;err_INVALIDDATA equ 100h
				;err_NOFREEBLOCK equ 200h

 = 001E				i_flags		equ 001Eh

				.8086

 0000				UNIXCOPY  SEGMENT PUBLIC 'CODE'
				                assume cs:UNIXCOPY,ds:UNIXCOPY,es:UNIXCOPY,ss:UNIXCOPY

				                org 100h

 0100				START_CODE:

 0100				proc_start  proc near
						; 08/12/2012 (UNIXCOPY)
						;
						; 30/11/2012 (UNIXBOOT)
						;
 0100  BB 3290 R			        mov bx, SizeOfFile+100
 0103  83 C3 0F			                add bx, 15
 0106  D1 EB			                shr bx, 1
 0108  D1 EB			        	shr bx, 1
 010A  D1 EB					shr bx, 1
 010C  D1 EB					shr bx, 1
 010E  B4 4A			                mov ah, 4Ah ; modify memory allocation
				               ;push cs
				               ;pop es
 0110  CD 21			                int 21h 
				                                  
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				; see if drive specified
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				              
 0112  BE 0080			                mov si, offset 80h             ; PSP command tail
 0115  AC			               	lodsb
 0116  8A C8			                mov cl, al
 0118  0A C9					or cl, cl
 011A  75 05			                jnz short loc_get_args
 011C  FE C9					dec cl
 011E  E9 0121			                jmp loc_unix_welcome          
 0121				loc_get_args:
 0121  AC			                lodsb
 0122  3C 20			                cmp al, ' '                      
 0124  75 02			                jne short loc_check_fd_name

				                ;dec cl                                  
				                ;jz short loc_unix_welcome

 0126  EB F9					jmp short loc_get_args

 0128				loc_check_fd_name:
						; 07/07/2015
 0128  BF 21B6 R		        	mov di, offset img_file_name
 012B  3C 66				        cmp al, "f"
 012D  75 27			                jne short loc_chk_fname1
 012F  AA					stosb
 0130  AC			                lodsb
 0131  3C 64					cmp al, "d"
 0133  75 21			                jne short loc_chk_fname1
 0135  AA			                stosb
 0136  AC					lodsb
 0137  3C 30			                cmp al, '0'                            
 0139  72 1F			                jb short loc_chk_fname2
 013B  3C 31			                cmp al, '1'
 013D  77 1B			                ja short loc_chk_fname2
 013F  AA					stosb
 0140  8A D0					mov dl, al
 0142  AC					lodsb
 0143  3C 0D					cmp al, 0Dh
 0145  77 13					ja short loc_chk_fname2 	
 0147  88 16 1E88 R		                mov byte ptr [UNIX_FD_Number], dl
 014B  80 EA 30			               	sub dl, '0'
 014E  88 16 1D33 R		                mov byte ptr [PhysicalDriveNumber], dl
 0152  E9 00B6			                jmp load_boot_sector

 0155				loc_check_file_name:
						; 07/07/2015
 0155  AC					lodsb
 0156				loc_chk_fname1:
 0156  3C 0D					cmp al, 0Dh
 0158  76 0F					jna short loc_chk_fname_ok
 015A				loc_chk_fname2:
 015A  AA					stosb	
 015B  81 FF 21C2 R				cmp di, offset img_file_name + 12
 015F  72 F4					jb short loc_check_file_name
 0161  74 06					je short loc_chk_fname_ok
 0163				loc_inv_fname:
 0163  BE 1F38 R				mov si, offset msg_inv_file_name
 0166  E9 00E6			                jmp @f
 0169				loc_chk_fname_ok:
 0169  2A C0					sub al, al
 016B  AA					stosb 		
 016C				loc_cap_file_name:
						; file name capitalization
 016C  BE 21B6 R				mov si, offset img_file_name
 016F  8B FE					mov di, si
 0171  8B DE					mov bx, si
 0173				loc_cap_file_name0:
 0173  AC					lodsb
 0174  3C 61					cmp al, 'a'
 0176  73 0D					jnb short loc_cap_file_name2
 0178  22 C0					and al, al
 017A  74 12					jz short loc_cap_file_name3
 017C  3C 2E					cmp al, '.'
 017E  75 02					jne short loc_cap_file_name1
 0180  8B DF					mov bx, di ; dot position	
 0182				loc_cap_file_name1:
 0182  AA					stosb
 0183  EB EE					jmp short loc_cap_file_name0 		
 0185				loc_cap_file_name2:
 0185  3C 7A					cmp al, 'z'
 0187  77 F9					ja short loc_cap_file_name1
 0189  24 DF			                and al, 0DFh ; NOT 32
 018B  AA					stosb
 018C  EB E5					jmp short loc_cap_file_name0	

 018E				loc_cap_file_name3:
 018E  88 05					mov [di], al
 0190  4F					dec di
 0191  3B DF					cmp bx, di
 0193  73 CE					jnb short loc_inv_fname	
 0195  2B FB					sub di, bx
 0197  81 EB 21B6 R				sub bx, offset img_file_name
 019B  83 FF 03					cmp di, 3
 019E  76 06					jna short loc_cap_file_name4
 01A0  23 DB					and bx, bx
 01A2  75 BF					jnz short loc_inv_fname
 01A4  EB 05					jmp short loc_find_image_file		
 01A6				loc_cap_file_name4:
 01A6  83 FB 08					cmp bx, 8
 01A9  77 B8					ja short loc_inv_fname	
 01AB				loc_find_image_file:
						; 07/07/2015
 01AB  BA 21B6 R				mov dx, offset img_file_name
 01AE  B9 003F			                mov cx, 3Fh ; File Attributes
 01B1  B4 4E			                mov ah, 4Eh ; MS Dos Function = Find First File
 01B3  CD 21			                int 21h
 01B5  73 0E					jnc short loc_chk_image_file_features
 01B7  80 FC 03					cmp ah,03h  ; dos error number > 3
 01BA  76 03 E9 00A6		                ja  loc_error
 01BF  BE 1F7B R				mov si, offset msg_file_not_found
 01C2  E9 008A			                jmp @f
 01C5				loc_chk_image_file_features:
 01C5  BE 0095					mov si, DTA_Attrib
 01C8  8A 04			                mov al, byte ptr [SI]
 01CA  24 1F			                and al, 1Fh ; directory, volume label, system, hidden, read only
 01CC  74 03 E9 0094		                jnz loc_error       
 01D1  BE 009A					mov si, DTA_FileSize
 01D4  AD					lodsw
 01D5  83 3C 16					cmp word ptr [SI], 16h
 01D8  75 05					jne short loc_inv_image_file
 01DA  3D 8000					cmp ax, 8000h ;1.44 MB floppy disk image (168000h bytes)
 01DD  74 05			                je  short loc_open_image_file
 01DF				loc_inv_image_file:
 01DF  BE 1FB7 R				mov si, offset msg_inv_image_file
 01E2  EB 6B					jmp short @f 
 01E4				loc_open_image_file:
 01E4  B0 02					mov al, 2 ; open for reading and writing
						;mov dx, offset img_file_name
 01E6  B4 3D					mov ah, 3Dh ; open file
 01E8  CD 21					int 21h
 01EA  72 79			                jc  short loc_error
 01EC  A3 21C4 R				mov word ptr [img_file_handle], ax		
 01EF  C6 06 1D33 R 90				mov byte ptr [PhysicalDriveNumber], 90h ; image file sign
						;
 01F4  8B D8					mov bx, ax
 01F6  B9 0400					mov cx, 1024 ; read 1024 bytes (2 sectors)
 01F9  BA 2A90 R				mov dx, offset BSBuffer ; bootsector (& super block) buffer
 01FC  B4 3F					mov ah, 3Fh ; read file
 01FE  CD 21					int 21h
 0200  72 63			                jc  short loc_error
 0202  3D 0400					cmp ax, 1024
 0205  75 5E					jne short loc_error
 0207  8B DA			                mov bx, dx ; offset BSBuffer
 0209  EB 15					jmp short load_fd_img_boot_sect_ok					
						;
 020B				load_boot_sector:
				                ; input -> dl = drive number
 020B  32 E4			                xor ah,ah
 020D  CD 13			                int 13h
 020F  72 4F			                jc  short loc_drv_read_error
 0211				load_boot_sector_ok:
 0211  BB 2A90 R		                mov bx, offset BSBuffer
 0214  B8 0202			                mov ax,0202h  ; Read boot sector & super block
 0217  B9 0001			                mov cx,1
 021A  32 F6			                xor dh,dh
 021C  CD 13			                int 13h
 021E  72 40			                jc  short loc_drv_read_error

 0220				load_fd_img_boot_sect_ok:
 0220  81 BF 01FE AA55		 		cmp word ptr [BX]+510, 0AA55h
 0226  75 0E			                jne short loc_not_fd_rufs

 0228  81 7F 02 5552		                cmp word ptr [BX]+bsFSystemID, 'UR'
 022D  75 07			                jne short loc_not_fd_rufs

 022F  81 7F 04 5346				cmp word ptr [BX]+bsFSystemID+2, 'SF'
 0234  74 05			                je  short loc_check_fd_sign

 0236				loc_not_fd_rufs:
 0236  BE 2001 R		                mov si, offset msg_Not_Unix_FS
 0239  EB 14					jmp short @f		

 023B				loc_check_fd_sign:
 023B  81 7F 0A 6466				cmp word ptr [BX]+bsFDSign, 'df'
 0240  75 F4					jne short loc_not_fd_rufs
				 
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				; Write message
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 0242				loc_unix_welcome:
 0242  9C			                pushf
 0243  BE 1D36 R				mov si, offset UNIX_Welcome
 0246  E8 0026					call UNIX_PRINTMSG
 0249  9D					popf
 024A  74 1E					je short loc_call_unix_prompt

 024C  BE 1DBC R				mov si, offset usage
 024F				@@:
 024F  E8 001D			                call UNIX_PRINTMSG

 0252				loc_close_file_then_terminate:		
						; 07/07/2015
						;mov bx, [img_file_handle]
						; 15/04/2022 ('word ptr' bugfix)
 0252  8B 1E 21C4 R				mov bx, word ptr [img_file_handle]	
 0256  23 DB					and bx, bx
 0258  74 04					jz  short terminate
 025A				close_img_file:
 025A  B4 3E					mov ah, 3Eh ; close (floppy disk image) file
 025C  CD 21					int 21h		 
 025E				terminate:
 025E  CD 20					int 20h

 0260				loc_drv_read_error:
 0260  BE 1F15 R		                mov si, offset msg_unix_drv_read_error

 0263  EB EA					jmp short @b
 0265				loc_error:
 0265  BE 208E R				mov si, offset error_msg
 0268  EB E5					jmp short @b

				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				; call command interpreter
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 026A				loc_call_unix_prompt:
 026A  E8 0011					call unix_prompt
						; 07/07/2015
 026D  EB E3					jmp  short loc_close_file_then_terminate

 026F				proc_start endp


 026F				UNIX_PRINTMSG proc near
						; 20/01/2013 'call unix_printchr'
				 
 026F				UNIX_PRINTMSG_LOOP:
 026F  AC			                lodsb                           ; Load byte at DS:SI to AL
 0270  22 C0			                and     AL,AL            
 0272  74 09			                jz      short UNIX_PRINTMSG_OK
 0274  B4 0E			   		mov     AH,0Eh                  
 0276  BB 0007			                mov     BX,07h             
 0279  CD 10			                int     10h                     ; BIOS Service func ( ah ) = 0Eh
				                				; Write char as TTY
				                                                ;AL-char BH-page BL-colo
						;call 	unix_printchr		; 20/01/2013
 027B  EB F2			                jmp     short UNIX_PRINTMSG_LOOP           

 027D				UNIX_PRINTMSG_OK:
 027D  C3			                retn

 027E				UNIX_PRINTMSG  endp

				;unix_printchr proc near
				;		; 20/01/2013      
				;               mov     AH,0Eh                  
				;               mov     BX,07h             
				;               int     10h                    	; BIOS Service func ( ah ) = 0Eh
				;                                              	; Write char as TTY
				;                                              	;AL-char BH-page BL-color
				;		retn
				;unix_printchr endp


 027E				unix_prompt proc near
						; 07/07/2015
						; 8/12/2012
						; Derived from
						; proc_dos_prompt procedure of TRDOS, 
						; MAINPROG.ASM (1/1/2012). 
						;
						; proc_dos_prompt (15/09/2011)
				                ;

				               ;push ds
				               ;pop  es
 027E				unix_prompt_0:	
						; 07/07/2015
 027E  80 3E 1D33 R 90				cmp	byte ptr [PhysicalDriveNumber], 90h
 0283  72 0B					jb	short unix_prompt_1
 0285  BE 21B6 R				mov	si, offset img_file_name
 0288  E8 FFE4					call 	unix_printmsg
 028B  BE 1E8B R				mov	si, offset unix_img_cdir
 028E  EB 09					jmp	short unix_prompt_15
 0290				unix_prompt_1:
 0290  BE 1E86 R		                mov 	si, offset unix_cdrv
 0293  E8 FFD9			                call 	unix_printmsg
 0296				unix_prompt_2:
 0296  BE 1E8C R		                mov 	si, offset unix_cdir
 0299				unix_prompt_15:
 0299  E8 FFD3			                call 	unix_printmsg
 029C				unix_prompt_3:
 029C  A0 1EB4 R				mov 	al, byte ptr [unix_prompt_char]
				 		;mov     ah,0Eh                  
				                ;mov     bx,07h             
 029F  CD 10			                int     10h         
 02A1				unix_prompt_4:     
 02A1  B4 03			                mov     ah,03h
				                ;mov     bx,07h                  
 02A3  CD 10					int     10h
 02A5  88 16 1EB5 R				mov     byte ptr [CursorColumn],dl
 02A9				unix_prompt_5:
 02A9  BE 1EB7 R				mov     si, offset CommandBuffer
 02AC  E8 0061			                call    proc_rw_char
				                ;mov     byte ptr [CommandBuffer]+75,0

						;mov     si, offset CommandBuffer
 02AF  8B FE			                mov     di, si
 02B1  33 DB			                xor 	bx, bx
 02B3  33 C9			                xor     cx, cx
 02B5				unix_prompt_6:
 02B5  8A 00			                mov     al, byte ptr [SI][BX]
 02B7  FE C3				        inc	bl 
 02B9  3C 20			             	cmp     al, 20h
 02BB  77 11					ja      short unix_prompt_8
 02BD  72 40					jb      short unix_prompt_13
 02BF  80 FB 4A			                cmp     bl, 74 ; 75 ?
 02C2  72 F1			                jb      short unix_prompt_6
 02C4  EB 39			                jmp 	short unix_prompt_13
 02C6				unix_prompt_7:
 02C6  8A 00					mov     al, byte ptr [SI][BX]
 02C8  FE C3					inc     bl
 02CA  3C 20					cmp     al,20h
 02CC  76 08					jna     short unix_prompt_9
 02CE				unix_prompt_8:
 02CE  AA			                stosb   
 02CF  FE C1			                inc     cl
 02D1  80 FB 4A			                cmp     bl, 74 ; 75 ?
 02D4  72 F0			                jb      short unix_prompt_7
						;jmp    short unix_prompt_12
 02D6				unix_prompt_9:
 02D6  32 C0			                xor	al, al ; 0
 02D8				unix_prompt_10:
 02D8  88 05			                mov     byte ptr [DI], al
 02DA  47			                inc    	di
 02DB  80 FB 4A			                cmp     bl, 74 ; 75 ?
 02DE  73 0B			                jnb     short unix_prompt_12
 02E0  8A 00			                mov     al, byte ptr [SI][BX]
 02E2  FE C3			                inc     bl
 02E4  3C 20			                cmp     al, 20h
 02E6  73 F0			                jnb 	short unix_prompt_10
 02E8				unix_prompt_11:
 02E8  C6 05 00			                mov     byte ptr [DI], 0
 02EB				unix_prompt_12:
 02EB  E8 00A9			                call    command_interpreter

 02EE  80 3E 1F01 R 01				cmp     byte ptr [program_exit], 1
 02F3  73 1A					jnb	short unix_prompt_14

 02F5  B9 004A			                mov     cx, 74 ; 75 ?
 02F8  BF 1EB7 R		                mov     di, offset CommandBuffer
 02FB  32 C0			                xor     al,al
 02FD  F3/ AA			                rep     stosb
 02FF				unix_prompt_13:
 02FF  BB 0007			                mov     bx,07h 
 0302  B0 0D			                mov     al,0Dh
 0304  B4 0E			                mov     ah,0Eh
 0306  CD 10			                int     10h
 0308  B0 0A					mov     al,0Ah
 030A  CD 10					int     10h
				                
 030C  E9 FF6F					jmp     unix_prompt_0 ; loop

 030F				unix_prompt_14:
 030F  C3			                retn

 0310				unix_prompt endp


 0310				proc_rw_char proc near
					       ; 8/12/2012 (modification for UNIXCOPY.ASM)
					       ; OUTPUT -> DS:SI = Entered String (ASCIIZ)

 0310				read_next_char:
 0310  32 E4			               xor     ah,ah
 0312  CD 16			               int     16h
 0314  22 C0			               and     al,al
 0316  74 3B			               jz      short loc_arrow    
 0318  3C E0			               cmp     al,0E0h          
 031A  74 37			               je      short loc_arrow
 031C  3C 08			               cmp     al,08h
 031E  75 3F			               jne     short char_return
 0320				loc_back:
 0320  B3 07			               mov     bl,7
 0322  B4 03			               mov     ah,3
 0324  CD 10			               int     10h
 0326  3A 16 1EB5 R		               cmp     dl,byte ptr [CursorColumn]
 032A  77 08			               ja      short prev_column
 032C				loc_beep:
 032C  B4 0E			               mov     ah, 0Eh
 032E  B0 07			               mov     al, 7
 0330  CD 10			               int     10h
 0332  EB DC			               jmp     short read_next_char
 0334				prev_column:
 0334  FE CA			               dec     dl
 0336				set_cursor_pos:
 0336  B4 02			               mov     ah,02h
 0338  CD 10			               int     10h
 033A  8A DA			               mov     bl, dl
 033C  2A 1E 1EB5 R		               sub     bl,byte ptr [CursorColumn] 
 0340  B9 0001			               mov     cx,1
 0343  B4 09			               mov     ah,09h
 0345  B0 20			               mov     al,20h
 0347  88 00			               mov     byte ptr [SI][BX],al
 0349				loc_write_it:
 0349  B3 07			               mov     bl,7
 034B  CD 10			               int     10h
 034D  8B 16 1EB5 R		               mov     dx,word ptr [CursorColumn]
 0351  EB BD			               jmp     short read_next_char
 0353				loc_arrow:    
 0353  80 FC 4B			               cmp     AH,4Bh
 0356  74 C8			               je      short loc_back
 0358  80 FC 53			               cmp     AH,53h
 035B  74 C3			               je      short loc_back
 035D  EB B1			               jmp     short read_next_char
 035F				char_return:
 035F  B3 07			               mov     bl,7
 0361  B4 03			               mov     ah,3
 0363  CD 10			               int     10h

 0365  8A E2				       mov     ah, dl		
 0367  2A 26 1EB5 R		               sub     ah,byte ptr [CursorColumn] 
 036B  3C 20			               cmp     al,20h
 036D  72 22			               jb      short loc_escape
 036F  80 FC 48			               cmp     ah, 72 ; limit
 0372  77 B8			               ja      short loc_beep

 0374  8A DC			               mov     bl, ah
 0376  32 E4				       xor     ah, ah
 0378  89 00			               mov     word ptr [SI][BX],ax
 037A  B4 0E			               mov     ah, 0Eh
 037C  B3 07			               mov     bl, 7
 037E  CD 10			               int     10h
 0380  EB 8E			               jmp     short read_next_char
 0382				pass_escape:
 0382  3C 0D			               cmp     al,0Dh
 0384  75 8A			               jne     short read_next_char
 0386  B4 0E				       mov     ah, 0Eh		
 0388  B3 07			               mov     bl,7
 038A  CD 10			               int     10h
 038C  B0 0A			               mov     al,0Ah
 038E  CD 10			               int     10h
 0390  C3			               retn
 0391				loc_escape:
 0391  3C 1B			               cmp     al,1Bh
 0393  75 ED			               jne     short pass_escape
 0395  F9			               stc
 0396  C3			               retn

 0397				proc_rw_char endp


 0397				command_interpreter proc near
						; 01/03/2013
						; 25/02/2013
						; 23/02/2013 ?/help
						; 17/02/2013 namei, inode, iget
						; 16/02/2013 fs, volume 
						; 21/01/2013 'ls -l'
						; 20/01/2013 ls (dir modifications)
						; 13/01/2013 chmod, chown, link
						; 07/01/2013 show tabspace (div) modif.
						; 06/01/2013 show
						; 06/01/2013 rm, mkdir, rmdir modifications
						; 05/01/2013 check file attributes
						; 30/12/2012
					        ; 24/12/2012 todos
						; 16/12/2012
						; 08/12/2012
						;
 0397  AD					lodsw   ; 25/02/2013
 0398				cl4:
 0398  80 F9 04					cmp cl, 4
 039B  76 03 E9 0110		                ja cl5
 03A0  73 03 E9 0465		                jb cl3
				; EXIT	
 03A5				loc_cmd_exit:
 03A5  3D 7865					cmp ax, 'xe'
 03A8  75 11					jne short loc_cmd_show
 03AA  AD					lodsw
 03AB  3D 7469					cmp ax, 'ti'
 03AE  75 0A					jne short @f
 03B0  AC					lodsb
 03B1  0A C0					or al, al
 03B3  75 05					jnz short @f	

 03B5  C6 06 1F01 R 01				mov byte ptr [program_exit], 1
 03BA				@@:
 03BA  C3					retn
				; SHOW
 03BB				loc_cmd_show:
						; 06/01/2013
 03BB  3D 6873					cmp ax, 'hs'
 03BE  75 29			                jne short loc_cmd_link
 03C0  AD					lodsw
 03C1  3D 776F					cmp ax, 'wo'
 03C4  75 F4					jne short @b
 03C6  AC					lodsb
 03C7  0A C0					or al, al
 03C9  75 EF					jnz short @b
 03CB				show_uf1:
 03CB  89 36 21FB R				mov word ptr [u_namep], si
 03CF  AC					lodsb
 03D0  3C 20					cmp al, 20h
 03D2  74 F7			                je short show_uf1
 03D4  72 12					jb short @f
 03D6				show_uf2:
 03D6  AC					lodsb
 03D7  3C 20				        cmp al, 20h
 03D9  77 FB					ja short show_uf2
 03DB  32 C0					xor al, al
 03DD  88 44 FF					mov byte ptr [SI]-1, al
 03E0				show_uf3:
 03E0  E8 0C22					call show_file
 03E3  73 03 E9 0453				jc ci_error
 03E8				@@:
 03E8  C3					retn
				; LINK
 03E9				loc_cmd_link:
 03E9  3D 696C					cmp ax, 'il'
 03EC  74 03 E9 008C		                jne loc_cmd_iget ; 17/02/2013
 03F1  AD					lodsw
 03F2  3D 6B6E					cmp ax, 'kn'
 03F5  75 F1					jne short @b
 03F7  AC					lodsb
 03F8  0A C0					or al, al
 03FA  75 EC					jnz short @b
 03FC				link_sf1:
 03FC  89 36 21FB R				mov word ptr [u_namep], si
 0400  AC					lodsb
 0401  3C 20					cmp al, 20h
 0403  74 F7					je short link_sf1
 0405  72 E1					jb short @b
 0407				link_sf2:
 0407  AC					lodsb
 0408  3C 20				        cmp al, 20h
 040A  77 FB					ja short link_sf2
 040C  32 C0					xor al, al
 040E  88 44 FF					mov byte ptr [SI]-1, al
 0411				link_df1:
 0411  89 36 1F06 R				mov word ptr [arg], si
 0415  AC					lodsb
 0416  3C 20					cmp al, 20h
 0418  74 F7					je short link_df1
 041A  72 CC					jb short @b
 041C				link_df2:
 041C  AC					lodsb
 041D  3C 20				        cmp al, 20h
 041F  77 FB					ja short link_df2
 0421  4E					dec si
 0422  32 C0					xor al, al
 0424  88 04					mov byte ptr [SI], al
 0426				link_fsf:
 0426  E8 0C76					call name_i
 0429  73 03 E9 040D				jc ci_error

 042E  A3 21D4 R				mov word ptr [uf_i_number], ax
 0431				link_fdf:
 0431  8B 36 1F06 R				mov si, word ptr [arg]
 0435  89 36 21FB R				mov word ptr [u_namep], si

 0439  E8 0C63					call name_i
 043C  72 03 E9 03FA		                jnc ci_error

 0441  80 FC FF					cmp ah, 0FFh
 0444  74 03 E9 03F2		                jne ci_error

						; [u_dirp] = empty directory entry slot

 0449  A1 2211 R				mov ax, word ptr [ii]
 044C  A3 1F02 R				mov word ptr [pdir], ax
						
 044F  A1 21D4 R				mov ax, word ptr [uf_i_number]
 0452  E8 0D4E			                call i_get
 0455  73 03 E9 03E1		                jc ci_error

 045A  E8 0F11			        	call set_imod ; jsr r0,setimod / set modified flag
 045D  FE 06 21D8 R		                inc byte ptr [inode_nlks] ; link count

 0461  A1 1F02 R				mov ax, word ptr [pdir]
 0464  E8 0D3C					call i_get
 0467  73 03 E9 03CF				jc ci_error

						; name_i -> u_namep points filename 
						;           after the last '/' of the path
						
 046C  A1 21D4 R				mov ax, word ptr [uf_i_number]
 046F  A3 2207 R				mov word ptr [u_dirbuf], ax

 0472  E8 0FE0					call mk_dir ; make directory entry
 0475  73 03 E9 03C1				jc ci_error

 047A  E9 06DD			                jmp ci_sync_exit
				; IGET
 047D				loc_cmd_iget:   ; 17/02/2013, inode/iget
 047D  3D 6769					cmp ax, 'gi'
 0480  75 17					jne short loc_cmd_help ; 23/02/2013
 0482  AD					lodsw
 0483  3D 7465					cmp ax, 'te'
 0486  75 27					jne short @f
 0488  AC					lodsb
 0489  0A C0					or al, al
 048B  75 22					jnz short @f	
 048D				ci_iget_getarg:
 048D  8B DE					mov bx, si
 048F  AC					lodsb
 0490  3C 20					cmp al, 20h
 0492  76 03 E9 0361				ja inode_getarg2 
 0497  74 F4					je short ci_iget_getarg
				; HELP
 0499				loc_cmd_help:	; 23/02/2013
 0499  3D 6568					cmp ax, 'eh'
 049C  75 11					jne short @f
 049E  AD					lodsw
 049F  3D 706C			                cmp ax, 'pl'
 04A2  75 0B					jne short @f
 04A4  AC					lodsb
 04A5  22 C0					and al, al
 04A7  75 06					jnz short @f
 04A9				ci_?:
 04A9  BE 2511 R				mov si, offset UNIXCOPY_Commands
 04AC  E8 FDC0					call UNIX_PRINTMSG
 04AF				@@:
 04AF  C3					retn  
 04B0				cl5:
 04B0  80 F9 05					cmp cl, 5
 04B3  76 03 E9 04CA		                ja  cl7
						;jb short @f
				; CHDIR
 04B8				loc_cmd_chdir:
 04B8  3D 6863					cmp ax,'hc'
 04BB  74 03 E9 0089		                jne loc_cmd_todos
 04C0  AD					lodsw
 04C1  3D 6964					cmp ax, 'id'
 04C4  75 2B					jne short loc_cmd_chmod
 04C6  AC					lodsb
 04C7  3C 72			                cmp al, 'r'
 04C9  75 25					jne short @f
 04CB  AC					lodsb
 04CC  0A C0					or al, al
 04CE  75 20					jnz short @f
 04D0				ci_cd_getarg:
 04D0  89 36 21FB R				mov word ptr [u_namep], si
 04D4  AC					lodsb
 04D5  3C 20					cmp al, 20h
 04D7  74 F7					je short ci_cd_getarg
 04D9  72 15					jb short @f
						; dec si

 04DB  A1 21FB R				mov ax, word ptr [u_namep]
 04DE  A3 1F06 R				mov word ptr [arg], ax

 04E1  E8 09DB					call sys_chdir
 04E4  73 03 E9 0352		                jc ci_error
						
 04E9  8B 36 1F06 R				mov si, word ptr [arg]
 04ED  E8 075A					call update_cdir_string
 04F0				@@:
 04F0  C3					retn

				; CHMOD
 04F1				loc_cmd_chmod: ; 13/01/2013
						;cmp ax, 'hc'
						;jne short loc_cmd_todos
						;lodsw
 04F1  3D 6F6D					cmp ax, 'om'
 04F4  75 2F					jne short loc_cmd_chown
 04F6  AC					lodsb	
 04F7  3C 64					cmp al, 'd'	
 04F9  75 F5					jne short @b
 04FB  AC					lodsb
 04FC  0A C0					or al, al
 04FE  75 F0					jnz short @b
 0500				ci_chmod_getarg:
 0500  AC					lodsb
 0501  3C 20					cmp al, 20h
 0503  74 FB					je short ci_chmod_getarg
 0505  72 E9					jb short @b
 0507  4E					dec si
 0508  E8 146A					call chmode
 050B  73 03 E9 032B				jc ci_error
 0510  A1 1F06 R		                mov ax, word ptr [arg]
 0513  0B C0					or ax, ax
 0515  74 D9					jz short @b
 0517  32 C0					xor al, al
 0519  A2 1F08 R		                mov byte ptr [arg]+2, al
 051C				ci_chown_print:
 051C  BE 1F04 R		                mov si, offset msg_arg
 051F  E8 FD4D					call UNIX_PRINTMSG
 0522  E9 0635					jmp ci_sync_exit

				; CHOWN
 0525				loc_cmd_chown: ; 13/01/2013
						;cmp ax, 'hc'
						;jne short loc_cmd_todos
						;lodsw
 0525  3D 776F					cmp ax, 'wo'
 0528  75 C6					jne short @b
 052A  AC					lodsb	
 052B  3C 6E					cmp al, 'n'	
 052D  75 C1					jne short @b
 052F  AC					lodsb
 0530  0A C0					or al, al
 0532  75 BC					jnz short @b
 0534				ci_chown_getarg:
 0534  AC					lodsb
 0535  3C 20					cmp al, 20h
 0537  74 FB					je short ci_chown_getarg
 0539  72 B5					jb short @b
 053B  4E					dec si
 053C  E8 14A0					call chowner
 053F  73 03 E9 02F7				jc ci_error

 0544  23 DB			                and bx, bx
 0546  75 D4			                jnz short ci_chown_print
 0548				@@:
 0548  C3			                retn
				; TODOS
 0549				loc_cmd_todos:
						; 24/12/2012
 0549  3D 6F74					cmp ax, 'ot'
 054C  74 03 E9 017A		                jne loc_cmd_mkdir ; 30/12/2012
 0551  AD					lodsw
 0552  3D 6F64					cmp ax, 'od'
 0555  75 F1					jne short @b
 0557  AC					lodsb	
 0558  3C 73					cmp al, 's'	
 055A  75 EC					jne short @b
 055C  AC					lodsb
 055D  0A C0					or al, al
 055F  75 E7					jnz short @b
 0561				todos_uf1:
 0561  89 36 21FB R				mov word ptr [u_namep], si
 0565  AC					lodsb
 0566  3C 20					cmp al, 20h
 0568  74 F7					je short todos_uf1
 056A  72 DC					jb short @b
 056C				todos_uf2:
 056C  AC					lodsb
 056D  3C 20				        cmp al, 20h
 056F  77 FB					ja short todos_uf2
 0571  32 C0					xor al, al
 0573  88 44 FF					mov byte ptr [SI]-1, al
 0576				todos_df1:
 0576  89 36 1F06 R				mov word ptr [arg], si
 057A  AC					lodsb
 057B  3C 20					cmp al, 20h
 057D  74 F7					je short todos_df1
 057F  72 C7					jb short @b
 0581				todos_df2:
 0581  AC					lodsb
 0582  3C 20				        cmp al, 20h
 0584  77 FB					ja short todos_df2
 0586  4E					dec si
 0587  32 C0					xor al, al
 0589  88 04					mov byte ptr [SI], al
 058B				todos_fuf:
 058B  E8 0B11					call name_i
				                ;jnc short @f
 058E  73 03 E9 02A8				jc ci_error

						;cmp ah, 0FFh
				                ;jne ci_error
						; jmp ci_error ; 'file not found' error
 0593				@@:
 0593  A3 21D4 R				mov word ptr [uf_i_number], ax
 0596				todos_fdf:
 0596  8B 16 1F06 R				mov dx, word ptr [arg]
 059A  B9 003F			                mov cx, 3Fh ; File Attributes ; 05/01/2013 (3Fh)
 059D  B4 4E			                mov ah, 4Eh ; MS Dos Function = Find First File
 059F  CD 21			                int 21h
				                ;jnc short todos_afow
 05A1  73 0A					jnc short @f ; 05/01/2013
 05A3				todos_chk_err:
 05A3  80 FC 03					cmp ah,03h  ; dos error number > 3
 05A6  76 03 E9 0290				ja ci_error

 05AB  EB 53					jmp short todos_crdf
 05AD				@@:		; 05/01/2013
 05AD  BE 0095					mov si, DTA_Attrib
 05B0  8A 04			                mov al, byte ptr [SI]
 05B2  24 1F			                and al, 1Fh ; directory, volume label, system, hidden, read only
 05B4  74 03 E9 0282		                jnz ci_error       
 05B9				todos_afow:      ; overwrite question
 05B9  BE 216C R				mov si, offset msg_overwrite_question1
 05BC  E8 FCB0					call UNIX_PRINTMSG
 05BF  BE 009E					mov si, DTA_FileName
 05C2  E8 FCAA					call UNIX_PRINTMSG
 05C5  BE 2189 R				mov si, offset msg_overwrite_question2
 05C8  E8 FCA4					call UNIX_PRINTMSG
 05CB  BE 1F0A R				mov si, offset msg_yes_no
 05CE  E8 FC9E					call UNIX_PRINTMSG
 05D1				todos_afow_input:	 ; ask for overwrite
 05D1  33 C0			                xor ax, ax
 05D3  CD 16			                int 16h				; wait for keyboard command
 05D5  3C 03			                cmp al, 'C'-40h
 05D7  74 1A			                je short @f                   
 05D9  3C 1B			                cmp al, 27
 05DB  74 16			                je short @f
 05DD  24 DF			                and al, 0DFh
 05DF  3C 59			                cmp al, 'Y'			; Yes?
 05E1  74 11			                je short todos_afow_yes    	; overwrite
 05E3  3C 4E			                cmp al, 'N'                     ; No?
 05E5  75 EA			                jne short todos_afow_input         
 05E7				todos_afow_no:
 05E7  BE 208A R			        mov si, offset msg_No
 05EA  E8 FC82					call UNIX_PRINTMSG
 05ED  BE 2097 R		                mov si, offset UNIX_CRLF
 05F0  E8 FC7C			                call UNIX_PRINTMSG
 05F3				@@:
 05F3  C3					retn
 05F4				todos_afow_yes:
 05F4  BE 2085 R		                mov si, offset msg_YES
 05F7  E8 FC75			                call UNIX_PRINTMSG
 05FA  BE 2097 R		                mov si, offset UNIX_CRLF
 05FD  E8 FC6F			                call UNIX_PRINTMSG
 0600				todos_crdf:
						;mov dx, word ptr [arg]
 0600  33 C9					xor cx, cx ; File Attributes = 0
 0602  B4 3C			                mov ah, 3Ch ; MS Dos Function = Create File
 0604  CD 21			                int 21h
 0606  73 03 E9 0230		                jc  ci_error

 060B  A3 1D34 R				mov word ptr [FileHandle], ax
 060E				todos_odf:
 060E  8B 16 1F06 R				mov dx, word ptr [arg]
 0612  B4 3D			                mov ah, 3Dh ; MS Dos Function = Open File
 0614  32 C0			                xor al, al  
 0616  CD 21			                int 21h
 0618  73 03 E9 021E		                jc  ci_error		
 061D				todos_ruf_wdf:
 061D  33 C0					xor ax, ax 
 061F  A3 2201 R			        mov word ptr [u_off], ax
 0622				todos_wf_msg:
 0622  BE 202C R		                mov si, offset Msg_writing_file
 0625  E8 FC47			                call UNIX_PRINTMSG
 0628				todos_iget:		
 0628  A1 21D4 R				mov ax, word ptr [uf_i_number]
 062B  E8 0B75					call i_get
 062E  72 36					jc short todos_cdf

 0630  A1 21DA R				mov ax, word ptr [inode_size]
 0633  B9 0200					mov cx, 512
 0636  3B C1					cmp ax, cx
 0638  76 02					jna short loc_read_unix_sf
					
 063A  8B C1					mov ax, cx	
 063C				@@:
 063C				loc_read_unix_sf:                
 063C  A3 2203 R				mov word ptr [u_count], ax

 063F  C7 06 21FF R 2E90 R			mov word ptr [u_base], offset ReadBuffer

 0645  A1 21D4 R				mov ax, word ptr [uf_i_number] ; word ptr [u_dirbuf]
 0648  E8 0AEB					call read_i
 064B  72 19					jc short  todos_cdf
 064D				@@:
				;loc_write_dos_df:                
 064D  B4 40			                mov ah, 40h ; Write File
 064F  8B 0E 2205 R				mov cx, word ptr [u_nread] ; 0 -> eof
 0653  BA 2E90 R		                mov dx, offset ReadBUFFER
 0656  8B 1E 1D34 R		                mov bx, word ptr [FileHandle]
 065A  CD 21			                int 21h
 065C  72 08			                jc short todos_cdf

 065E  3B C1					cmp ax, cx ; write count = read count ? 
 0660  75 04					jne short todos_cdf ; jb short todos_cdf

 0662  0B C0					or ax, ax  ; or cx, cx
 0664  75 D6					jnz short loc_read_unix_sf
 0666				todos_cdf:
 0666  9C					pushf
 0667  72 47					jc short @f
 0669				todos_set_dfdt:
 0669  A1 21EC R				mov ax, word ptr [inode_ctim]   ; fromdos command ->
 066C  8B 16 21EE R				mov dx, word ptr [inode_ctim]+2 ; dos lmdt -> unix ctim

 0670  E8 0FEB					call convert_from_epoch

 0673  8B 16 221B R				mov dx, word ptr [hour]
 0677  B1 0B					mov cl, 11
 0679  D3 E2					shl dx, cl   
 067B  A1 221D R				mov ax, word ptr [minute]
 067E  B1 05					mov cl, 5
 0680  D3 E0					shl ax, cl
 0682  0B D0					or dx, ax
 0684  A1 221F R				mov ax, word ptr [second]
 0687  D1 E8					shr ax, 1
 0689  0B C2					or ax, dx
 068B  50					push ax ; time
 068C  8B 16 2215 R				mov dx, word ptr [year]
 0690  81 EA 07BC				sub dx, 1980
 0694  B1 09					mov cl, 9
 0696  D3 E2					shl dx, cl   
 0698  A1 2217 R				mov ax, word ptr [month]
 069B  B1 05					mov cl, 5
 069D  D3 E0					shl ax, cl
 069F  0B D0					or dx, ax
 06A1  A1 2219 R				mov ax, word ptr [day]
 06A4  0B D0					or dx, ax
 06A6  59					pop cx ; time

 06A7  B8 5701					mov ax, 5701h ; set lm date&time
 06AA  8B 1E 1D34 R				mov bx, word ptr [FileHandle]

 06AE  CD 21					int 21h
 06B0				@@:
 06B0  B4 3E			                mov ah, 3Eh ; Close File
 06B2  8B 1E 1D34 R		                mov bx, word ptr [FileHandle]
 06B6  CD 21			                int 21h
 06B8  9D					popf
 06B9  73 03 E9 017D		                jc ci_error
 06BE				todos_retn:
 06BE  BE 207E R				mov si, offset Msg_OK
 06C1  E8 FBAB			                call UNIX_PRINTMSG

 06C4  BE 2097 R		                mov si, offset UNIX_CRLF
 06C7  E8 FBA5			                call UNIX_PRINTMSG
 06CA				@@:		
 06CA  C3					retn
				; MKDIR
 06CB				loc_cmd_mkdir:
						; 30/12/2012
 06CB  3D 6B6D					cmp ax, 'km'
 06CE  75 36					jne short loc_cmd_rmdir
 06D0  AD					lodsw
 06D1  3D 6964					cmp ax, 'id'
 06D4  75 F4					jne short @b
 06D6  AC					lodsb	
 06D7  3C 72					cmp al, 'r'	
 06D9  75 EF					jne short @b
 06DB  AC					lodsb
 06DC  0A C0					or al, al
 06DE  75 EA					jnz short @b
 06E0				ci_mkdir_getarg1:
 06E0  89 36 21FB R				mov word ptr [u_namep], si
 06E4  AC					lodsb
 06E5  3C 20					cmp al, 20h
 06E7  74 F7					je short ci_mkdir_getarg1
 06E9  72 DF					jb short @b
 06EB				ci_mkdir_getarg2: ; 06/01/2013
 06EB  AC					lodsb
 06EC  3C 20				        cmp al, 20h
 06EE  77 FB					ja short ci_mkdir_getarg2
 06F0  4E					dec si
 06F1  32 C0					xor al, al
 06F3  88 04					mov byte ptr [SI], al
					
 06F5  BE 209A R		                mov si, offset Msg_Making_Directory
 06F8  E8 FB74			                call UNIX_PRINTMSG

 06FB  E8 07DB					call make_directory
 06FE  73 03 E9 0138		                jc ci_error

 0703  E9 0454					jmp ci_sync_exit
				; RMDIR
 0706				loc_cmd_rmdir:
						; 05/01/2013
 0706  3D 6D72					cmp ax, 'mr'
 0709  75 70					jne short loc_cmd_namei ; 17/02/2013
 070B  AD					lodsw
 070C  3D 6964					cmp ax, 'id'
 070F  75 B9					jne short @b
 0711  AC					lodsb	
 0712  3C 72					cmp al, 'r'	
 0714  75 B4					jne short @b
 0716  AC					lodsb
 0717  0A C0					or al, al
 0719  75 AF					jnz short @b
 071B				ci_rmdir_getarg1:
 071B  89 36 21FB R				mov word ptr [u_namep], si
 071F  AC					lodsb
 0720  3C 20					cmp al, 20h
 0722  74 F7					je short ci_rmdir_getarg1
 0724  72 A4					jb short @b
						; 06/01/2013
 0726  8A E0					mov ah, al
 0728				ci_rmdir_getarg2: 
 0728  AC					lodsb
 0729  3C 20				        cmp al, 20h
 072B  77 FB					ja short ci_rmdir_getarg2
 072D  4E					dec si
 072E  32 C0					xor al, al
 0730  88 04					mov byte ptr [SI], al
								
 0732  B0 2E					mov al, '.'
 0734  38 C4					cmp ah, al ; dot
 0736  75 17					jne short @f

 0738  8A 24			                mov ah, byte ptr [SI]
 073A  80 FC 21					cmp ah, 21h
 073D  73 03 E9 00F9				jb ci_error

 0742  38 C4					cmp ah, al ;'.' ; dotdot (parent dir)
 0744  75 09					jne short @f

 0746  46					inc si
 0747  80 3C 21					cmp byte ptr [SI], 21h
 074A  73 03 E9 00EC				jb ci_error		
 074F				@@:
						; u_namep = pointer to directory path name

 074F  E8 094D					call name_i
 0752  73 03 E9 00E4		        	jc ci_error

 0757  83 F8 29					cmp ax, ROOT_DIR_INODE_NUMBER
 075A  75 03 E9 00DC		        	je ci_error

 075F  3B 06 21F9 R				cmp ax, word ptr [u_cdir]
 0763  75 03 E9 00D3		        	je ci_error

 0768  50					push ax
 0769  BE 20B0 R		                mov si, offset Msg_Removing_Directory
 076C  E8 FB00			               	call UNIX_PRINTMSG
 076F  58					pop ax

 0770  E8 07F2					call remove_directory
 0773  73 03 E9 00C3		                jc ci_error

 0778  E9 03DF					jmp ci_sync_exit

				; NAMEI		; 17/02/2013, print i-number of file/directory
 077B				loc_cmd_namei:
 077B  3D 616E					cmp ax, 'an'
 077E  75 55					jne short loc_cmd_inode
 0780  AD					lodsw
 0781  3D 656D					cmp ax, 'em'
 0784  75 32					jne short @f
 0786  AC					lodsb	
 0787  3C 69					cmp al, 'i'	
 0789  75 2D					jne short @f
 078B  AC					lodsb
 078C  0A C0					or al, al
 078E  75 28					jnz short @f
 0790				namei_sf1:
 0790  89 36 21FB R				mov word ptr [u_namep], si
 0794  AC					lodsb
 0795  3C 20					cmp al, 20h
 0797  74 F7					je short namei_sf1
 0799  72 1D					jb short @f
 079B				namei_sf2:
 079B  AC					lodsb
 079C  3C 20				        cmp al, 20h
 079E  77 FB					ja short namei_sf2
 07A0  4E					dec si
 07A1  32 C0					xor al, al
 07A3  88 04					mov byte ptr [SI], al
 07A5				namei_fsf:
 07A5  E8 08F7					call name_i
 07A8  73 0F					jnc short namei_iget
 07AA  80 FC FF					cmp ah, 0FFh
 07AD  73 03 E9 0089				jb ci_error
 07B2  BE 23AF R				mov si, offset NotFound_msg
 07B5  E8 FAB7					call UNIX_PRINTMSG
 07B8				@@:
 07B8  C3					retn
 07B9				namei_iget:
 07B9  E8 09E7					call i_get
 07BC				namei_print_inum:
 07BC  72 7D					jc ci_error
 07BE  8B C8					mov cx, ax
 07C0  BE 23BF R				mov si, offset msgINumber
 07C3  E8 FAA9					call UNIX_PRINTMSG		
 07C6  8B C1					mov ax, cx
 07C8  B9 0003					mov cx, 3
 07CB  E8 1285					call print_decimal_number
 07CE  BE 2097 R				mov si, offset UNIX_CRLF
 07D1  E8 FA9B					call UNIX_PRINTMSG	
 07D4  C3					retn

				; INODE		; 17/02/2013, print inode structure/details
 07D5				loc_cmd_inode:
 07D5  3D 6E69					cmp ax, 'ni'
 07D8  75 DE					jne short @b
 07DA  AD					lodsw
 07DB  3D 646F					cmp ax, 'do'
 07DE  75 D8					jne short @b
 07E0  AC					lodsb	
 07E1  3C 65					cmp al, 'e'	
 07E3  75 D3					jne short @b
 07E5  AC					lodsb
 07E6  0A C0					or al, al
 07E8  75 CE					jnz short @b
 07EA				inode_getarg1:
 07EA  8B DE					mov bx, si
 07EC  AC					lodsb
 07ED  3C 20					cmp al, 20h
 07EF  74 F9					je short inode_getarg1
 07F1  77 05					ja short inode_getarg2
 07F3  A1 2211 R				mov ax, word ptr [ii]
 07F6  EB 0C					jmp short @f
 07F8				inode_getarg2:
 07F8  AC					lodsb
 07F9  3C 20				        cmp al, 20h
 07FB  77 FB					ja short inode_getarg2
 07FD  4E					dec si
 07FE  33 C0					xor ax, ax
 0800  88 04					mov byte ptr [SI], al
 0802  8B F3					mov si, bx
 0804				@@:
 0804  E8 139A					call show_inode
 0807  72 32					jc ci_error
 0809				@@:		
 0809  C3					retn

 080A				cl3:
 080A  80 F9 03					cmp cl, 3
 080D  72 40					jb short cl2
				; DIR
 080F				loc_cmd_dir:	; 05/01/2013 @b->@f, dir_print modifications
 080F  3D 6964					cmp ax, 'id'
 0812  75 2D					jne short @f
 0814  AC					lodsb
 0815  3C 72			                cmp al, 'r'
 0817  75 28					jne short @f
 0819  AC					lodsb
 081A  0A C0					or al, al
 081C  75 23					jnz short @f
 081E  A2 22E1 R				mov byte ptr [ls_option], al ; 20/01/2013
 0821				dir_getarg:	; 30/12/2012
 0821  AC					lodsb
 0822  3C 20					cmp al, 20h
 0824  74 FB					je short dir_getarg
 0826  73 04					jnb short dir_namei
 0828				ls_getarg3:
 0828  33 C0					xor ax, ax
 082A  EB 0A					jmp short dir_print
 082C				dir_namei:      ; 30/12/2012
 082C  4E					dec si
 082D  89 36 21FB R				mov word ptr [u_namep], si
 0831  E8 086B					call name_i
 0834  72 05					jc short ci_error
						; ax = i-number
 0836				dir_print:
 0836  E8 048D					call print_directory_list
 0839  73 06					jnc short @f
 083B				ci_error:
 083B  BE 208E R				mov si, offset error_msg
 083E  E8 FA2E					call unix_printmsg
 0841				@@:		
 0841  C3					retn
				; 23/02/2013
 0842				cl1:
 0842  3C 3F					cmp al, '?'
 0844  75 FB					jne @b
 0846  80 FC 00					cmp ah, 0
 0849  75 03 E9 FC5B				je ci_?
 084E				@@:		
 084E  C3					retn		 

				; 16/12/2012
 084F				cl2:
 084F  80 F9 02					cmp cl, 2
 0852  72 EE					jb short cl1 ; 23/02/2013
						; jb @b
				; CD (CHDIR)
 0854				loc_cmd_cd:
 0854  3D 6463					cmp ax, 'dc'
 0857  75 08					jne short loc_cmd_ls
 0859  AC					lodsb
 085A  0A C0					or al, al
 085C  75 F0					jnz short @b
 085E  E9 FC6F			                jmp ci_cd_getarg
				; LS (DIR)
 0861				loc_cmd_ls:	; 20/01/2013
 0861  3D 736C					cmp ax, 'sl'
 0864  75 2B					jne short loc_cmd_rm
 0866  AC					lodsb
 0867  0A C0					or al, al
 0869  75 E3					jnz short @b
 086B  C6 06 22E1 R 01				mov byte ptr [ls_option], 1
 0870				ls_getarg1:	; 21/01/2013
 0870  AC					lodsb
 0871  3C 20					cmp al, 20h
 0873  74 FB					je short ls_getarg1
 0875  72 B1					jb short ls_getarg3
 0877				ls_getarg2:
 0877  3C 2D					cmp al,'-'
 0879  75 B1					jne short dir_namei
 087B  AC					lodsb
 087C  3C 6C					cmp al, 'l'
 087E  75 A8					jne short ls_getarg3
 0880				ls_getarg4:
 0880  AC					lodsb
 0881  FE 06 22E1 R				inc byte ptr [ls_option]
 0885  3C 20					cmp al, 20h
 0887  74 98					je short dir_getarg
 0889  72 9D					jb short ls_getarg3
 088B  FE 0E 22E1 R				dec byte ptr [ls_option]
 088F  EB 97					jmp short ls_getarg3
				; RM
 0891				loc_cmd_rm:		
 0891  3D 6D72					cmp ax, 'mr'
 0894  74 03 E9 00BF		                jne loc_cmd_fs ; 16/02/2013
 0899  AC					lodsb
 089A  0A C0					or al, al
 089C  75 B0					jnz short @b
 089E				rm_getarg:
 089E  89 36 21FB R				mov word ptr [u_namep], si
 08A2  AC					lodsb
 08A3  3C 20					cmp al, 20h
 08A5  74 F7					je short rm_getarg
 08A7  72 A5					jb short @b
 08A9				rm_namei:
 08A9  E8 07F3					call name_i
 08AC  72 8D					jc short ci_error

						;cmp word ptr [ii], 41   ; i-number of the directory
						;jne short @f

 08AE  BE 2AA2 R				mov si, offset BSBuffer + bs_BF_inode_Number
 08B1  3B 04					cmp ax, word ptr [SI]    ; is it i-number of the boot file
						;je short ci_error
 08B3  75 0E					jne short @f

 08B5  83 3E 2211 R 29				cmp word ptr [ii], 41   ; i-number of root directory
 08BA  75 03 E9 FF7C		                je ci_error

 08BF  C7 04 0000				mov word ptr [SI], 0  ; reset wrong boot file configuration
 08C3  A3 21D4 R		@@:		mov word ptr [uf_i_number], ax ; word ptr [u_dirbuf]
						; 05/01/2013
 08C6  8B 16 2211 R				mov dx, word ptr [ii]
 08CA  89 16 1F02 R				mov word ptr [pdir], dx
 08CE  E8 08D2					call i_get
 08D1  73 03 E9 FF65		                jc ci_error
 08D6  A1 21D6 R		                mov ax, word ptr [inode_flgs]
 08D9  F6 C4 40					test ah, 40h ; 'directory' flag
 08DC  74 03 E9 FF5A		                jnz ci_error
 08E1  A8 04					test al, 4h
 08E3  75 03 E9 FF53		                jz ci_error ; 'write' flag
						;
 08E8				rm_move_fn:
 08E8  BE 2209 R				mov si, offset u_dirbuf + 2
 08EB  BF 21C7 R				mov di, offset Boot_File_Name
 08EE  B9 0008					mov cx, 8
 08F1				@@:
 08F1  AC			                lodsb
 08F2  22 C0			                and al, al
 08F4  74 05					jz short @f
 08F6  AA			                stosb
 08F7  E2 F8			                loop @b
 08F9  32 C0					xor al, al ; 06/01/2013
 08FB				@@:
 08FB  88 05					mov byte ptr [DI], al ; 0

 08FD  BE 2191 R				mov si, offset msg_remove_question1
 0900  E8 F96C					call UNIX_PRINTMSG
 0903  BE 21C7 R				mov si, Offset Boot_File_Name
 0906  E8 F966					call UNIX_PRINTMSG
 0909  BE 21AB R				mov si, offset msg_remove_question2
 090C  E8 F960					call UNIX_PRINTMSG
 090F  BE 1F0A R				mov si, offset msg_yes_no
 0912  E8 F95A					call UNIX_PRINTMSG
 0915				rm_yn_input:	 ; ask for remove
 0915  33 C0			                xor ax, ax
 0917  CD 16			                int 16h				; wait for keyboard command
 0919  3C 03			                cmp al, 'C'-40h
 091B  74 1A			                je short @f                   
 091D  3C 1B			                cmp al, 27
 091F  74 16			                je short @f
 0921  24 DF			                and al, 0DFh
 0923  3C 59			                cmp al, 'Y'			; Yes?
 0925  74 11			                je short rm_a_yes    	; overwrite
 0927  3C 4E			                cmp al, 'N'                     ; No?
 0929  75 EA			                jne short rm_yn_input         
 092B				rm_a_no:
 092B  BE 208A R			        mov si, offset msg_No
 092E  E8 F93E					call UNIX_PRINTMSG
 0931  BE 2097 R		                mov si, offset UNIX_CRLF
 0934  E8 F938			                call UNIX_PRINTMSG
 0937				@@:
 0937  C3					retn
 0938				rm_a_yes:
 0938  BE 2085 R		                mov si, offset msg_YES
 093B  E8 F931			                call UNIX_PRINTMSG
 093E  BE 2097 R		                mov si, offset UNIX_CRLF
 0941  E8 F92B			                call UNIX_PRINTMSG
 0944				rm_unlink:
 0944  BE 203E R		                mov si, offset Msg_removing_file
 0947  E8 F925			                call UNIX_PRINTMSG

 094A  A1 21D4 R				mov ax, word ptr [uf_i_number]
 094D  E8 0F54					call unlink
 0950  73 03 E9 FEE6		                jc ci_error
						
 0955  E9 0202					jmp ci_sync_exit

				; FS (Volume)  ; 16/02/2013   (File System / Volume Info)
 0958  3D 7366			loc_cmd_fs:	cmp ax, 'sf'
 095B  75 DA					jne short @b
 095D  AC					lodsb
 095E  0A C0					or al, al
 0960  75 D5					jnz short @b
 0962				vol_infO_print:
 0962				fs_info_print:
 0962  E8 1139					call print_volume_info
 0965				@@:
 0965  C3					retn
 0966				cl6: ; 16/02/2013	
 0966  80 F9 06					cmp cl, 6
 0969  75 FA					jne short @b 

				; VOLUME (fs)  ; 16/02/2013
 096B				loc_cmd_volume:
 096B  3D 6F76					cmp ax, 'ov'
 096E  75 F5					jne short @b
 0970  AD					lodsw
 0971  3D 756C					cmp ax, 'ul'
 0974  75 EF					jne short @b
 0976  AD					lodsw
 0977  3D 656D					cmp ax, 'em'
 097A  75 E9					jne short @b
 097C  AC					lodsb
 097D  0A C0					or al, al
 097F  74 E1					jz short vol_infO_print
 0981				@@:
 0981  C3					retn
				; 15/12/2012
 0982				cl7:
 0982  80 F9 07					cmp cl, 7
 0985  72 DF					jb cl6 ;16/02/2013
 0987  76 03 E9 01E3				ja cl8     
				; FROMDOS
 098C				loc_cmd_fromdos:
 098C  3D 7266					cmp ax, 'rf'
 098F  75 F0					jne short @b
 0991  AD					lodsw
 0992  3D 6D6F					cmp ax, 'mo'
 0995  75 EA					jne short @b
 0997  AD					lodsw
 0998  3D 6F64					cmp ax, 'od'
 099B  75 E4					jne short @b
 099D  AC					lodsb	
 099E  3C 73					cmp al, 's'	
 09A0  75 DF					jne short @b
 09A2  AC					lodsb
 09A3  0A C0					or al, al
 09A5  75 DA					jnz short @b
 09A7				fromdos_df1:
 09A7  89 36 1F06 R				mov word ptr [arg], si
 09AB  AC					lodsb
 09AC  3C 20					cmp al, 20h
 09AE  74 F7					je short fromdos_df1
 09B0  72 CF					jb short @b
 09B2				fromdos_df2:
 09B2  AC					lodsb
 09B3  3C 20				        cmp al, 20h
 09B5  77 FB					ja short fromdos_df2
 09B7  32 C0					xor al, al
 09B9  88 44 FF					mov byte ptr [SI]-1, al
 09BC				fromdos_uf1:
 09BC  89 36 21FB R				mov word ptr [u_namep], si
 09C0  AC					lodsb
 09C1  3C 20					cmp al, 20h
 09C3  74 F7					je short fromdos_uf1
 09C5  72 BA					jb short @b
 09C7				fromdos_uf2:
 09C7  AC					lodsb
 09C8  3C 20				        cmp al, 20h
 09CA  77 FB					ja short fromdos_uf2
 09CC  4E					dec si
 09CD  32 C0					xor al, al
 09CF  88 04					mov byte ptr [SI], al
 09D1				fromdos_fdf:
 09D1  8B 16 1F06 R				mov dx, word ptr [arg]
 09D5  B9 0027			                mov cx, 27h ; File Attributes
 09D8  B4 4E			                mov ah, 4Eh ; MS Dos Function = Find First File
 09DA  CD 21			                int 21h
 09DC  73 03 E9 FE5A		                jc  ci_error ; file not found
 09E1				fromdos_fuf:
 09E1  E8 06BB					call name_i
 09E4  73 10			                jnc short @f

 09E6  80 FC FF					cmp ah, 0FFh
 09E9  74 03 E9 FE4D		                jne ci_error
						
 09EE  33 C0					xor ax, ax
 09F0  A3 21D4 R				mov word ptr [uf_i_number], ax
 09F3  E9 0097			                jmp fromdos_s_fs_mdt
 09F6				@@:
 09F6  A3 21D4 R				mov word ptr [uf_i_number], ax
						; 05/01/2013
 09F9  8B 16 2211 R				mov dx, word ptr [ii]
 09FD  89 16 1F02 R				mov word ptr [pdir], dx
 0A01  E8 079F			                call i_get
 0A04  73 03 E9 FE32		                jc ci_error
 0A09  A1 21D6 R		                mov ax, word ptr [inode_flgs]
 0A0C  F6 C4 40					test ah, 40h ; 'directory' flag
 0A0F  74 03 E9 FE27				jnz ci_error
 0A14  A8 04			                test al, 4h ; 'write' flag
 0A16  75 03 E9 FE20				jz ci_error
						;
 0A1B				fromdos_afow:
 0A1B  BE 2209 R				mov si, offset u_dirbuf + 2
 0A1E  BF 21C7 R				mov di, offset Boot_File_Name
 0A21  B9 0008					mov cx, 8
 0A24				@@:
 0A24  AC			                lodsb
 0A25  22 C0			                and al, al
 0A27  74 05					jz short @f
 0A29  AA			                stosb
 0A2A  E2 F8			                loop @b
 0A2C  32 C0					xor al, al ; 01/03/2013
 0A2E				@@:
 0A2E  88 05					mov byte ptr [DI], al ; 0

 0A30  BE 216C R				mov si, offset msg_overwrite_question1
 0A33  E8 F839					call UNIX_PRINTMSG
 0A36  BE 21C7 R				mov si, Offset Boot_File_Name
 0A39  E8 F833					call UNIX_PRINTMSG
 0A3C  BE 2189 R				mov si, offset msg_overwrite_question2
 0A3F  E8 F82D					call UNIX_PRINTMSG
 0A42  BE 1F0A R				mov si, offset msg_yes_no
 0A45  E8 F827					call UNIX_PRINTMSG
 0A48				fromdos_afow_input:	 ; ask for overwrite
 0A48  33 C0			                xor ax, ax
 0A4A  CD 16			                int 16h				; wait for keyboard command
 0A4C  3C 03			                cmp al, 'C'-40h
 0A4E  74 1A			                je short @f                   
 0A50  3C 1B			                cmp al, 27
 0A52  74 16			                je short @f
 0A54  24 DF			                and al, 0DFh
 0A56  3C 59			                cmp al, 'Y'			; Yes?
 0A58  74 11			                je short fromdos_afow_yes    	; overwrite
 0A5A  3C 4E			                cmp al, 'N'                     ; No?
 0A5C  75 EA			                jne short fromdos_afow_input         
 0A5E				fromdos_afow_no:
 0A5E  BE 208A R			        mov si, offset msg_No
 0A61  E8 F80B					call UNIX_PRINTMSG
 0A64  BE 2097 R		                mov si, offset UNIX_CRLF
 0A67  E8 F805			                call UNIX_PRINTMSG
 0A6A				@@:
 0A6A  C3					retn
 0A6B				fromdos_afow_yes:
 0A6B  BE 2085 R		                mov si, offset msg_YES
 0A6E  E8 F7FE			                call UNIX_PRINTMSG
 0A71  BE 2097 R		                mov si, offset UNIX_CRLF
 0A74  E8 F7F8			                call UNIX_PRINTMSG
 0A77				fromdos_uf_itrunc:
						; 05/01/2013
 0A77  A1 1F02 R				mov ax, word ptr [pdir]
 0A7A  E8 0726			                call i_get
 0A7D  73 03 E9 FDB9		                jc ci_error
						;
 0A82  A1 21D4 R				mov ax, word ptr [uf_i_number]
 0A85  E8 0E7D					call itrunc ; truncate file
 0A88  73 03 E9 FDAE		                jc ci_error

 0A8D				fromdos_s_fs_mdt:
						; 15/12/2012
						; Derived from UNIXBOOT.ASM (30/11/2012)
				               ;mov 	si, DTA_FileSize
 0A8D  BE 009C			 		mov	si, DTA_FileSize+2
				               ;mov     ax, word ptr [SI]
				               ;mov 	dx, word ptr [SI]+2
					       ;or	ax, dx  ; 64KB file size limit
 0A90  8B 04			                mov	ax, word ptr [SI]
 0A92  23 C0					and	ax, ax
 0A94  74 03 E9 FDA2		                jnz     ci_error

						;mov 	word ptr [file_Size], ax

 0A99  BE 0098					mov     si, DTA_Date
 0A9C  8B 04			                mov 	ax, word ptr [SI]
 0A9E  50			                push 	ax
 0A9F  83 E0 1F			                and 	ax, 00011111b	         ; Day Mask
 0AA2  A3 2219 R				mov 	word ptr [day], ax
 0AA5  58			                pop 	ax
 0AA6  B1 05			     		mov     cl, 5
 0AA8  D3 E8					shr     ax, cl                   ; shift right 5 times
 0AAA  50				        push 	ax 
 0AAB  83 E0 0F					and     ax, 00001111b            ; Month Mask
 0AAE  A3 2217 R		  		mov 	word ptr [month], ax
 0AB1  58			                pop 	ax
 0AB2  B1 04					mov     cl, 4
 0AB4  D3 E8					shr     ax, cl
					       ;and     ax, 01111111b            ; Result = Year - 1980
 0AB6  05 07BC			                add     ax, 1980
 0AB9  A3 2215 R		                mov     word ptr [year], ax
				 		                
 0ABC  BE 0096			                mov     si, DTA_Time
 0ABF  8B 04			                mov 	ax, word ptr [SI]
 0AC1  50			                push 	ax
 0AC2  83 E0 1F					and     ax, 0000011111b          ; Second Mask
 0AC5  D0 E0					shl 	al, 1		 
 0AC7  A3 221F R				mov     word ptr [second], ax
 0ACA  58			                pop 	ax
 0ACB  B1 05					mov     cl, 5
 0ACD  D3 E8					shr     ax, cl                   ; shift right 5 times
 0ACF  50					push	ax
 0AD0  83 E0 3F					and     ax, 0000111111b          ; Minute Mask
 0AD3  A3 221D R				mov     word ptr [minute], ax
 0AD6  58			                pop 	ax
 0AD7  B1 06					mov	cl, 6			 ; shift right 6 times
 0AD9  D3 E8			                shr     ax, cl                   ; (6+5=11)
 0ADB  A3 221B R				mov     word ptr [hour], ax	 ; ax = hours	
				           
 0ADE  E8 0AFD			                call convert_to_epoch

 0AE1  A3 21D0 R				mov word ptr [uf_make_datetime], ax
 0AE4  89 16 21D2 R				mov word ptr [uf_make_datetime]+2, dx
 0AE8				fromdos_odf:
 0AE8  8B 16 1F06 R				mov dx, word ptr [arg]
 0AEC  B4 3D			                mov ah, 3Dh ; MS Dos Function = Open File
 0AEE  32 C0			                xor al, al  
 0AF0  CD 21			                int 21h
 0AF2  73 03 E9 FD44		                jc  ci_error

 0AF7  A3 1D34 R				mov word ptr [FileHandle], ax
						
 0AFA  A1 21D4 R				mov ax, word ptr [uf_i_number]
						; 23/02/2013
 0AFD  23 C0					and ax, ax
 0AFF  74 07					jz short @f
						; jnz short fromdos_wf_msg  ;@f
 0B01  33 C0					xor ax, ax
 0B03  E8 0926					call fromdos_maknod
 0B06  EB 08					jmp short fromdos_wf_msg
 0B08				@@: ; fromdos_mknod:
 0B08  B8 001E			                mov ax, i_flags ;   1Eh
 0B0B  E8 08B1				      	call mak_nod
 0B0E  72 30					jc short fromdos_cf
 0B10				fromdos_wf_msg:
 0B10  BE 202C R		                mov si, offset Msg_writing_file
 0B13  E8 F759			                call UNIX_PRINTMSG
 0B16				@@:		; 16/12/2012
 0B16  33 C0					xor ax, ax 
 0B18  A3 2201 R			        mov word ptr [u_off], ax
 0B1B				@@:
				;loc_read_dos_sf:                
 0B1B  B4 3F			                mov ah, 3Fh ; Read File
 0B1D  B9 0200			                mov cx, 512
 0B20  BA 2E90 R		                mov dx, offset ReadBUFFER
 0B23  8B 1E 1D34 R		                mov bx, word ptr [FileHandle]
 0B27  CD 21			                int 21h
 0B29  72 15			                jc short fromdos_cf

 0B2B  0B C0					or ax, ax
 0B2D  74 11					jz short fromdos_cf
						
 0B2F  A3 2203 R				mov word ptr [u_count], ax

 0B32  C7 06 21FF R 2E90 R			mov word ptr [u_base], offset ReadBuffer

 0B38  A1 21D4 R				mov ax, word ptr [uf_i_number] ; word ptr [u_dirbuf]
 0B3B  E8 0957					call write_i
 0B3E  73 DB					jnc short short @b ; loc_read_dos_sf
 0B40				fromdos_cf:
 0B40  9C					pushf
 0B41  B4 3E			                mov ah, 3Eh ; Close File
 0B43  8B 1E 1D34 R		                mov bx, word ptr [FileHandle]
 0B47  CD 21			                int 21h
 0B49  9D					popf
 0B4A  73 03 E9 FCEC		                jc ci_error
 0B4F				@@:
						; 23/02/2013
 0B4F  33 C0					xor ax, ax
 0B51  A3 21F0 R				mov word ptr [inode_mtim], ax
 0B54  A3 21F2 R				mov word ptr [inode_mtim]+2, ax
 0B57  E8 0814					call set_imod
 0B5A				ci_sync_exit:
 0B5A  E8 0B9E					call sync
 0B5D  73 03 E9 FCD9		                jc ci_error

 0B62				fromdos_retn:
 0B62  BE 207E R				mov si, offset Msg_OK
 0B65  E8 F707			                call UNIX_PRINTMSG

 0B68  BE 2097 R		                mov si, offset UNIX_CRLF
 0B6B  E8 F701			                call UNIX_PRINTMSG
 0B6E				@@:		
 0B6E  C3					retn
 0B6F				cl8:
 0B6F  80 F9 08					cmp cl, 8
						;jb short @b
 0B72  76 03 E9 008F		                ja  cl10    
				; BOOTFILE
 0B77				loc_cmd_bootfile:
 0B77  3D 6F62					cmp ax, 'ob'
 0B7A  75 F2					jne short @b
 0B7C  AD					lodsw
 0B7D  3D 746F					cmp ax, 'to'
 0B80  75 EC					jne short @b
 0B82  AD					lodsw
 0B83  3D 6966					cmp ax, 'if'
 0B86  75 E6					jne short @b
 0B88  AD					lodsw	
 0B89  3D 656C					cmp ax, 'el'	
 0B8C  75 E0					jne short @b
 0B8E  AC					lodsb
 0B8F  0A C0					or al, al
 0B91  75 DB					jnz short @b
 0B93				@@:
 0B93  89 36 21FB R				mov word ptr [u_namep], si
 0B97  AC					lodsb
 0B98  3C 20					cmp al, 20h
 0B9A  74 F7					je short @b
 0B9C  77 2F					ja short ci_bf_namei

 0B9E  BE 2AA2 R				mov si, offset BSBuffer + bs_BF_inode_Number
 0BA1  8B 04					mov ax, word ptr [SI]
 0BA3  23 C0					and ax, ax
 0BA5  75 07					jnz short @f
 0BA7				ci_no_bootfile:		
 0BA7  BE 20EC R				mov si, offset msg_Startup_File_Not_Exists
 0BAA  E8 F6C2					call UNIX_PRINTMSG

 0BAD  C3					retn
 0BAE				@@:
 0BAE  E8 0B9B					call find_bfn
 0BB1  73 03 E9 FC85				jc  ci_error

 0BB6				ci_move_bfn_1:
 0BB6  BE 2209 R				mov si, offset u_dirbuf + 2
 0BB9  BF 21C7 R				mov di, offset Boot_File_Name
 0BBC  B9 0008					mov cx, 8
 0BBF				ci_move_bfn_2:
 0BBF  AC			                lodsb
 0BC0  22 C0			                and al, al
 0BC2  75 02					jnz short @f
 0BC4  88 05					mov byte ptr [DI], al ; 0
 0BC6				@@:
 0BC6  AA			                stosb
 0BC7  E2 F6			                loop ci_move_bfn_2

 0BC9  E8 0BBD			                call proc_display_startupfile_info

 0BCC  C3					retn
 0BCD				ci_bf_namei:
 0BCD  E8 04CF					call name_i
 0BD0  73 03 E9 FC66				jc ci_error
						
 0BD5  83 3E 2211 R 29				cmp word ptr [ii], ROOT_DIR_INODE_NUMBER
 0BDA  74 03 E9 FC5C				jne ci_error

						; 05/01/2013
						; ax = i-number of (new) boot file
 0BDF  E8 05C1					call i_get
 0BE2  73 03 E9 FC54		                jc ci_error
 0BE7  F7 06 21D6 R 4000	                test word ptr [inode_flgs], 4000h ; directory ?
 0BED  74 03 E9 FC49		                jnz ci_error
 0BF2				@@:
 0BF2  BE 2AA2 R				mov si, offset BSBuffer + bs_BF_inode_Number
 0BF5  89 04					mov word ptr [SI], ax

 0BF7  E8 0B01					call sync
 0BFA  73 03 E9 FC3C		                jc ci_error

 0BFF  BE 2116 R				mov si, offset msg_sf_configuration_set_ok
 0C02  E8 F66A			                call UNIX_PRINTMSG
 0C05				@@:
 0C05  C3					retn
 0C06				cl10:
 0C06  80 F9 0A					cmp cl, 10
 0C09  75 3E					jne short @f
				; NOBOOTFILE
 0C0B				loc_cmd_nobootfile:
 0C0B  3D 6F6E					cmp ax, 'on'
 0C0E  75 39					jne short @f
 0C10  AD					lodsw
 0C11  3D 6F62					cmp ax, 'ob'
 0C14  75 33					jne short @f
 0C16  AD					lodsw
 0C17  3D 746F					cmp ax, 'to'
 0C1A  75 2D					jne short @f
 0C1C  AD					lodsw
 0C1D  3D 6966					cmp ax, 'if'
 0C20  75 27					jne short @f
 0C22  AD					lodsw	
 0C23  3D 656C					cmp ax, 'el'	
 0C26  75 21					jne short @f
 0C28  AC					lodsb
 0C29  0A C0					or al, al
 0C2B  75 1C					jnz short @f

 0C2D  BE 2AA2 R				mov si, offset BSBuffer + bs_BF_inode_Number

 0C30  23 C0					and ax, ax
 0C32  75 03 E9 FF70		                jz ci_no_bootfile

 0C37  33 C0					xor ax, ax
 0C39  89 04					mov word ptr [SI], ax

 0C3B  E8 0ABD					call sync
 0C3E  73 03 E9 FBF8		                jc ci_error

 0C43  BE 2140 R				mov si, msg_sf_configuration_reset_ok
 0C46  E8 F626			                call UNIX_PRINTMSG
 0C49				@@:
 0C49  C3					retn

 0C4A				command_interpreter endp


 0C4A				update_cdir_string proc near
					; 13/01/2013 bugfix
					; 10/12/2012
					; 09/12/2012
					; input -> SI= chdir argument
 0C4A				ucds_0:
 0C4A  BB 1E8C R			mov bx, offset unix_cdir
 0C4D  43				inc bx ; 13/01/2013
 0C4E  8B FB				mov di, bx
 0C50  AC				lodsb
 0C51  3C 2F				cmp al, '/'
 0C53  75 08				jne short @f
 0C55  33 D2				xor dx, dx
 0C57  89 16 1EB2 R			mov word ptr [CDirOffset], dx
 0C5B  EB 11				jmp short ucds_6
 0C5D				@@:
 0C5D  8B 16 1EB2 R			mov dx, word ptr [CDirOffset]
					; 13/01/2013
 0C61  0B D2				or dx, dx
 0C63  74 0E				jz short @f
 0C65  03 FA				add di, dx
 0C67  C6 05 2F				mov byte ptr [DI], '/'
 0C6A  47				inc di
					;
 0C6B  EB 06				jmp short  @f
 0C6D				ucds_8:
 0C6D  47				inc di
 0C6E				ucds_6:
 0C6E  AC				lodsb
 0C6F  3C 2F				cmp al, '/'
 0C71  74 FB				je short ucds_6
 0C73				@@:
 0C73  0A C0				or al, al
 0C75  74 39				jz short ucds_5
 0C77  3C 2E				cmp al, '.'
 0C79  75 2B				jne short ucds_3
 0C7B  AC				lodsb
 0C7C  3C 2E				cmp al, '.'
 0C7E  74 0F				je short ucds_2 ; dotdot
 0C80				ucds_1: ;dot
 0C80  3C 2F				cmp al, '/'
 0C82  74 EA				je short ucds_6
 0C84  0A C0				or al, al
 0C86  74 28				jz short ucds_5
 0C88  B4 2E				mov ah, '.'
 0C8A  86 E0				xchg ah, al
 0C8C  AB				stosw
 0C8D  EB DF				jmp short ucds_6
 0C8F				ucds_2: ; dotdot
 0C8F  3B FB				cmp di, bx
 0C91  77 06				ja short @f
 0C93  33 D2				xor dx, dx
 0C95  88 15				mov byte ptr [DI], dl ; 0
 0C97  EB 28				jmp short ucds_7
 0C99				@@: ; 13/01/2013
 0C99  4F				dec di
 0C9A				@@: ; move back
 0C9A  4F				dec di ; 13/01/2013
 0C9B  8A 05				mov al, byte ptr [DI]
 0C9D  3C 2F			        cmp al, '/'
 0C9F  75 F9				jne short @b ; 13/01/2013
 0CA1  EB CA				jmp short ucds_8
 0CA3				ucds_4:
 0CA3  AA				stosb
 0CA4  EB C8				jmp short ucds_6
 0CA6				ucds_3:
 0CA6  AA				stosb
 0CA7  AC				lodsb
 0CA8  3C 2F				cmp al, '/'
 0CAA  74 F7				je short ucds_4
 0CAC  22 C0				and al, al
 0CAE  75 F6				jnz short ucds_3
 0CB0				ucds_5: ; 13/01/2013
 0CB0  3B FB				cmp di, bx
 0CB2  76 07				jna short ucds_9
 0CB4  4F				dec di
 0CB5  80 3D 2F				cmp byte ptr [DI], '/'
 0CB8  74 01				je short ucds_9
 0CBA  47				inc di
 0CBB				ucds_9:
					; 13/01/2013
 0CBB  88 05				mov byte ptr [DI], al ; 0
 0CBD  8B D7				mov dx, di
 0CBF  2B D3				sub dx, bx
 0CC1				ucds_7:
 0CC1  89 16 1EB2 R			mov word ptr [CDirOffset], dx
					
 0CC5  C3				retn

 0CC6				update_cdir_string  endp


 0CC6				print_directory_list proc near
					; 23/02/2013 long list printing (list_count)
					; 03/02/2013
					; 22/01/2013 ls -l command feature 
					; 21/01/2013 dir/ls options
					; 20/01/2013 directory sign ("/")
					; 30/12/2012
 0CC6  0B C0				or ax, ax ; i-number of directory	
 0CC8  75 03				jnz short @f
					
					; 09/12/2012
 0CCA				pdl_0:	
 0CCA  A1 21F9 R			mov ax, word ptr [u_cdir]
 0CCD				@@:
 0CCD  E8 04D3				call i_get
 0CD0  72 0B			        jc short @f ; 20/01/2013 ; jc short pdl_9

 0CD2  F7 06 21D6 R 4000		test word ptr [inode_flgs], 4000h ; directory i-node ?
 0CD8  75 04				jnz short pdl_2
 0CDA				pdl_1:
 0CDA  B4 FF				mov ah, 0FFh ; error number
 0CDC  F9				stc
 0CDD				@@: ; 20/01/2013
				       ;jmp short pdl_9
 0CDD  C3			        retn
 0CDE				pdl_2:
					;mov ax, word ptr [inode_size]
					;mov word ptr [u_dirp], ax ; put size of directory in u.dirp
					
 0CDE  33 C0				xor ax, ax 
 0CE0  A3 2201 R			mov word ptr [u_off], ax ; u.off is file offset used by user
					;mov word ptr [u_fofp], offset u.off
							       ; u.fofp is a pointer to the offset portion 
							       ; of fsp entry
 0CE3  A2 22E0 R			mov byte ptr [list_count], al ; 0 ; 23/02/2013 
 0CE6				pdl_3:
 0CE6  C7 06 21FF R 2207 R		mov word ptr [u_base], offset u_dirbuf
								  ; u.dirbuf holds a file name copied from
								  ; a directory	
 0CEC  C7 06 2203 R 000A		mov word ptr [u_count], 10 
							  ; u.dirbuff holds a file name copied from
								  ; a directory	
 0CF2  A1 2211 R			mov ax, word ptr [ii]
					 	
 0CF5  E8 043E				call read_i ; read 10 bytes of file with i-number (R1)
						   ; i.e. read a directory entry
 0CF8  72 E3			        jc short @b ; jc short pdl_9
					
 0CFA  8B 0E 2205 R			mov cx, word ptr [u_nread]
 0CFE  0B C9				or cx, cx
 0D00  76 D8				jna short pdl_1 ; gives error return 
					
 0D02  8B 1E 2207 R			mov bx, word ptr [u_dirbuf]
 0D06  23 DB				and bx, bx       
 0D08  75 03 E9 0182		        jz pdl_8
 0D0D				pdl_4:
 0D0D  BE 2209 R			mov si, offset u_dirbuf + 2 ; r3, points to file name of directory entry
 0D10  B9 0008				mov cx, 8 ; max. file name length
 0D13  BF 21C7 R			mov di, offset DirFileName + 1 ; boot_File_Name
 0D16				pdl_5:
 0D16  AC				lodsb  ; mov al, byte ptr [SI], inc si
 0D17  0A C0			 	or al, al
 0D19  74 03				jz short pdl_6 ; 3f. If char is nul, then the last char in string has
							 ; been compared
 0D1B  AA				stosb  ; mov byte ptr [DI], al, inc di 
 0D1C  E2 F8				loop pdl_5
 0D1E				pdl_6: 
					; 21/01/2013
 0D1E  BE 2097 R			mov si, offset UNIX_CRLF
 0D21  E8 F54B				call unix_printmsg
 0D24  80 3E 22E1 R 01			cmp byte ptr [ls_option], 1
 0D29  74 04				je short pdl_7
					;mov al, 0
 0D2B  88 05				mov byte ptr [DI], al
 0D2D  72 45				jb short pdl_13
 0D2F				pdl_7:
					; 20/01/2013
 0D2F  57				push di
 0D30  A1 2211 R			mov ax, word ptr [ii]
 0D33  A3 1F02 R			mov word ptr [pdir], ax
 0D36  A1 2207 R			mov ax, word ptr [u_dirbuf]
 0D39  E8 0467				call i_get
 0D3C  5F				pop di
 0D3D  73 03 E9 0175		        jc pdl_9

					; 22/01/2012
 0D42  80 3E 22E1 R 01			cmp byte ptr [ls_option], 1
 0D47  76 0B				jna short @f
				        
 0D49				pdl_11: ; 21/01/2013 ; Inode number
 0D49  A1 2207 R			mov ax, word ptr [u_dirbuf]
 0D4C  B9 0003				mov cx, 3 ; 03/02/2013
 0D4F  E8 0D01				call print_decimal_number
 0D52  EB 1C			        jmp short pdl_10
 0D54				@@:
 0D54  A1 21D6 R			mov ax, word ptr [inode_flgs]
 0D57  F6 C4 40				test ah, 40h ; 'directory' flag
 0D5A  74 14			        jz short pdl_10

 0D5C  BE 2209 R			mov si, offset u_dirbuf + 2
 0D5F  AC				lodsb
 0D60				@@:
 0D60  3C 2E				cmp al, '.' ; '.'
 0D62  75 07				jne short @f
 0D64  AC				lodsb
 0D65  0A C0				or al, al
 0D67  74 07				jz short pdl_10
 0D69  EB F5				jmp short @b
 0D6B				@@:	
 0D6B  B0 2F				mov  al, '/'
 0D6D  88 05				mov byte ptr [DI], al
 0D6F  47				inc di
 0D70				pdl_10:
					; 21/02/2013
 0D70  32 C0				xor al, al
 0D72  88 05				mov byte ptr [DI], al
 0D74				pdl_13: ; File/Directory name
 0D74  FE 06 22E0 R			inc byte ptr [list_count] ; 23/02/2013
 0D78  BE 21C6 R			mov si, offset DirFileName
 0D7B  E8 F4F1				call unix_printmsg

					; 22/01/2013
 0D7E  80 3E 22E1 R 01			cmp byte ptr [ls_option], 1
 0D83  75 03 E9 00FF		        je pdl_12  ; 03/02/2013 short -> near
 0D88  73 03 E9 0102			jb pdl_8 ; 23/02/2013 

					; 03/02/2013
 0D8D				@@:	; Owner (uid)
				        ;xor bh, bh ; mov bh, 0
 0D8D  B4 03			        mov ah, 03h ; get cursor position and size.
 0D8F  CD 10			        int 10h
 0D91  80 FA 0D				cmp dl, 13
 0D94  73 07				jnb short @f
 0D96  B0 20				mov al, 20h
 0D98  E8 011D				call putc
 0D9B  EB F0				jmp short @b
 0D9D				@@:
 0D9D  32 E4				xor ah, ah
 0D9F  A0 21D9 R			mov al, byte ptr [inode_uid]
 0DA2  B9 0003				mov cx, 3
 0DA5  E8 0CAB				call print_decimal_number	
 0DA8				@@:
 0DA8  B0 20			  	mov al, 20h
 0DAA  E8 010B				call putc
					
 0DAD  B0 20			  	mov al, 20h
 0DAF  E8 0106				call putc

 0DB2				@@:	; Flags/Attributes
 0DB2  8B 16 21D6 R			mov dx, word ptr [inode_flgs]
 0DB6  B1 2D				mov cl, '-'
 0DB8  D0 E6				shl dh, 1
 0DBA  D0 E6				shl dh, 1
 0DBC  73 02				jnc short @f
 0DBE  04 37				add al, 'd'-'-'
 0DC0				@@:
 0DC0  02 C1				add al, cl
 0DC2  E8 00F3				call putc
 0DC5  D0 E2				shl dl, 1
 0DC7  D0 E2				shl dl, 1
 0DC9  D0 E2				shl dl, 1
 0DCB  D0 E2				shl dl, 1
 0DCD  73 02				jnc short @f
 0DCF  04 4B				add al, 'x'-'-'
 0DD1				@@:
 0DD1  02 C1				add al, cl
 0DD3  E8 00E2				call putc
 0DD6  D0 E2				shl dl, 1
 0DD8  73 02				jnc short @f
 0DDA  04 45				add al, 'r'-'-'
 0DDC				@@:
 0DDC  02 C1				add al, cl
 0DDE  E8 00D7				call putc	
 0DE1  D0 E2				shl dl, 1
 0DE3  73 02				jnc short @f
 0DE5  04 4A				add al, 'w'-'-'
 0DE7				@@:
 0DE7  02 C1				add al, cl
 0DE9  E8 00CC				call putc			
 0DEC  D0 E2				shl dl, 1
 0DEE  73 02				jnc short @f
 0DF0  04 45				add al, 'r'-'-'
 0DF2				@@:
 0DF2  04 2D				add al, '-'
 0DF4  E8 00C1				call putc	
 0DF7  D0 E2				shl dl, 1
 0DF9  73 02				jnc short @f
 0DFB  04 4A				add al, 'w'-'-'
 0DFD				@@:
 0DFD  02 C1				add al, cl
 0DFF  E8 00B6				call putc

 0E02  B0 20				mov al, 20h
 0E04  E8 00B1				call putc

 0E07				@@: ; File Size ; 03/02/2013
 0E07  A1 21DA R			mov ax, word ptr [inode_size]
					;mov cx, 5
 0E0A  B1 05				mov cl, 5
 0E0C  E8 0C44				call print_decimal_number	
 0E0F				@@:
 0E0F  B0 20				mov al, 20h
 0E11  E8 00A4				call putc

 0E14  B0 20				mov al, 20h
 0E16  E8 009F				call putc

 0E19				@@: ; 03/02/2013 ; File creation date & time	
					;mov ax, word ptr [inode_ctim]
					;mov dx, word ptr [inode_ctim]+2
					
					; 23/02/2013 ; File last modification date & time	
 0E19  A1 21F0 R			mov ax, word ptr [inode_mtim]
 0E1C  8B 16 21F2 R			mov dx, word ptr [inode_mtim]+2
					
 0E20  E8 083B				call convert_from_epoch
					; cx = day

 0E23  8B C1				mov ax, cx ; word ptr [day]
 0E25  BE 22E2 R			mov si, offset dec_num
 0E28  8B DE				mov bx, si
 0E2A  83 C3 02				add bx, 2	
					; mov cx, 2
 0E2D  B1 02				mov cl, 2
 0E2F  E8 0A4F				call proc_bin_to_decimal
 0E32  C6 07 2F				mov byte ptr [BX], '/'
 0E35  8B F3				mov si, bx
 0E37  46				inc si
 0E38  A1 2217 R			mov ax, word ptr [month]
					; mov cx, 2
 0E3B  B1 02				mov cl, 2
 0E3D  E8 0A41				call proc_bin_to_decimal
 0E40  83 C3 03				add bx, 3
 0E43  C6 07 2F				mov byte ptr [BX], '/'
 0E46  8B F3				mov si, bx
 0E48  46				inc si
 0E49  A1 2215 R			mov ax, word ptr [year]
					;mov cx, 4
 0E4C  B1 04				mov cl, 4
 0E4E  E8 0A30				call proc_bin_to_decimal

 0E51  BE 22E2 R			mov si, offset dec_num
 0E54  E8 F418				call unix_printmsg

 0E57  B0 20				mov al, 20h
 0E59  E8 005C				call putc

 0E5C  BE 22E2 R			mov si, offset dec_num
 0E5F  8B DE				mov bx, si
 0E61  A1 221B R			mov ax, word ptr [hour]
					; mov cx, 2
 0E64  B1 02				mov cl, 2
 0E66  E8 0A18				call proc_bin_to_decimal
 0E69  83 C3 02				add bx, 2
 0E6C  C6 07 3A				mov byte ptr [BX],':'

 0E6F  8B F3				mov si, bx
 0E71  46				inc si
 0E72  A1 221D R			mov ax, word ptr [minute]
					; mov cx, 2
 0E75  B1 02				mov cl, 2
 0E77  E8 0A07				call proc_bin_to_decimal
 0E7A  83 C3 03				add bx, 3
					;mov byte ptr [BX], ':'
					;mov si, bx
					;inc si
					;mov ax, word ptr [second]
					;;mov cx, 2
					;mov cl, 2
					;call proc_bin_to_decimal
					;add bx,
 0E7D  32 C0				xor al, al
 0E7F  88 07			        mov byte ptr [BX], al 

 0E81  BE 22E2 R			mov si, offset dec_num
 0E84  E8 F3E8				call unix_printmsg
 0E87				pdl_12:
 0E87  A1 1F02 R			mov ax, word ptr [pdir]
 0E8A  E8 0316				call i_get
 0E8D  72 28			        jc pdl_9
 0E8F				pdl_8:
					; 30/12/2012
 0E8F  A1 2201 R			mov ax, word ptr [u_off]
 0E92  3B 06 21DA R			cmp ax, word ptr [inode_size]
 0E96  73 19			        jnb short @f ; 22/02/2013 ; jb pdl_3
					; 23/02/2013
 0E98  80 3E 22E0 R 15			cmp byte ptr [list_count], 21
 0E9D  73 03 E9 FE44			jb pdl_3
 0EA2  32 E4				xor ah, ah
 0EA4  88 26 22E0 R			mov byte ptr [list_count], ah ; 0
 0EA8  CD 16				int 16h
 0EAA  3C 1B				cmp al, 1Bh  ; ESC key
 0EAC  74 03 E9 FE35			jne pdl_3
 0EB1				@@:
 0EB1  BE 2097 R		        mov si, offset UNIX_CRLF
 0EB4  E8 F3B8				call unix_printmsg
 0EB7				pdl_9:
 0EB7  C3				retn

 0EB8				putc:  ; 22/01/2013
 0EB8  B4 0E				mov ah, 0Eh
					;mov bx, 07h
 0EBA  CD 10				int 10h
 0EBC  32 C0				xor al, al

 0EBE  C3				retn

 0EBF				print_directory_list endp


 0EBF				sys_chdir proc near
					; 09/12/2012 unixcopy.asm
					;       Retro UNIX v1 FS file import/export version
					;             of syschdir function  
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;
					; RETRO UNIX v1 FS
					; syschdir:
					; makes the directory specified in the argument 
					; the current directory

					; mov word ptr [u_namep], si

 0EBF				syschdir_0:
 0EBF  E8 01DD				call name_i
 0EC2  72 14				jc short syschdir_5

 0EC4				syschdir_1:
 0EC4  E8 02DC				call i_get
 0EC7  72 0F				jc short syschdir_5
 0EC9				syschdir_2:
 0EC9  F7 06 21D6 R 4000		test word ptr [inode_flgs], 4000h ; directory i-node ?
 0ECF  75 04				jnz short syschdir_4
 0ED1				syschdir_3:
 0ED1  B4 FF				mov ah, 0FFh
 0ED3  F9				stc
 0ED4  C3				retn	
 0ED5				syschdir_4:	
 0ED5  A3 21F9 R			mov word ptr [u_cdir], ax
					; mov dx, word ptr [cdev]
					; mov word ptr [u_cdev], dx

 0ED8				syschdir_5:
 0ED8				@@:	; 15/04/2022
 0ED8  C3				retn

 0ED9				sys_chdir endp


 0ED9				make_directory proc near
					; 15/04/2022 ('number of links' bugfix)
					; 30/12/2012
					;
					; mov word ptr [u.namep], si

 0ED9  E8 003B				call sys_mkdir
					;jc short @f
 0EDC  72 FA				jc short @b ; 15/04/2022	

				        ;ax = i-number

					;mov ax, word ptr [ii]
					;mov word ptr [u_dirbuf], ax

 0EDE  C7 06 21FB R 22EE R		mov word ptr [u_namep], offset dot ; ('.')
 0EE4  33 C0				xor ax, ax
 0EE6  A3 21FD R			mov word ptr [u_dirp], ax ; 0	
 0EE9  E8 0569				call mk_dir 	; make a directory entry 
							; in current (ii) directory
					;jc short @f
 0EEC  72 EA				jc short @b ; 15/04/2022

 0EEE  C7 06 21FD R 000A		mov word ptr [u_dirp], 10
 0EF4  A1 1F02 R			mov ax, word ptr [pdir] 
 0EF7  A3 2207 R			mov word ptr [u_dirbuf], ax
 0EFA  C7 06 21FB R 22ED R		mov word ptr [u_namep], offset dotdot ; ('..')

 0F00  E8 0552				call mk_dir

					; 15/04/2022
					;jc short @f
 0F03  72 D3				jc short @b ; 15/04/2022
 0F05  E8 0008				call mkdir_inc_nlinks	
 0F08  A1 1F02 R			mov ax, word ptr [pdir] ; parent dirs i-number 
 0F0B  E8 0295				call i_get
				        ;jc short @f
 0F0E  72 C8				jc short @b
 0F10				mkdir_inc_nlinks:
 0F10  FE 06 21D8 R			inc byte ptr [inode_nlks] ; increase link count
					;call set_imod
 0F14  E9 0457				jmp set_imod
				;@@:
				;	retn

 0F17				make_directory endp


 0F17				sys_mkdir proc near
					; 15/04/2022 ('number of links' bugfix)
					; 05/01/2013 (bugfix)
					; 30/12/2012 unixcopy.asm
					;       Retro UNIX v1 FS file import/export version
					;             of sysmkdir function  
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;
					; RETRO UNIX v1 FS
					; sysmkdir:
					; make a directory
					;
					;
					; return => if cf=1 error code in AH
					; If cf=0 -> AX = I-Number (also in u.dirbuff)

				 	;jsr    r0,arg2 / point u.namep to the file name
				        ;jsr    r0,namei / get the i-number
				        ;       br .+4 / if file not found branch around error
				        ;br     error2 / directory already exists (error)
				        ;tstb   u.uid / is user the super user
				        ;bne    error2 / no, not allowed
				        ;mov    (sp)+,r1 / put the mode in r1
					;bic    $!317,r1 / all but su and ex
				        ;bis    $40000,r1 / directory flag
				        ;jsr    r0,maknod / make the i-node for the directory
				        ;br     sysret2 /

 0F17  8B 1E 21FB R			mov bx, word ptr [u_namep]
 0F1B  8B F3				mov si, bx ; 05/01/2013

 0F1D				makdir_1:
 0F1D  AC				lodsb  
 0F1E  0A C0				or al, al
 0F20  74 08				jz short makdir_2
 0F22  3C 2F				cmp al, '/'
 0F24  75 F7				jne short makdir_1
 0F26  8B DE				mov bx, si	 	
 0F28  EB F3				jmp short makdir_1

 0F2A				makdir_2:
 0F2A  3B 1E 21FB R			cmp bx, word ptr [u_namep]
 0F2E  74 0F				je short makdir_3
 0F30  4E				dec si
 0F31  4E				dec si ; 05/01/2013
 0F32  80 3C 2F			        cmp byte ptr [SI], '/' ; is the last char '/'
 0F35  75 08				jne short makdir_3

 0F37  3B 36 21FB R			cmp si, word ptr [u_namep] ; 05/01/2013
 0F3B  74 02				je short makdir_3

 0F3D  F9				stc
 0F3E				@@:
 0F3E  C3				retn

 0F3F				makdir_3:
 0F3F  89 1E 1F02 R			mov word ptr [pdir], bx
 0F43				sysmkdir_0:
 0F43  E8 0159				call name_i
 0F46  72 02				jc short sysmkdir_1

 0F48  F9				stc
 0F49				@@:
 0F49  C3				retn
 0F4A				sysmkdir_1:
 0F4A  80 FC FF				cmp ah, 0FFh
 0F4D  75 FA			        jne short @b

 0F4F				makdir_4:
					; 15/04/2022
				        ;mov ax, word ptr [ii]
 0F4F  8B 1E 1F02 R			mov bx, word ptr [pdir]
					;mov word ptr [pdir], ax
 0F53  39 1E 21FB R			cmp word ptr [u_namep], bx
 0F57  72 F0				jb short @b ; parent dir of the new sub dir not found

				 	; 15/04/2022
 0F59  A1 2211 R			mov ax, word ptr [ii]
 0F5C  A3 1F02 R			mov word ptr [pdir], ax  ; parent directory 
								 ; (of the new sub dir)
 0F5F				sysmkdir_flags: ; ax = r1 = mode
 0F5F  B8 C00E				mov ax, 0C00Eh ; Flags (1100000000001110b)
 0F62				sysmkdir_maknod:
					; 15/04/2022
					;call mak_nod	
					;; ax = I-Number (also in u.dirbuff)
					;
					;retn
 0F62  E9 045A				jmp mak_nod

 0F65				sys_mkdir endp


 0F65				remove_directory proc near
					; 15/04/2022 ('number of links' bugfix)
					; 05/01/2013
					;
					; mov word ptr [u.namep], si

					;call name_i
				        ;jc @f

					;cmp ax, ROOT_DIR_INODE_NUMBER
				        ;je rmdir_stc_retn

					;cmp ax, word ptr [u_cdir]
				        ;je rmdir_stc_retn

				       ; INPUT ->
				       ; ax = i_number of directory (to be removed)
				       ; u_off = directory entry location + 10 (in parent dir)
				       ; [ii] = i_number of parent directory

 0F65  3B 06 2211 R			cmp ax, word ptr [ii]	; '.' entry
 0F69  75 03 E9 0095			je rmdir_stc_retn

 0F6E  A3 21D4 R			mov word ptr [uf_i_number], ax  ; i_number of dir or file 

 0F71  8B 16 2201 R			mov dx, word ptr [u_off]
 0F75  89 16 1D34 R			mov word ptr [FileHandle], dx ; directory entry location + 10 

 0F79  8B 16 2211 R			mov dx, word ptr [ii] ; i-number of parent directory 
 0F7D  89 16 1F02 R			mov word ptr [pdir], dx

 0F81  E8 021F				call i_get
 0F84  72 7E				jc short @f

 0F86  A1 21D6 R		        mov ax, word ptr [inode_flgs]
 0F89  F6 C4 40				test ah, 40h ;'directory' flag
 0F8C  74 75				jz short rmdir_stc_retn	
 0F8E  A8 04				test al, 4h ; 'write' flag
 0F90  74 71				jz short rmdir_stc_retn
					
 0F92  33 C0				xor ax, ax 
 0F94  A3 2201 R			mov word ptr [u_off], ax 
					;mov word ptr [u_fofp], offset u.off	

 0F97				rmdir_readi_loop:
 0F97  C7 06 21FF R 2207 R		mov word ptr [u_base], offset u_dirbuf
								  ; u.dirbuf holds a file name copied from
								  ; a directory	
 0F9D  C7 06 2203 R 000A		mov word ptr [u_count], 10 	
				 	
 0FA3  A1 2211 R			mov ax, word ptr [ii]
					 	
 0FA6  E8 018D				call read_i ; read 10 bytes of file with i-number
						    ; i.e. read a directory entry
 0FA9  72 59				jc short @f
					
 0FAB  8B 0E 2205 R			mov cx, word ptr [u_nread]

 0FAF  0B C9				or cx, cx
					;jna short rmdir_stc_retn
 0FB1  76 51				jna short @f	

					;cmp cx, 10
					;jb short @f

 0FB3  8B 1E 2207 R			mov bx, word ptr [u_dirbuf]
 0FB7  23 DB				and bx, bx       
 0FB9  74 DC				jz short rmdir_readi_loop

 0FBB  A1 2209 R			mov ax, word ptr [u_dirbuf]+2
 0FBE  3C 2E				cmp al, '.'
 0FC0  75 41				jne short rmdir_stc_retn

 0FC2  22 E4				and ah, ah
 0FC4  74 D1				jz short rmdir_readi_loop

 0FC6  80 FC 2E				cmp ah, '.'	; ".."
 0FC9  75 38				jne short rmdir_stc_retn

 0FCB  8A 26 220B R			mov ah, byte ptr [u_dirbuf]+4

 0FCF  0A E4				or ah, ah
 0FD1  75 30				jnz short rmdir_stc_retn
					
 0FD3  A1 2201 R			mov ax, word ptr [u_off]
					
 0FD6  83 F8 0A				cmp ax, 10     ; protection for removing default system directories
 0FD9  76 28				jna short rmdir_stc_retn ; because, the 1st dir entry of them is ".."

 0FDB  3B 06 21DA R			cmp ax, word ptr [inode_size]
 0FDF  72 B6				jb short rmdir_readi_loop

 0FE1				rmdir_unlink:
					; 15/04/2022
					; unlink dot ('.')
					;mov ax, word ptr [uf_i_number]
					;call i_get
 0FE1  FE 0E 21D8 R			dec byte ptr [inode_nlks]
 0FE5  E8 0386				call set_imod
					;
 0FE8  A1 21D4 R			mov ax, word ptr [uf_i_number]
 0FEB  8B 16 1D34 R			mov dx, word ptr [FileHandle]
 0FEF  89 16 2201 R			mov word ptr [u_off], dx
					; 15/04/2022
					; unlink dotdot ('..')
 0FF3  E8 08AE				call unlink
					; decrease link count of the parent directory
 0FF6  A1 1F02 R			mov ax, word ptr [pdir] ; parent dir
 0FF9  E8 01A7				call i_get
					;cmp byte ptr [inode_nlks], 2
					;jna short @f
 0FFC  FE 0E 21D8 R			dec byte ptr [inode_nlks] ; must be >= 2 after this
					;call set_imod
 1000  E9 036B				jmp set_imod
				;@@:
				;	retn

 1003				rmdir_stc_retn:
 1003  F9				stc
 1004				@@:
 1004  C3				retn

 1005				remove_directory endp


 1005				show_file proc near
					; 07/01/2013
					; 06/01/2013
					; derived from TRDOS command interpreter file (CMDINTR.ASM)
					; 'show' procedure (13/09/2011)

 1005  E8 0097				call name_i
 1008  72 54			        jc short suf_4

 100A  E8 0196			        call i_get
 100D  72 4F				jc short suf_4

 100F  F7 06 21D6 R 4000		test word ptr [inode_flgs], 4000h  ; Directory
 1015  75 47				jnz short suf_4
					
 1017  BE 2097 R		        mov si, offset UNIX_CRLF
 101A  E8 F252			        call UNIX_PRINTMSG

 101D  A1 21DA R			mov ax, word ptr [inode_size]

 1020  BA 0200				mov dx, 512
 1023  3B C2				cmp ax, dx
 1025  76 02				jna short suf_1

 1027  8B C2				mov ax, dx
 1029				suf_1:
 1029  33 D2				xor dx, dx 
 102B  89 16 2201 R		        mov word ptr [u_off], dx
 102F  B9 0016				mov cx, 22
 1032				suf_2:                
 1032  51				push cx	
 1033  A3 2203 R			mov word ptr [u_count], ax
 1036  C7 06 21FF R 2E90 R		mov word ptr [u_base], offset ReadBuffer
 103C  A1 2211 R			mov ax, word ptr [ii] ; word ptr [u_dirbuf]
 103F  E8 00F4				call read_i
 1042  59				pop cx
 1043  72 19				jc short suf_4

 1045  8B 3E 2205 R			mov di, word ptr [u_nread]

 1049  0B FF				or di, di
 104B  74 11				jz short suf_4

 104D  BE 2E90 R			mov si, offset ReadBuffer

 1050  EB 16			        jmp short suf_6
 1052				suf_3:
 1052  23 C9			        and cx, cx
 1054  75 12			        jnz short suf_6
 1056  32 E4				xor ah, ah
 1058  CD 16				int 16h
 105A  3C 1B				cmp al, 1Bh ; ESCAPE Key
 105C  75 07				jne short suf_5
 105E				suf_4:
 105E  BE 2097 R			mov si, offset UNIX_CRLF
 1061  E8 F20B			        call UNIX_PRINTMSG

 1064  C3				retn
 1065				suf_5:
 1065  B9 0014				mov cx, 20
 1068				suf_6:
 1068  32 FF			        xor bh, bh ; mov bh, 0
 106A  B3 07			        mov bl, 7

 106C  AC				lodsb
 106D  3C 0D				cmp al, 0Dh ; ENTER/RETURN Char
 106F  75 03				jne short suf_7
 1071  49				dec cx
 1072  EB 04				jmp short suf_8	
 1074				suf_7:
 1074  3C 09				cmp al, 09h ; TAB Space Char
 1076  74 0C			        je short suf_10
 1078				suf_8:
 1078  B4 0E			        mov ah, 0Eh
				        ;xor bh, bh ; mov bh, 0
				        ;mov bl, 7
 107A  CD 10				int 10h
 107C				suf_9:
 107C  4F				dec di
 107D  75 D3				jnz short suf_3
 107F  A1 2205 R			mov ax, word ptr [u_nread]
 1082  EB AE				jmp short suf_2
 1084				suf_10:
 1084  51			        push cx
				        ;xor bh, bh ; mov bh, 0
 1085  B4 03			        mov ah, 03h ; get cursor position and size.
 1087  CD 10			        int 10h
 1089  8A C2				mov al, dl
 108B  B9 0008				mov cx, 8
				;suf_11a:
				;	cmp al, cl
				;	jb short suf_11b
				;	sub al, cl
				;	jmp short suf_11a
				;suf_11b:
				;	 sub cl, al
 108E				suf_11:
					; 07/01/2013
 108E  32 E4				xor ah, ah
 1090  F6 F1				div cl
 1092  2A CC				sub cl, ah	
					;
 1094  B0 20			        mov al, 20h
 1096  B4 0E			        mov ah, 0Eh 
				        ;mov bl, 7 ; char color attribute	
 1098				suf_12:
 1098  CD 10				int 10h
 109A  E2 FC			        loop suf_12
 109C  59			        pop cx
 109D  EB DD				jmp short suf_9 

 109F				show_file endp


 109F				name_i proc near
					; 05/01/2013
					; 09/12/2012 unixcopy.asm
					;       Retro UNIX v1 FS file import/export version
					; 31/10/2012
					; 14/10/2012
				     	; 07/10/2012
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;
					; RETRO UNIX v1 FS
					;
					; return i-number of file (in AX)
					;
					; input:
					; u_namep = pointer to file path name
					; u_cdir = i-number of users directory
					; ;;u_cdev = device number
					; output:
					; cf= 0 -> no error, i-number in AX (R1)
					; cf= 1 -> error code in AX
					;	

 109F  8B 36 21FB R			mov si, word ptr [u_namep]
 10A3  80 3C 2F				cmp byte ptr [SI], '/' ; is first char in file name a /
 10A6  75 0A				jne short @f
 10A8  B8 0029				mov ax, ROOT_DIR_INODE_NUMBER ; 41
						; Put i-number of root directory in R1
					; xor dx, dx
 10AB  46				inc si  ; go to next char
 10AC  89 36 21FB R			mov word ptr [u_namep], si
 10B0  EB 03				jmp short namei_0
 10B2				@@:
					;mov dx, word ptr [u_cdev]
 10B2  A1 21F9 R			mov ax, word ptr [u_cdir] 
						; put i-number of current directory in R1
 10B5				namei_0:
					;mov word ptr [cdev], dx 
						; device file for users directory into cdev
				; 1
 10B5  80 3C 00				cmp byte ptr [SI], 0 ; is the character in file name a nul
 10B8  76 10			        jna short namei_7 ;nig

 10BA				namei_1: ; 1		
					; get i-node with i-number r1
 10BA  E8 00E6				call i_get
 10BD  72 0B				jc short namei_7

 10BF  F7 06 21D6 R 4000		test word ptr [inode_flgs], 4000h ; directory i-node ?
				        ;jz short namei_6 ; got an error
 10C5  75 04			        jnz short @f
				;nib:
 10C7				namei_6:
 10C7  B4 FF				mov ah, 0FFh ; Error code
 10C9  F9				stc
				;nig:
 10CA				namei_7:
 10CA  C3				retn
 10CB				@@:
 10CB  A1 21DA R			mov ax, word ptr [inode_size]
 10CE  A3 21FD R			mov word ptr [u_dirp], ax ; put size of directory in u.dirp
					
 10D1  33 C0				xor ax, ax 
 10D3  A3 2201 R			mov word ptr [u_off], ax ; u.off is file offset used by user
					;mov word ptr [u_fofp], offset u.off
							       ; u.fofp is a pointer to the offset portion 
							       ; of fsp entry
 10D6				namei_2: ; 2
 10D6  C7 06 21FF R 2207 R		mov word ptr [u_base], offset u_dirbuf
								  ; u.dirbuf holds a file name copied from
								  ; a directory	
 10DC  C7 06 2203 R 000A		mov word ptr [u_count], 10 	
				 	
 10E2  A1 2211 R			mov ax, word ptr [ii]
					 	
 10E5  E8 004E				call read_i ; read 10 bytes of file with i-number (R1)
						   ; i.e. read a directory entry
 10E8  72 E0				jc short namei_7
					
 10EA  8B 0E 2205 R			mov cx, word ptr [u_nread]

 10EE  0B C9				or cx, cx
 10F0  76 D5				jna short namei_6 ; nib ; gives error return 
					
 10F2  8B 1E 2207 R			mov bx, word ptr [u_dirbuf]
 10F6  23 DB				and bx, bx       
 10F8  75 0B				jnz short namei_3 ; 3f. branch when active directory entry
						          ; (i-node word in entry non zero)	
 10FA  A1 2201 R			mov ax, word ptr [u_off]
 10FD  83 E8 0A				sub ax, 10
 1100  A3 21FD R			mov word ptr [u_dirp], ax
 1103  EB D1				jmp short namei_2 ; 2b

 1105				namei_3: ; 3
 1105  8B 36 21FB R			mov si, word ptr [u_namep] ; r2, u.namep points into a file name string
 1109  BF 2209 R			mov di, offset u_dirbuf + 2 ; r3, points to file name of directory entry
 110C  BA 2211 R			mov dx, offset u_dirbuf + 10
 110F				@@:	; 3
 110F  AC				lodsb  ; mov al, byte ptr [SI], inc si   (al = r4)
 1110  0A C0			 	or al, al
 1112  74 0D				jz short namei_4 ; 3f. If char is nul, then the last char in string has
							 ; been compared
 1114  3C 2F				cmp al, "/" 	 ; is char a "/"
 1116  74 09				je short namei_4 ; 3f
 1118  3B FA				cmp di,dx ; offset u_dirbuf + 10 ; r3, 
								     ; have i checked all 8 bytes of file name
 111A  74 F3				je short @b ; 3b
 111C  AE				scasb		      ; cmpb (r3)+, r4   (DI=R3, AL=R4)
				  			      ; compare char in u.namep string to file name char
							      ; read from
 111D  74 F0				je short @b ; directory; brach if chars match
					
 111F  EB B5				jmp short namei_2 ; 2b
							  ; File names do not match, go to next directory entry 	
 1121				namei_4: ; 3
 1121  3B FA				cmp di, dx ; offset u_dirbuf + 10 ; r3, 
								     ; if equal all 8 bytes were matched
 1123  74 06				je short namei_5 ; 3f

 1125  8A 25				mov ah, byte ptr [DI]
					;inc di  ; 05/01/2013
 1127  22 E4				and ah, ah  ; tstb (r3)+, bne 2b
 1129  75 AB				jnz short namei_2 ; 2b

 112B				namei_5: ; 3
 112B  89 36 21FB R			mov word ptr [u_namep], si ; r2
								; u.namep points to char following a "/" or nul
					;mov bx, word ptr [u_dirbuf] ; r1
					
 112F  22 C0				and al, al	; r4. If r4=0 the end of file name reached,
							; if r4="/" then go to next directory
 1131  8B C3				mov ax, bx

 1133  75 85			        jnz namei_1 ; 1b

 1135  C3				retn

 1136				name_i	endp


 1136				read_i proc near
					; 01/03/2013
					; 14/10/2012
					; Boot sector version of "readi" procedure
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;;AX (R1) = i-number 
					; RETRO UNIX v1 FS
					; Boot sector version
					;
					; read from an i-node
					;

 1136  33 D2				xor dx, dx ; 0
 1138  89 16 2205 R			mov word ptr [u_nread], dx ; accumulated number of bytes transmitted
 113C  39 16 2203 R			cmp word ptr [u_count], dx ; is number of byte to read greater than 0
 1140  76 60				jna short read_inode_retn

 1142				read_inode_1:
					; AX = I-Number
 1142  50				push ax
 1143  E8 005D				call i_get ; get i-node into i-node section of core
 1146  72 59				jc short read_inode_3 ; 01/03/2013
 1148  8B 16 21DA R			mov dx, word ptr [inode_size] ; file size in bytes in r2 (DX)
 114C  2B 16 2201 R			sub dx, word ptr [u_off] ; subtract file offset
 1150  76 4F				jna short read_inode_3
 1152  3B 16 2203 R			cmp dx, word ptr [u_count] 
							; are enough bytes left in file to carry out read
 1156  73 04				jnb short read_inode_2
 1158  89 16 2203 R			mov word ptr [u_count], dx

 115C				read_inode_2:
 115C  E8 0121				call m_get  ; returns physical block number of block in file 
						   ; where offset points
 115F  72 40				jc short read_inode_3 ; 01/03/2013
					; AX = Physical block number
 1161  E8 00B4				call dsk_rd ; read in block, BX points to 1st word of data in
						   ; buffer
 1164  72 3B				jc short read_inode_3

 1166				readinode_sioreg:
 1166  8B 36 2201 R		        mov si, word ptr [u_off] ; R2
 116A  8B CE				mov cx, si ; cx = R3, si = R2
 116C  81 C9 FE00			or cx, 0FE00h ; set bits 9...15 of file offset in R3
 1170  81 E6 01FF			and si, 1FFh ; calculate file offset mod 512
 1174  03 F3				add si, bx ; offset WriteBuffer ; si now points to 1st byte in buffer
						   ; where data is to be placed
 1176  8B 3E 21FF R		        mov di, word ptr [u_base] ; R1
 117A  F7 D9				neg cx ; 512 - file offset(mod512) in R3 (cx)
 117C  3B 0E 2203 R		        cmp cx, word ptr [u_count]
 1180  76 04				jna short @f ; 2f

 1182  8B 0E 2203 R		        mov cx, word ptr [u_count]
 1186				@@:
 1186  01 0E 2205 R			add word ptr [u_nread], cx ; r3 + number of bytes
							; xmitted during write is put into
				                        ; u_nread
 118A  29 0E 2203 R		        sub word ptr [u_count], cx
 118E  01 0E 21FF R		        add word ptr [u_base], cx ; points to 1st of remaining
							; data bytes
 1192  01 0E 2201 R		        add word ptr [u_off], cx ; new file offset = number 
							; of bytes done + old file offset

				; end of readinode_sioreg

					; DI = file (user data) offset
					; SI = sector (I/O) buffer offset
					; CX = byte count 

 1196  F3/ A4			        rep movsb

 1198  58				pop ax

 1199  83 3E 2203 R 00			cmp word ptr [u_count], 0
 119E  77 A2				ja short read_inode_1

 11A0  C3				retn

 11A1				read_inode_3:	
 11A1  58				pop ax ; i-number

 11A2				read_inode_retn:
 11A2  C3				retn 

 11A3				read_i 	endp


 11A3				i_get 	proc near
					; 18/11/2012 unix boot file configuration version
					; of "iget" procedure.
					; 16/9/2012
				     	; 14/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; AX=R1 
					; RETRO UNIX v1 FS
					;; return => if cf=1 error number in [Error]  

 11A3  3B 06 2211 R			cmp ax, word ptr [ii] ; AX (R1) = i-number of current file
 11A7  74 2B				je short iget_4
 11A9				iget_1:
 11A9  8A 16 21F7 R			mov dl, byte ptr [imod]
 11AD  22 D2				and dl, dl ; has i-node of current file been modified ?	
 11AF  74 14				jz short iget_2
 11B1  32 D2				xor dl, dl ; mov al, 0
 11B3  88 16 21F7 R			mov byte ptr [imod], dl 
 11B7  50				push ax
 11B8  A1 2211 R			mov ax, word ptr [ii]	
 11BB  FE C2				inc dl ; mov dl, 1
					; dl = 1 = write
 11BD  E8 0015				call i_calc
 11C0  5A				pop dx
 11C1  72 11				jc short iget_4
 11C3  8B C2				mov ax, dx
 11C5				iget_2:
 11C5  23 C0				and ax, ax
 11C7  74 08				jz short iget_3
 11C9  A3 2211 R			mov word ptr [ii], ax
 11CC  32 D2				xor dl, dl		
					; dl = 0 = read
 11CE  E8 0004				call i_calc
 11D1				iget_3:
 11D1  A1 2211 R			mov ax, word ptr [ii]
 11D4				iget_4:
 11D4  C3				retn

 11D5				i_get	endp


 11D5				i_calc 	proc near
					; 04/04/2022
					; Inode Table/List Start Address Modification. (47->31)
					;
					; 18/11/2012 unix boot file configuration version
					; of "icalc" procedure.
					; 17/8/2012
				     	; 14/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; AX=R1
					; 0 = read, 1 = write
					; RETRO UNIX v1 FS
					;
				        ; i-node is located in block (i+47)/16 and
					; begins 32*(i+47) mod 16 bytes from its start
					;; return => if cf=1 error number in [Error]

					; input -> dl = 0 -> read, 1 = Write

 11D5  88 16 21F6 R			mov byte ptr [rw], dl

					;add ax, 47 ; add 47 to inode number
					; 04/04/2022
 11D9  83 C0 1F				add ax, 31 ; add 31 to inode number	
 11DC  50				push ax ; R1 -> -(SP)
 11DD  D1 E8				shr ax, 1 ; divide by 16
 11DF  D1 E8				shr ax, 1
 11E1  D1 E8				shr ax, 1
 11E3  D1 E8				shr ax, 1
						  ; ax contains block number of block in which
						  ; inode exists
 11E5  E8 0030				call dsk_rd
 11E8  5A				pop dx
 11E9  72 2C				jc short icalc_4

 11EB				icalc_1:
 11EB  83 E2 0F				and dx, 0Fh ; (i+31) mod 16 (2022) ; (i+47) mod 16
 11EE  D1 E2				shl dx, 1
 11F0  D1 E2				shl dx, 1
 11F2  D1 E2				shl dx, 1
 11F4  D1 E2				shl dx, 1
 11F6  D1 E2				shl dx, 1 
						  ; DX = 32*((i+31)mod16) ; 32*((i+47)mod 16)	
				                  ; DX (R5) points to first word in i-node i.

 11F8  BF 21D6 R			mov di, offset inode
						; inode is address of first word of current inode
 11FB  B9 0010				mov cx, 16 ; CX = R3	

 11FE  BE 3090 R			mov si, offset WriteBuffer

 1201  03 F2				add si, dx

 1203  80 3E 21F6 R 00			cmp byte ptr [rw], 0
 1208  76 0B				jna short icalc_3 ; 0 = read (and copy i-node to memory) 

 120A				icalc_2:
 120A  87 F7				xchg si, di
					; over write old i-node (in buffer to be written)
 120C  F3/ A5				rep movsw

 120E  A1 2213 R			mov ax, word ptr [buff_s] ; 18/11/2012

 1211  E8 0308				call dsk_wr
				      	
 1214  C3			        retn 

 1215				icalc_3:
					; copy new i-node into inode area of (core) memory
 1215  F3/ A5				rep movsw

 1217				icalc_4:
 1217  C3				retn

 1218				i_calc 	endp


 1218				dsk_rd	proc near
					; 07/07/2015 (floppy disk image file handling)
					; 06/03/2013
					; 28/11/2012 BugFix 
					; 20/10/2012 (buff_s)
					; 14/10/2012
					; fd boot sector version of "dskrd" procedure
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					; RETRO UNIX v1 FS
					; floppy disk boot sector version
					;; return => if cf=1 error number in [Error]

					 ; ax = sector/block number

 1218  BB 3090 R			 mov   bx, offset WriteBuffer ; 28/11/2012

 121B  3B 06 2213 R			 cmp   ax, word ptr [buff_s] ; buffer sector
 121F  74 32			         je    short dsk_rd_3

 1221  8B F0				 mov   si, ax

 1223  80 3E 1D33 R 90			 cmp   byte ptr [PhysicalDriveNumber], 90h ; fd image file sign
 1228  73 2A				 jnb   short image_file_rd 		

 122A  32 ED				 xor   ch, ch
 122C  B1 04				 mov   cl, 4 ; Retry count
 122E				dsk_rd_1:
 122E  51			         push  cx
 122F  BA 0012			         mov   dx, 18                  ; Sectors per track
 1232  F6 F2			         div   dl                      
 1234  8A CC			         mov   cl, ah                  ; Sector (zero based)
 1236  FE C1			         inc   cl                      ; To make it 1 based
 1238  D0 E8			         shr   al, 1		       ; Convert Track to Cylinder
 123A  80 D6 00			         adc   dh, 0                   ; Heads (0 or 1)

 123D  8A 16 1D33 R		         mov   dl, byte ptr [PhysicalDriveNumber] 
 1241  8A E8			         mov   ch, al

 1243  B4 02				 mov   ah, 2 		       ; 2=read 	
 1245  B0 01				 mov   al, 01h
 1247  CD 13			         int   13h                     ; BIOS Service func ( ah ) = 2
				                                       ; Read disk sectors
								       ; BIOS Service func ( ah ) = 3
				                                       ; Write disk sectors
				                                       ;AL-sec num CH-cyl CL-sec
				             	                       ; DH-head DL-drive ES:BX-buffer
				             	                       ;CF-flag AH-stat AL-sec read
 1249  59			         pop   cx
 124A  73 03			         jnc   short dsk_rd_2
 124C  E2 E0			         loop  dsk_rd_1
 124E  C3				 retn ; 06/03/2013
 124F				dsk_rd_2:
 124F  89 36 2213 R			 mov word ptr [buff_s], si 
 1253				dsk_rd_3:
 1253  C3			         retn

 1254				dsk_rd 	endp

 1254				image_file_rd proc near
					; 14/07/2015
					; 07/07/2015
					; reading a block (sector) from floppy disk image file
					; INPUTS:
					; 	ax = si = sector/block number
				        ;	bx = offset WriteBuffer = buffer address
					;       [img_file_handle] = file handle
					;	number of bytes to be written = 512
					;
 1254  BA 0200				mov	dx, 512
 1257  F7 E2				mul	dx
					;push	bx
 1259  8B CA				mov	cx, dx
 125B  8B D0				mov	dx, ax
 125D  2A C0				sub	al, al ; specified offset is from the beginning of the file
 125F  B4 42				mov	ah, 42h ; seek (move file pointer)	
 1261  8B 1E 21C4 R			mov 	bx, word ptr [img_file_handle]
 1265  CD 21				int	21h
					;pop	bx
 1267  72 16				jc	short image_file_rd_err
					;mov	dx, bx
 1269  8B 1E 21C4 R			mov	bx, word ptr [img_file_handle]
 126D  B9 0200				mov	cx, 512
 1270  BA 3090 R			mov	dx, offset WriteBuffer
 1273  B4 3F				mov	ah, 3Fh ; read from file	
 1275  CD 21				int	21h
 1277  72 06				jc	short image_file_rd_err
 1279  8B DA				mov	bx, dx
					;xor	dx, dx
					;cmp	ax, cx ; ax = actually written bytes
					;jb	short image_file_rd_err
 127B  89 36 2213 R			mov 	word ptr [buff_s], si ; current buffer sector
 127F				image_file_rd_err:
 127F  C3				retn
 1280				image_file_rd endp

 1280				m_get 	proc near
					; 05/03/2013
					; 03/03/2013
					; 01/03/2013
					; 18/11/2012
					; 14/11/2012 unix boot file configuration version
					; of "mget" procedure
					; 31/10/2012
					; 20/10/2012
					; 19/8/2012
					; 13/8/2012
					; 27/7/2012
				     	; 21/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; return -> AX=R1
					; RETRO UNIX v1 FS
					; initialization/format version
					; cf -> 1 = error (no free block)

					;push bx
					;push cx
					;push dx
					;; contents of bx, cx, dx will be destroyed 
 1280				mget_0:
 1280  8A 1E 2202 R			mov bl, byte ptr [u_off]+1
 1284  32 FF			        xor bh, bh
					; BX = R2
 1286  F7 06 21D6 R 1000	        test word ptr [inode_flgs], 4096 ; 1000h
							  	     ; is this a large or small file
 128C  75 55				jnz short mget_5 ; 4f ; large file

 128E  F6 C3 F0			        test bl, 0F0h ; !0Fh  ; error if BX (R2) >= 16                    
 1291  75 1B				jnz short mget_2

 1293  80 E3 0E				and bl, 0Eh  ; clear all bits but bits 1,2,3
 1296  8B 87 21DC R			mov ax, word ptr inode_dskp[BX] ; AX = R1, physical block number
 129A  0B C0				or ax, ax
 129C  75 0F				jnz short mget_1 ; if physical block number is zero
							 ; then need a new block for file
 129E  E8 0080				call sb_alloc	 ; allocate a new block for this file	
							 ; AX (R1) = Block number
 12A1  72 3F				jc short mget_8  ; ; cf -> 1 & ax = 0 -> no free block

 12A3  89 87 21DC R			mov word ptr inode_dskp[BX], ax

 12A7  E8 00C4				call set_imod
					
 12AA  E8 00FC				call b_clear
					
 12AD				mget_1: ; 2
					; AX (R1) = Physical block number

					;pop dx
					;pop cx
					;pop bx

 12AD  C3				retn 

 12AE				mget_2: ; 3
					; adding on block which changes small file to large file
 12AE  E8 0070				call sb_alloc 
					;call wslot  ; setup I/O buffer for write
					;	   ; R5 points to the first data word in buffer

					; push ds
					; pop es

 12B1  A3 2213 R			mov word ptr [buff_s], ax  ; Block/Sector number

					;push si
					;push di
 12B4  50				push ax

 12B5  B9 0008				mov cx, 8  ; R3, transfer old physical block pointers
						   ; into new indirect block area for the new
						   ; large file		
 12B8  BF 3090 R			mov di, offset WriteBuffer ; BX = R5
 12BB  BE 21DC R			mov si, offset inode_dskp 

 12BE  33 C0				xor ax, ax ; mov ax, 0
 12C0				mget_3: ; 1
 12C0  A5				movsw
 12C1  89 44 FE				mov word ptr [SI]-2, ax
 12C4  E2 FA				loop mget_3
					
 12C6  B1 F8				mov cl, 256-8 ; clear rest of data buffer

 12C8				mget_4:	; 1
 12C8  F3/ AB				rep stosw

 12CA  58				pop ax
					;pop di
					;pop si

					;mov byte ptr [buff_m], 1 ; modified
 12CB  E8 024E				call dsk_wr	
 12CE  72 DD				jc short mget_1

 12D0  A1 2213 R			mov ax, word ptr [buff_s]

 12D3  A3 21DC R			mov word ptr [inode_dskp], ax
 12D6  81 0E 21D6 R 1000		or word ptr [inode_flgs], 4096 ; 1000h
					
 12DC  E8 008F				call set_imod

 12DF  EB 9F				jmp short mget_0

 12E1				mget_9:
 12E1  58				pop ax
 12E2				mget_8: 
					;mov ax, err_NOFREEBLOCK

					;pop dx
					;pop cx
					;pop bx

 12E2  C3				retn

 12E3				mget_5:  ; 4 ; large file
					; 05/03/2013
					;mov ax, bx   ; bx <= 255 for this file (UNIX v1, RUFS) system
					;mov cx, 256 ; 01/03/2013 no need a division here
					;xor dx, dx  ; 01/03/2013 no need a division here
					;div cx	     ; 01/03/2013 no need a division here
					;and bx, 1FEh  ; zero all bit but 1,2,3,4,5,6,7,8
						      ;	gives offset in indirect block
					;push bx			 ; R2	
					;mov bx, ax  ; calculate offset in i-node for pointer
						    ; to proper indirect block
					;and bx, 0Eh
					;mov ax, word ptr inode_dskp[BX] ; R1

 12E3  80 E3 FE				and bl, 0FEh ; ah = 0 ; 01/03/2013
 12E6  53				push bx	     ; i-node pointer offset in indirect block	
					; 01/03/2013 Max. possible AX (offset) value is 127 (65535/512)
					; 	     for this file system (offset 128 to 255 not in use)

					; There is always 1 indirect block for this file system
 12E7  A1 21DC R			mov ax, word ptr [inode_dskp] ; inode_dskp[0]

 12EA  0B C0				or ax, ax ; R1
 12EC  75 0E				jnz short mget_6 ; 2f
					
 12EE  E8 0030				call sb_alloc
 12F1  72 EE				jc short mget_9 ; 01/03/2013

					;mov word ptr inode_dskp[BX], ax  ; R1, block number
 12F3  A3 21DC R			mov word ptr [inode_dskp], ax  ; 03/03/2013

 12F6  E8 0075				call set_imod

 12F9  E8 00AD				call b_clear		

 12FC				mget_6: ;2
					; 05/03/2013
					; ax = R1, block number
 12FC  E8 FF19				call dsk_rd ; read indirect block
 12FF  5A				pop dx  ; R2, get offset
 1300  72 1E				jc short mget_7
					; BX = offset WriteBuffer
 1302  03 DA				add bx, dx ; R5, first word of indirect block
 1304  8B 07				mov ax, word ptr [BX] ; put physical block no of block
							      ; in file sought in R1 (AX)
 1306  0B C0				or ax, ax
 1308  75 16			        jnz short mget_7 ; 2f 

 130A  E8 0014				call sb_alloc
 130D  72 D3				jc short mget_8 ; 01/03/2013

 130F  89 07				mov word ptr [BX], ax ; R1
					
 1311  50				push ax
 1312  A1 2213 R			mov ax, word ptr [buff_s]

					;mov byte ptr [buff_m], 1 ; modified

					;call wslot
 1315  E8 0204				call dsk_wr
 1318  5A				pop dx ; 18/11/2012
 1319  72 05				jc short mget_7 

 131B  8B C2				mov ax, dx ; 18/11/2012
					; ax = R1, block number of new block

 131D  E8 0089				call b_clear	

 1320				mget_7: ; 2
					; ax = R1, block number of new block
					;pop dx
					;pop cx
					;pop bx 
					
 1320  C3				retn

 1321				m_get endp


 1321				sb_alloc proc near
					; 14/11/2012 unix boot file configuration version
					; of "alloc" procedure
					; 21/8/2012
					; 18/8/2012
					; 17/8/2012
					; 5/8/2012		
				 	; 21/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; input -> AX=R1 
					;; output -> AX=R1
					; RETRO UNIX v1 FS

					;push cx
 1321  53				push bx ; R2
					;push dx ; R3

 1322  BB 2C90 R			mov bx, offset systm ; SuperBlock 
						; start of inode and free storage map for disk
 1325				alloc_1: ; 1
 1325  8B 07				mov ax, word ptr [BX] ; first word contains # of bytes 
					                ; in free storage map
 1327  D1 E0				shl ax, 1	; multiply AX (R1) by 8 gives # of blocks
 1329  D1 E0				shl ax, 1
 132B  D1 E0				shl ax, 1
 132D  8B C8				mov cx, ax ; R1, bit count of free storage map
 132F  33 C0				xor ax, ax ; 0
 1331				alloc_2: ; 1
 1331  43				inc bx ; 18/8/2012
 1332  43				inc bx ; 
 1333  8B 17				mov dx, word ptr [BX]  ; mov (R2)+, R3
 1335  0B D2				or dx, dx
 1337  75 0C				jnz short alloc_3 ; 1f
							; branch if any free blocks in this word	
 1339  83 C0 10				add ax, 16
 133C  3B C1				cmp ax, cx    
 133E  72 F1				jb short alloc_2 ; 1b

					;jmp short panic  ; no free storage 

 1340  33 C0				xor ax, ax
 1342  F9				stc		 ; cf=1 --> error: no free block

 1343  EB 27				jmp short alloc_7	

 1345				alloc_3: ; 1
 1345  D1 EA			        shr dx, 1  ; R3  ; Branch when free block found,
							 ; bit for block k is in byte k/8 
							 ; in bit k (mod 8) 	
 1347  72 03				jc short alloc_4 ; 1f
 1349  40				inc ax  ; R1     ; increment bit count in bit k (mod 8)    
 134A  EB F9				jmp short alloc_3 ; 1b
					
 134C				alloc_4:
					;call free_3
 134C				sb_alloc_free_3:	
 134C  BA 0001				mov dx, 1	
 134F  8B C8				mov cx, ax
 1351  83 E1 0F				and cx, 0Fh
 1354  74 02				jz short @f
 1356  D3 E2				shl dx, cl
 1358				@@:
 1358  8B D8				mov bx, ax
 135A  D1 EB				shr bx, 1
 135C  D1 EB				shr bx, 1
 135E  D1 EB				shr bx, 1
 1360  D1 EB				shr bx, 1
 1362				free_4: ; 1
 1362  D1 E3				shl bx, 1 ; 21/8/2012
				        ; BX (R2) = k/8	
 1364  81 C3 2C92 R			add bx, offset systm+2 ; SuperBlock+2

 1368				alloc_5: ; 1 
					; 21/8/2012
 1368  F7 D2				not dx ; masking bit is '0' and others are '1'
 136A  21 17				and word ptr [BX], dx    ; bic r3, (r2) 	
					; 0 -> allocated	retn
 136C				alloc_6:
	; inc byte ptr [smod] ; super block modified sign
					;mov byte ptr [smod], 1
 136C				alloc_7:
					;pop dx ; R3
 136C  5B				pop bx ; R2
					;pop cx 
					; AX (R1) = Block number
 136D  C3				retn

 136E				sb_alloc endp


 136E				set_imod proc near
					; 23/02/2013 (fromdos) file m. date&time modification
					; 14/11/2012 unix boot file configuration version
					; of "setimod" procedure
					; 13/8/2012
					; 21/7/2012
					; 14/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; AX=R0, BX=R1, CX=R3, DX=R5 
					; [SP] = Argument 1, 0 = read, 1 = write
					; RETRO UNIX v1 FS
					; initialization/format version
					;

					;push dx
 136E  50				push ax
 136F  C6 06 21F7 R 01			mov byte ptr [imod], 1
					; 23/02/2013
 1374  A1 21EC R			mov ax, word ptr [inode_ctim]
 1377  8B 16 21EE R			mov dx, word ptr [inode_ctim]+2
 137B  23 C0				and ax, ax
 137D  75 17				jnz short setimod_3
 137F  23 D2				and dx, dx
 1381  75 13				jnz short setimod_3
 1383				setimod_1:
					; Erdogan Tan 14-7-2012
 1383  E8 01E9				call epoch
 1386  A3 21EC R			mov word ptr [inode_ctim], ax
 1389  89 16 21EE R			mov word ptr [inode_ctim]+2, dx
 138D				setimod_2:
 138D  A3 21F0 R			mov word ptr [inode_mtim], ax
 1390  89 16 21F2 R			mov word ptr [inode_mtim]+2, dx
 1394				setimod_4:
 1394  58				pop ax
				        ;pop dx
 1395  C3				retn
 1396				setimod_3:
				 	; 23/02/2013
 1396  33 C9				xor cx, cx
 1398  39 0E 21F0 R			cmp word ptr [inode_mtim], cx
 139C  76 EF				jna short setimod_2
 139E  39 0E 21F2 R			cmp word ptr [inode_mtim]+2, cx
 13A2  76 E9				jna short setimod_2
 13A4  E8 01C8				call epoch
 13A7  EB E4				jmp short setimod_2

 13A9				set_imod endp


 13A9				b_clear	proc near
					; 18/11/2012
					; 14/11/2012 unix boot file configuration version
					; of "clear" procedure
					; 5/8/2012
				 	; 21/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; input -> AX=R1 (block number)
					;; output -> AX=R1
					; RETRO UNIX v1 FS
					; initialization/format version

					;call wslot ; setup I/O buffer for write
					;	   ; R5 points to the first data word in buffer
					; BX = R5


 13A9  A3 2213 R			mov word ptr [buff_s], ax 
					
					;push ds
					;pop es
					
					;push di
					;push cx
 13AC  50				push ax
 13AD  33 C0			 	xor ax, ax
					; mov di, bx
 13AF  BF 3090 R			mov di, offset WriteBuffer
 13B2  B9 0100				mov cx, 256 
 13B5  F3/ AB				rep stosw
					
					;mov byte ptr [buff_m], 1 ; modified

 13B7  A1 2213 R			mov ax, word ptr [buff_s] ; 18/11/2012

 13BA  E8 015F				call dsk_wr

 13BD  58				pop ax
					;pop cx
					;pop di	
					
 13BE  C3				retn

 13BF				b_clear  endp


 13BF				mak_nod proc near
					; 15/04/2022 (bugfix)
					; 03/04/2022
					; 01/03/2013
					; 23/02/2013
					; 15/12/2012 UNIXCOPY.ASM version of maknod
					; 02/12/2012 (maknod_imap -> call imap)
					; 25/11/2012
					; 18/11/2012
					; 11/11/2012
					; unixboot.asm (boot file configuration)
					; version of 'maknod'
					;
					; 30/10/2012
					; AX = R1, mode
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					; RETRO UNIX v1 FS
					;
					; maknod : create an i-node and make a directory entry
					;
					; 8086 CPU & IBM PC architecture modifications by Erdogan Tan 
					;
					; return => if cf=1 error code in AH
					; If cf=0 -> AX = I-Number (also in u.dirbuff)

 13BF  80 CC 80				or 	ah, 80h  ; 10000000b, allocate flag set
 13C2  50				push 	ax 	 ; put mode on stack
					;mov	ax, word ptr [ii] ; move current i-number to AX/r1
					;push 	ax
 13C3  FF 36 2211 R			push 	word ptr [ii]

					;mov	ax, 41	 ; r1 = 41
					; 03/04/2022
					;mov	bx, [systm] ; fbm byte count
					; 15/04/2022 ('word ptr' bugfix)
 13C7  8B 1E 2C90 R			mov	bx, word ptr [systm] ; fbm byte count
 13CB  81 C3 2C92 R			add	bx, systm+2
					;mov	ax, [bx] ; inode map byte count
 13CF  8B 07				mov	ax, word ptr [bx] ; inode map byte count
 13D1  D1 E0				shl	ax, 1
 13D3  D1 E0				shl	ax, 1
 13D5  D1 E0				shl	ax, 1	
 13D7  A3 21B4 R			mov	word ptr [i_count], ax ; inode count
 13DA  B8 002A				mov	ax, 42
 13DD				maknod_1: ; 1 		 ; scan for a free i-node
					;inc	ax 	 ; r1 = r1 + 1
					; 2/12/2012
 13DD  E8 0505				call	imap     ; get byte address and bit position in inode map in 
							 ; r2 (DX) & mq (BX)
				            ; DX (MQ) has a 1 in the calculated bit position
				            ; BX (R2) has byte address of the byte with allocation bit

 13E0  84 17			        test    byte ptr [BX], dl ; bitb mq,(r2) / is the i-node active
					;jnz	short maknod_1    ; bne	1b / yes, try the next one
					; 03/04/2022
 13E2  74 08				jz	short @f
 13E4  40				inc	ax ; next inode
					; check ax against inode count
 13E5  39 06 21B4 R			cmp	word ptr [i_count], ax
 13E9  73 F2				jnb	short maknod_1
					; cf = 1
 13EB  C3				retn
 13EC				@@:
 13EC  08 17			        or      byte ptr [BX], dl ; bisb mq,(r2)
								  ; no, make it active (put a 1 in the bit map)
					; ax = i-number
 13EE  E8 FDB2				call	i_get      	  ; jsr	r0,iget / get i-node into core
 13F1  72 5F				jc	short maknod_3	
					
 13F3  F7 06 21D6 R 8000		test	word ptr [inode_flgs], 8000h  ; is i-node already allocated
 13F9  75 E2				jnz	short maknod_1    ; 1b / yes, look for another one
					
 13FB  A3 2207 R			mov	word ptr [u_dirbuf], ax ; mov r1, u.dirbuf 
								        ; no, put i-number in u.dirbuf

 13FE  58				pop 	ax ; 15/12/2012	   ; get currrent i-number back	
 13FF  E8 FDA1				call 	i_get		   ; jsr r0,iget / get i-node in core
 1402  72 4F				jc	short maknod_2

 1404  E8 004E				call 	mk_dir 		   ; jsr r0,mkdir 
								   ; make a directory entry in current directory
 1407  72 4A				jc	short maknod_2 ; 01/03/2013   

 1409  A1 2207 R			mov	ax, word ptr [u_dirbuf] ; mov u.dirbuf,r1 
								   ;  ax / r1 = new inode number
 140C  E8 FD94				call	i_get
 140F  72 42				jc	short maknod_2

				        ; jsr r0,copyz; inode; inode+32. / 0 it out 
 1411  B9 0010				mov	cx, 16
 1414  33 C0				xor	ax, ax ; 0
 1416  BF 21D6 R			mov	di, offset inode 
 1419  F3/ AB				rep	stosw

 141B  8F 06 21D6 R			pop	word ptr [inode_flgs] ; mov (sp)+,i.flgs / fill flags
 141F  8A 0E 21F8 R			mov 	cl, byte ptr [u_uid] ; movb u.uid,i.uid / user id
 1423  88 0E 21D9 R			mov 	byte ptr [inode_uid], cl ; 23/02/2013 al -> cl
 1427  C6 06 21D8 R 01			mov     byte ptr [inode_nlks], 1 ; movb $1,i.nlks / 1 link
					
					;call	epoch

					;mov 	word ptr [s_time], ax
					;mov 	word ptr [s_time]+2, dx	

					;mov 	word ptr [inode_ctim], ax ; mov s.time,i.ctim / time created
					;mov 	word ptr [inode_ctim]+2, dx ; mov s.time+2,i.ctim+2

					; 25/11/2012
					; 23/02/2013
 142C				fromdos_maknod:
					;xor	ax, ax
 142C  33 D2				xor 	dx, dx	
 142E  A3 21F0 R			mov 	word ptr [inode_mtim], ax  ; 0
 1431  89 16 21F2 R			mov 	word ptr [inode_mtim]+2, dx ; 0
 1435  F7 06 21D6 R 4000		test 	word ptr [inode_flgs], 4000h  ; Directory
 143B  75 07				jnz 	short maknod_4
 143D  A1 21D0 R			mov 	ax, word ptr [uf_make_datetime]
 1440  8B 16 21D2 R			mov	dx, word ptr [uf_make_datetime]+2
 1444				maknod_4:
 1444  A3 21EC R			mov 	word ptr [inode_ctim], ax  
 1447  89 16 21EE R			mov 	word ptr [inode_ctim]+2, dx

 144B  E8 FF20				call	set_imod

 144E  A1 2207 R			mov 	ax, word ptr [u_dirbuf]
 1451  C3				retn

 1452				maknod_3:
					; 15/12/2012
 1452  58				pop 	ax
 1453				maknod_2:
 1453  58				pop	ax
 1454  C3				retn

 1455				mak_nod	endp


 1455				mk_dir proc near
					; 11/11/2012
					; unixboot.asm (boot file configuration)
					; version of 'mkdir'
					;
					; 31/10/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					; RETRO UNIX v1 FS
					;
					; mkdir : make a directory entry
					;
					; 8086 CPU & IBM PC architecture modifications by Erdogan Tan 
					;
					; return => if cf=1 error number in [Error], ax = mode
					; If cf=0 -> AX = I-Number (also in u.dirbuff)
					;
					; input:
					; u.namep = file name
					; ii = current directory's i-number
					; u.dirbuf = directory entry (source) location
					; output:
					; u.dirbuf+2 to u.dirbuf+10 = file name
					; u.off = directory entry offset in current directory
					; u.base = start of u.dirbuf
					; ;;;r1 (AX) = i-number of current directory

 1455				mkdir_0:
					; jsr r0,copyz; u.dirbuf+2; u.dirbuf+10. / clear this
 1455  B9 0004				mov 	cx, 4
 1458  33 C0				xor 	ax, ax
 145A  BF 2209 R			mov 	di, offset u_dirbuf+2
 145D  F3/ AB				rep 	stosw	
				         
 145F  8B 36 21FB R		        mov	si, word ptr [u_namep] ; mov u.namep,r2 
								     ; r2 points to name of directory entry

 1463  BF 2209 R			mov	di, offset u_dirbuf+2 ; mov $u.dirbuf+2,r3
								      ; r3 points to u.dirbuf+2
 1466				mkdir_1: ;1 / put characters in the directory name in u.dirbuf+2 - u.dirbuf+10
 1466  AC				lodsb 			; movb (r2)+,r1 / move character in name to r1
 1467  22 C0				and 	al, al
 1469  74 0D				jz 	short mkdir_2 	      ; beq 1f / if null, done
 146B  3C 2F				cmp 	al, '/'  	      ; cmp r1,$'/ / is it a "/"?
 146D  74 22				je	short mkdir_stc       ; beq	error9 / yes, error
 146F  81 FF 2211 R			cmp	di, offset u_dirbuf+10 ; cmp r3,$u.dirbuf+10. 
								       ; have we reached the last slot for
								       ; a char?
 1473  74 F1				je	short mkdir_1          ; beq 1b / yes, go back
					
 1475  AA				stosb			       ; movb r1,(r3)+ 
								       ; no, put the char in the u.dirbuf
 1476  EB EE				jmp 	short mkdir_1          ; br 1b / get next char

 1478				mkdir_2: ;1
 1478  A1 21FD R			mov 	ax, word ptr [u_dirp] ; mov u.dirp,u.off
 147B  A3 2201 R			mov 	word ptr [u_off], ax  ; pointer to empty current directory
								      ; slot to u.off
 147E				wdir:
 147E  C7 06 21FF R 2207 R		mov	word ptr [u_base], offset u_dirbuf
					                              ; mov$u.dirbuf,u.base
								      ; u.base points to created file name
 1484  C7 06 2203 R 000A		mov	word ptr [u_count], 10 ; mov $10.,u.count
				 				       ; u.count = 10
 148A  A1 2211 R			mov	ax, word ptr [ii]    ; mov ii,r1 
								     ; r1 has i-number of current directory

 148D  E8 0005				call	write_i		     ; jsr r0,writei / write into directory
 1490				@@:	
 1490  C3				retn			     ; rts r0

 1491				mkdir_stc:
					; invalid file name, al="/", ah=0
 1491  B4 01				mov	ah, 1
 1493  F9				stc
 1494  C3				retn

 1495				mk_dir 	endp


 1495				write_i proc near
					; 18/11/2012
					; 11/11/2012
					; unixboot.asm (boot file configuration)
					; version of 'writei'
					;
					; 31/10/2012
					; 18/08/2012
					; 17/07/2012
					; BX = R1, i-number
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;
					; RETRO UNIX v1 FS
					; initialization/format version
					;
					; writei: write file
					;
					; 8086 CPU & IBM PC architecture modifications by Erdogan Tan 
					;; return => if cf=1 error number in [Error]

					; input:
					; AX = R1 = I-Number
					; u.count = byte count
					; u.base = user buffer (offset)
					; u.off (u.fofp) = (pointer to) current file offset
				 
 1495  33 D2				xor dx, dx ; 0		   ; clr u.nread	
 1497  89 16 2205 R			mov word ptr [u_nread], dx ; clear the number of bytes transmitted during
								   ; read or write calls 
								   ; tst u.count		
 149B  39 16 2203 R			cmp word ptr [u_count], dx ; test the byte count specified by the user
					;ja short write_1 ; 1f	   ; bgt 1f / any bytes to output; yes, branch
					;retn			   ; rts 0 / no, return - no writing to do
 149F  76 7A				jna short write_inode_retn

 14A1				write_1:
					;push ax	; save i-number on stack

 14A1  E8 FCFF				call i_get 	; jsr r0,iget
						  	; write i-node out (if modified), read i-node 'r1'
						        ; into i-node area of core
 14A4  8B 16 2201 R			mov dx, word ptr [u_off] 
 14A8  03 16 2203 R			add dx, word ptr [u_count]
							; add u.count,r2 
							; no. of bytes to be written + file offset is
						        ; put in r2

 14AC  3B 16 21DA R			cmp dx, word ptr [inode_size] ; cmp r2,i.size
						         ; is this greater than the present size of
						         ; the file?
 14B0  76 07				jna short dskw_1 ; blos	 1f / no, branch

 14B2  89 16 21DA R			mov word ptr [inode_size], dx ; mov r2,i.size 
							 ; yes, increase the file size to file offset +
						         ; no. of data bytes
 14B6  E8 FEB5				call set_imod    ; jsr r0,setimod 
							 ; set imod=1 (i.e., core inode has been
						         ; modified), stuff time of modification into
						         ; core image of i-node
 14B9				dskw_1: ; 1 		
 14B9  E8 FDC4				call m_get 	; jsr r0,mget 
							; get the block no. in which to write the next data
				  		        ; byte
							; AX = R1 = Block Number

 14BC  8B 1E 2201 R			mov bx, word ptr [u_off]
 14C0  81 E3 01FF			and bx, 1FFh  		 ; bit	*u.fofp,$777
								 ; test the lower 9 bits of the file offset
 14C4  75 0D				jnz short dskw_2 ; bne 2f 
							; if its non-zero, branch; if zero, file offset = 0,
						   	; 512, 1024,...(i.e., start of new block)
 14C6  81 3E 2203 R 0200		cmp word ptr [u_count], 512 ; cmp u.count,$512.
							        ; if zero, is there enough data to fill an
						              	; entire block? (i.e., no. of
					;jnb short dskw_3 ; bhis 3f / bytes to be written greater than 512.? 
							; Yes, branch. / Don't have to read block
				; 18/11/2012
 14CC  72 05				jb short dskw_2

 14CE  A3 2213 R			mov word ptr [buff_s], ax 

 14D1  EB 08				jmp short short dskw_3	

 14D3				dskw_2: ; 2
					; in as no past info. is to be saved (the entire block will be
				        ; overwritten).
							; AX=R1 (block number)
 14D3  E8 FD42				call dsk_rd 	; jsr r0,dskrd 
							; no, must retain old info.. Hence, read block 'r1'
						        ; into an I/O buffer
				; 11/11/2012
 14D6  72 43				jc short dskw_5
 14D8  A1 2213 R			mov ax,word ptr [buff_s]

 14DB				dskw_3: ; 3
					;call wslot

 14DB				writeinode_sioreg:
					; call sioreg

 14DB  8B 3E 2201 R		        mov di, word ptr [u_off] ; R2
 14DF  8B CF				mov cx, di ; cx = R3, di = R2
 14E1  81 C9 FE00			or cx, 0FE00h ; set bits 9...15 of file offset in R3
 14E5  81 E7 01FF			and di, 1FFh ; calculate file offset mod 512
 14E9  81 C7 3090 R			add di, offset WriteBuffer ; di now points to 1st byte in buffer
						   ; where data is to be placed
 14ED  8B 36 21FF R		        mov si, word ptr [u_base] ; R1
 14F1  F7 D9				neg cx ; 512 - file offset(mod512) in R3 (cx)
 14F3  3B 0E 2203 R		        cmp cx, word ptr [u_count]
 14F7  76 04				jna short @f ; 2f

 14F9  8B 0E 2203 R		        mov cx, word ptr [u_count]
 14FD				@@:
 14FD  01 0E 2205 R			add word ptr [u_nread], cx ; r3 + number of bytes
							; xmitted during write is put into
				                        ; u_nread
 1501  29 0E 2203 R		        sub word ptr [u_count], cx
 1505  01 0E 21FF R		        add word ptr [u_base], cx ; points to 1st of remaining
							; data bytes
 1509  01 0E 2201 R		        add word ptr [u_off], cx ; new file offset = number 
							; of bytes done + old file offset
				; end of writeinode_sioreg

					; SI = user data offset (r1)
					; DI = sector (I/O) buffer offset (r2)
					; CX = byte count (r3)

 150D				dskw_4: ; 2
 150D  F3/ A4				rep movsb

					; ax = block/sector number

 150F  E8 000A				call dsk_wr ; jsr r0,dskwr / write the block and the i-node
 1512  72 07			        jc short dskw_5

 1514  83 3E 2203 R 00		        cmp word ptr [u_count], 0 ; any more data to write?
 1519  77 9E				ja short dskw_1 ; 1b   ; yes, branch

 151B				dskw_5:
					;pop ax ; i-number

 151B				write_inode_retn:
 151B  C3				retn

 151C				write_i	endp


 151C				dsk_wr	proc near
					; 07/07/2015 (floppy disk image file handling)
					; 11/11/2012
					; unix boot file configuration version of "dskwr" procedure
					;
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					; RETRO UNIX v1 FS
					;; return => if cf=1 error number in [Error]

					 ; ax = sector/block number

 151C  80 3E 1D33 R 90		 	 cmp   byte ptr [PhysicalDriveNumber], 90h ; fd image file sign
 1521  73 28				 jnb   short image_file_wr ; 07/07/2015 

 1523  BB 3090 R			 mov   bx, offset WriteBuffer

 1526  32 ED				 xor   ch, ch
 1528  B1 04				 mov   cl, 4 ; Retry count
 152A				dsk_wr_1:
 152A  51			         push  cx
 152B  BA 0012			         mov   dx, 18                  ; Sectors per track
 152E  F6 F2			         div   dl                      
 1530  8A CC			         mov   cl, ah                  ; Sector (zero based)
 1532  FE C1			         inc   cl                      ; To make it 1 based
 1534  D0 E8			         shr   al, 1		       ; Convert Track to Cylinder
 1536  80 D6 00			         adc   dh, 0                   ; Heads (0 or 1)

 1539  8A 16 1D33 R		         mov   dl, byte ptr [PhysicalDriveNumber] 
 153D  8A E8			         mov   ch, al

 153F  B4 03				 mov   ah, 3 		       ; 3=write 	
 1541  B0 01				 mov   al, 01h
 1543  CD 13			         int   13h                     ; BIOS Service func ( ah ) = 2
				                                       ; Read disk sectors
								       ; BIOS Service func ( ah ) = 3
				                                       ; Write disk sectors
				                                       ;AL-sec num CH-cyl CL-sec
				             	                       ; DH-head DL-drive ES:BX-buffer
				             	                       ;CF-flag AH-stat AL-sec read
 1545  59			         pop   cx
 1546  73 02			         jnc   short dsk_wr_2
 1548  E2 E0			         loop  dsk_wr_1
 154A				dsk_wr_2:
 154A  C3			         retn

 154B				dsk_wr 	 endp

 154B				image_file_wr proc near
					; 14/07/2015
					; 07/07/2015
					; writing a block (sector) to floppy disk image file
					; INPUTS:
					; 	ax = sector/block number
				        ;	offset WriteBuffer = buffer address
					;       [img_file_handle] = file handle
					;	number of bytes to be written = 512
					;
 154B  BA 0200				mov	dx, 512
 154E  F7 E2				mul	dx
 1550  8B CA				mov	cx, dx
 1552  8B D0				mov	dx, ax
 1554  2A C0				sub	al, al ; specified offset is from the beginning of the file
 1556  B4 42				mov	ah, 42h ; seek (move file pointer)	
 1558  8B 1E 21C4 R			mov 	bx, word ptr [img_file_handle]
 155C  CD 21				int	21h
					;mov	bx, word ptr [img_file_handle]
 155E  B9 0200				mov	cx, 512
 1561  BA 3090 R			mov	dx, offset WriteBuffer
 1564  B4 40				mov	ah, 40h ; write to file	
 1566  CD 21				int	21h
 1568  72 04				jc	short image_file_wr_err
 156A  8B DA				mov	bx, dx
					;xor	dx, dx
 156C  3B C1				cmp	ax, cx ; ax = actually written bytes
 156E				image_file_wr_err:
 156E  C3				retn
 156F				image_file_wr endp 	

 156F				epoch proc near
					; 14/11/2012
					; unixboot.asm (boot file configuration)
					; version of "epoch" procedure in "unixproc.asm"
					; 21/7/2012
					; 15/7/2012
					; 14/7/2012		
					; Erdogan Tan - RETRO UNIX v0.1
					; compute current date and time as UNIX Epoch/Time
					; UNIX Epoch: seconds since 1/1/1970 00:00:00

					; 21/7/2012
					;push bx
					;push cx

 156F  B4 02				mov ah, 02h                      ; Return Current Time
 1571  CD 1A			        int 1Ah
 1573  86 E9			        xchg ch,cl
 1575  89 0E 221B R		        mov word ptr [hour], cx
 1579  86 F2			        xchg dh,dl
 157B  89 16 221F R		        mov word ptr [second], dx

 157F  B4 04			        mov ah, 04h                      ; Return Current Date
 1581  CD 1A			        int 1Ah
 1583  86 E9			        xchg ch,cl
 1585  89 0E 2215 R		        mov word ptr [year], cx
 1589  86 F2			        xchg dh,dl
 158B  89 16 2217 R		        mov word ptr [month], dx

 158F  B9 3030				mov cx, 3030h

					
 1592  A0 221B R			mov al, byte ptr [hour] ; Hour
				           ; AL <= BCD number)
 1595  D4 10			        db 0D4h,10h                     ; Undocumented inst. AAM
									; AH = AL / 10h
									; AL = AL MOD 10h
 1597  D5 0A			        aad ; AX= AH*10+AL
						
 1599  A2 221B R			mov byte ptr [hour], al

 159C  A0 221C R			mov al, byte ptr [hour]+1 ; Minute
				           ; AL <= BCD number)
 159F  D4 10			        db 0D4h,10h                     ; Undocumented inst. AAM
									; AH = AL / 10h
									; AL = AL MOD 10h
 15A1  D5 0A			        aad ; AX= AH*10+AL
						
 15A3  A2 221D R			mov byte ptr [minute], al

 15A6  A0 221F R			mov al, byte ptr [second] ; Second
				           ; AL <= BCD number)
 15A9  D4 10			        db 0D4h,10h                     ; Undocumented inst. AAM
									; AH = AL / 10h
									; AL = AL MOD 10h
 15AB  D5 0A			        aad ; AX= AH*10+AL
						
 15AD  A2 221F R			mov byte ptr [second], al

					
 15B0  A1 2215 R			mov ax, word ptr [year] ; Year (century)
 15B3  50			        push ax
					   ; AL <= BCD number)
 15B4  D4 10			        db 0D4h,10h                     ; Undocumented inst. AAM
									; AH = AL / 10h
									; AL = AL MOD 10h
 15B6  D5 0A			        aad ; AX= AH*10+AL
						
 15B8  B4 64				mov ah, 100
 15BA  F6 E4				mul ah
 15BC  A3 2215 R			mov word ptr [year], ax

 15BF  58				pop	ax
 15C0  8A C4				mov	al, ah
				           ; AL <= BCD number)
 15C2  D4 10			        db 0D4h,10h                     ; Undocumented inst. AAM
									; AH = AL / 10h
									; AL = AL MOD 10h
 15C4  D5 0A			        aad ; AX= AH*10+AL
						
 15C6  01 06 2215 R			add word ptr [year], ax


 15CA  A0 2217 R			mov al, byte ptr [month] ; Month
				           ; AL <= BCD number)
 15CD  D4 10			        db 0D4h,10h                     ; Undocumented inst. AAM
									; AH = AL / 10h
									; AL = AL MOD 10h
 15CF  D5 0A			        aad ; AX= AH*10+AL
					
 15D1  A2 2217 R			mov byte ptr [month], al	


 15D4  A0 2218 R			mov al, byte ptr [month]+1 ; Day
				           ; AL <= BCD number)
 15D7  D4 10			        db 0D4h,10h                     ; Undocumented inst. AAM
									; AH = AL / 10h
									; AL = AL MOD 10h
 15D9  D5 0A			        aad ; AX= AH*10+AL

 15DB  A2 2219 R			mov byte ptr [Day], al
					
 15DE				convert_to_epoch:
					; Derived from DALLAS Semiconductor
					; Application Note 31 (DS1602/DS1603)
					; 6 May 1998

 15DE  8B 16 2215 R			mov dx, word ptr [year]
 15E2  81 EA 07B2			sub dx, 1970
 15E6  B8 016D				mov ax, 365
 15E9  F7 E2				mul dx
 15EB  32 FF				xor bh, bh
 15ED  8A 1E 2217 R			mov bl, byte ptr [month]
 15F1  FE CB				dec bl
 15F3  D0 E3				shl bl, 1
 15F5  8B 8F 2221 R			mov cx, word ptr DMonth[BX]
 15F9  8A 1E 2219 R			mov bl, byte ptr [Day]
 15FD  FE CB				dec bl
					
 15FF  03 C1				add ax, cx
 1601  83 D2 00				adc dx, 0
 1604  03 C3				add ax, bx
 1606  83 D2 00				adc dx, 0
								; DX:AX = days since 1/1/1970
 1609  8B 0E 2215 R			mov cx, word ptr [year]
 160D  81 E9 07B1			sub cx, 1969
 1611  D1 E9				shr cx, 1
 1613  D1 E9				shr cx, 1		
						; (year-1969)/4
 1615  03 C1				add ax, cx
 1617  83 D2 00				adc dx, 0
								; + leap days since 1/1/1970

 161A  80 3E 2217 R 02			cmp byte ptr [month], 2  ; if past february
 161F  76 0F				jna short @f
 1621  8B 0E 2215 R			mov cx, word ptr [year]
 1625  83 E1 03				and cx, 3 ; year mod 4
 1628  75 06				jnz short @f		
								; and if leap year
 162A  83 C0 01				add ax, 1 ; add this year's leap day (february 29)
 162D  83 D2 00				adc dx, 0
 1630				@@: 			; compute seconds since 1/1/1970
 1630  BB 0018				mov bx, 24
 1633  E8 00A4				call proc_mul32

 1636  8A 1E 221B R			mov bl, byte ptr [hour]
 163A  03 C3				add ax, bx
 163C  83 D2 00				adc dx, 0
					
 163F  BB 003C				mov bx, 60
 1642  E8 0095				call proc_mul32

 1645  8A 1E 221D R			mov bl, byte ptr [minute]
 1649  03 C3				add ax, bx
 164B  83 D2 00				adc dx, 0
					
 164E  BB 003C				mov bx, 60
 1651  E8 0086				call proc_mul32

 1654  8A 1E 221F R			mov bl, byte ptr [second]
 1658  03 C3				add ax, bx
 165A  83 D2 00			 	adc dx, 0

					; DX:AX -> seconds since 1/1/1970 00:00:00

					; 21/7/2012
					;pop cx
					;pop bx
					
 165D  C3				retn

 165E				epoch endp

 165E				convert_from_epoch proc near
					; 30/11/2012
					; Derived from DALLAS Semiconductor
					; Application Note 31 (DS1602/DS1603)
					; 6 May 1998
					;
					; INPUT:
					; DX:AX = Unix (Epoch) Time
 165E  B9 003C				mov cx, 60
 1661  E8 008A				call proc_div32
					;mov word ptr [imin], ax   ; whole minutes
					;mov word ptr [imin]+2, dx ; since 1/1/1970
 1664  89 1E 221F R			mov word ptr [second], bx  ; leftover seconds
					; mov cx, 60
 1668  E8 0083				call proc_div32
					;mov word ptr [ihrs], ax   ; whole hours
					;mov word ptr [ihrs]+2, dx ; since 1/1/1970
 166B  89 1E 221D R			mov word ptr [minute], bx  ; leftover minutes
					; mov cx, 24
 166F  B1 18				mov cl, 24
 1671  E8 007A				call proc_div32
					;mov word ptr [iday], ax  ; whole hours
								  ; since 1/1/1970
					; mov word ptr [iday]+2, dx ; DX = 0
 1674  89 1E 221B R			mov word ptr [hour], bx   ; leftover hours
 1678  05 02DB				add ax, 365+366		  ; whole day since
								  ; 1/1/1968 	
					; adc dx, 0	          ;  DX = 0
					; mov word ptr [iday], ax
 167B  50				push ax
 167C  B9 05B5				mov cx, (4*365)+1	  ; 4 years = 1461 days
 167F  E8 006C				call proc_div32
 1682  59				pop cx
					;mov word ptr [lday], ax  ; count of quadyrs (4 years)
 1683  53				push bx
					;mov word ptr [qday], bx  ;  days since quadyr began
 1684  83 FB 3C				cmp bx, 31 + 29           ; if past feb 29 then
 1687  F5				cmc			  ; add this quadyr's leap day
 1688  83 D0 00				adc ax, 0		  ; to # of qadyrs (leap days)
					;mov word ptr [lday], ax  ; since 1968			  
					;mov cx, word ptr [iday]
 168B  91				xchg cx, ax		  ; CX = lday, AX = iday		  
 168C  2B C1				sub ax, cx		  ; iday - lday
 168E  B9 016D				mov cx, 365
					;xor dx, dx		  ; DX  = 0
					; AX = iday-lday, DX = 0
 1691  E8 005A				call proc_div32
					;mov word ptr [iyrs], ax   ; whole years since 1968
					; jday = iday - (iyrs*365) - lday
					;mov word ptr [jday], bx  ; days since 1/1 of current year
 1694  05 07B0				add ax, 1968		  ; compute year
 1697  A3 2215 R			mov word ptr [year], ax
 169A  8B D0				mov dx, ax		
					;mov ax, word ptr [qday]
 169C  58				pop ax
 169D  3D 016D				cmp ax, 365		  ; if qday <= 365 and qday >= 60	
 16A0  77 07				ja short @f		  ; jday = jday +1
 16A2  83 F8 3C				cmp ax, 60	          ; if past 2/29 and leap year then
 16A5  F5			        cmc			  ; add a leap day to the # of whole
 16A6  83 D3 00				adc bx, 0		  ; days since 1/1 of current year
 16A9				@@:			
					;mov word ptr [jday], bx
 16A9  B9 000C				mov cx, 12		  ; estimate month
 16AC  87 CB				xchg cx, bx		  ; CX = jday, BX = month 	
 16AE  B8 016E				mov ax, 366		  ; mday, max. days since 1/1 is 365
 16B1  83 E2 03				and dx, 11b		  ; year mod 4	(and dx, 3) 
 16B4				@@:	; Month calculation	  ; 0 to 11  (11 to 0)	
 16B4  3B C8				cmp cx, ax		  ; mday = # of days passed from 1/1
 16B6  73 15				jnb short @f
 16B8  4B				dec bx			  ; month = month - 1
 16B9  D1 E3				shl bx, 1 
 16BB  8B 87 2221 R			mov ax, word ptr DMonth[BX] ; # elapsed days at 1st of month
 16BF  D1 EB				shr bx, 1		  ; bx = month - 1 (0 to 11)
 16C1  83 FB 01				cmp bx, 1		  ; if month > 2 and year mod 4  = 0	
 16C4  76 EE				jna short @b		  ; then mday = mday + 1
 16C6  0A D2				or dl, dl		  ; if past 2/29 and leap year then
 16C8  75 EA				jnz short @b		  ; add leap day (to mday)
 16CA  40				inc ax			  ; mday = mday + 1
 16CB  EB E7				jmp short @b
 16CD				@@:
 16CD  43				inc bx 			  ; -> bx = month, 1 to 12
 16CE  89 1E 2217 R			mov word ptr [month], bx
 16D2  2B C8				sub cx, ax		  ; day = jday - mday + 1	
 16D4  41				inc cx 			  
 16D5  89 0E 2219 R			mov word ptr [day], cx
					
					; ax, bx, cx, dx is changed at return
					; output ->
					; [year], [month], [day], [hour], [minute], [second]
					; 

 16D9  C3				retn

 16DA				convert_from_epoch endp


 16DA				proc_mul32 proc near

				    ; push cx

 16DA  8B CB			      mov cx, bx
 16DC  8B DA			      mov bx, dx

 16DE  F7 E1			      mul cx

 16E0  93			      xchg ax, bx

 16E1  52			      push dx

 16E2  F7 E1			      mul cx 

 16E4  59			      pop cx 

 16E5  03 C1			      add ax, cx 
 16E7  83 D2 00			      adc dx, 0

 16EA  93			      xchg bx, ax
 16EB  87 D3			      xchg dx, bx

				    ; pop cx

 16ED  C3			      retn

 16EE				proc_mul32 endp


 16EE				proc_div32 proc near
					; 1999
					; (Rx_Dos_Div32) 32 bit divide procedure 
					; by Erdogan Tan
					; Input -> DX_AX = 32 bit dividend
					;          CX = 16 bit divisor
					; output -> DX_AX = 32 bit quotient
					;          BX = 16 bit remainder
 16EE  8B DA				mov  bx, dx
 16F0  93				xchg ax, bx
 16F1  33 D2				xor  dx, dx
 16F3  F7 F1				div  cx         ; at first, divide DX
 16F5  93				xchg ax, bx     ; remainder is in DX
							; now, BX has quotient
							; save remainder
 16F6  F7 F1				div  cx         ; so, DX_AX divided and
							; AX has quotient
							; DX has remainder
 16F8  87 D3				xchg dx, bx     ; finally, BX has remainder

 16FA  C3				retn

 16FB				proc_div32 endp


 16FB				sync 	proc near
					; 14/07/2015
					; 07/07/2015
					; 18/11/2012 unix boot file configuration version
					; of "sync" procedure of retro unix v1.0 by Erdogan Tan
					; 12/8/2012
					; updates super block and the last i-node on disk 
					; if modified
					; e.g. smod = 1, imod = 1, buffer_m = 1
					;
					; RETRO UNIX v1 FS

 16FB  33 C0				xor ax, ax ; mov ax, 0
 16FD  E8 FAA3			        call i_get ; (write modified i-node)
 1700  72 49			        jc  short sync_3
 1702				sync_1:
				        ; 14/07/2015
					; 07/07/2015
 1702  8A 16 1D33 R			mov dl, byte ptr [PhysicalDriveNumber]
 1706  80 FA 90				cmp dl, 90h
 1709  72 2F			        jb  short sync_2
 170B  2B D2				sub dx, dx ; 0
 170D  8B CA				mov cx, dx ; 0
 170F  2A C0				sub al, al ; specified offset is from the beginning of the file
 1711  B4 42				mov ah, 42h ; seek (move file pointer)	
 1713  8B 1E 21C4 R			mov bx, word ptr [img_file_handle]
 1717  CD 21				int 21h
 1719  73 03 E9 EB47		        jc  loc_error
 171E  8B 1E 21C4 R			mov bx, word ptr [img_file_handle]
 1722  B9 0400			        mov cx, 1024 ; write 1024 bytes (2 sectors)
 1725  BA 2A90 R			mov dx, offset BSBuffer ; bootsector (& super block) buffer
 1728  B4 40				mov ah, 40h ; write file
 172A  CD 21				int 21h
 172C  73 03 E9 EB34		        jc  loc_error
 1731  3D 0400				cmp ax, 1024
 1734  74 03 E9 EB2C		        jne loc_error
				        ;mov bx, dx ; offset BSBuffer
 1739  C3				retn
 173A				sync_2:	
 173A  BB 2A90 R		        mov bx, offset BSBuffer
 173D  B8 0302			        mov ax,0302h ; Write boot sector & super block
 1740  B9 0001			        mov cx,1
 1743  32 F6			        xor dh,dh
 1745  8A 16 1D33 R			mov dl, byte ptr [PhysicalDriveNumber]
 1749  CD 13			        int 13h
 174B				sync_3:
 174B  C3			        retn	

 174C				sync	endp


 174C				find_bfn proc near
					; 26/11/2012
					; 25/11/2012
					;
					; find boot file name by i-number (ax)
					;
					; cf -> 1 means error, ax = 0 -> not found

 174C  A3 21D4 R			mov word ptr [uf_i_number], ax
 174F  56				push si

 1750  B8 0029				mov ax, ROOT_DIR_INODE_NUMBER ; 41
 1753  E8 FA4D				call i_get
 1756  72 2C				jc short loc_find_bfn_retn

					;test word ptr [inode_flgs], 4000h ; directory i-node ?
					;jnz short @f

					;mov ah, 0FFh ; error number
					;stc
					;jmp short loc_find_bfn_retn
				;;@@:
 1758  33 C0				xor ax, ax 
 175A  A3 2201 R			mov word ptr [u_off], ax ; u_off is file offset used by user

 175D				loc_find_bfn_1:
 175D  C7 06 21FF R 2207 R		mov word ptr [u_base], offset u_dirbuf
								  ; u.dirbuff holds a file name copied from
								  ; a directory	
 1763  C7 06 2203 R 000A		mov word ptr [u_count], 10 	
				 	
 1769  B8 0029				mov ax, ROOT_DIR_INODE_NUMBER 

 176C  E8 F9C7				call read_i ; read 10 bytes of file with i-number
						   ; i.e. read a directory entry
 176F  72 13				jc short loc_find_bfn_retn

 1771  A1 2205 R			mov ax, word ptr [u_nread]

 1774  0B C0				or ax, ax
 1776  74 0E				jz short loc_find_bfn_2 ; gives error return 

 1778  A1 2207 R			mov ax, word ptr [u_dirbuf]

 177B  3B 06 21D4 R			cmp ax, word ptr [uf_i_number] ; Check i-number of directory entry
 177F  75 DC				jne short loc_find_bfn_1       ; if same with specified uf_i_number
								       ; it is the boot file 
 1781				loc_find_bfn_3:
 1781  E8 FA1F				call i_get
 1784				loc_find_bfn_retn:
 1784  5E				pop si
 1785  C3				retn

 1786				loc_find_bfn_2:
 1786  F9				stc
 1787  EB FB				jmp short loc_find_bfn_retn
					
 1789				find_bfn endp


 1789				proc_display_startupfile_info proc near
					       ; 30/11/2012	
					       ; 29/11/2012 ; @@
				               ; 25/11/2012
				              
 1789  BE 2064 R		 		mov si, offset Msg_StartupFile_Name
 178C  E8 EAE0			                call UNIX_PRINTMSG

 178F  BE 21C7 R				mov si, offset Boot_File_Name
 1792  E8 EADA			                call UNIX_PRINTMSG

 1795  BE 2239 R		                mov si, offset Str_Inode_Number
 1798  E8 EAD4			                call UNIX_PRINTMSG

 179B  BE 2A90 R				mov si, offset BSBuffer
 179E  8B 44 12					mov ax, word ptr [SI]+bs_bf_inode_number

 17A1  BE 2253 R				mov si, offset Decimal_i_no_str
 17A4  B9 0005					mov cx, 5
 17A7  E8 00D7					call proc_bin_to_decimal

 17AA  BE 2253 R				mov si, offset Decimal_i_no_str 

 17AD  B9 0004					mov cx, 4
 17B0				@@:
 17B0  80 3C 30					cmp byte ptr [SI], '0'
 17B3  77 03			                ja short @f
 17B5  46					inc si
 17B6  E2 F8			                loop @b 
 17B8				@@:
 17B8  E8 EAB4			                call UNIX_PRINTMSG

 17BB  BE 2259 R		                mov si, offset Str_startup_file_size
 17BE  E8 EAAE			                call UNIX_PRINTMSG

 17C1  A1 21DA R				mov ax, word ptr [Inode_size]
 17C4  BE 2277 R				mov si, offset Decimal_size_str
						;mov cx, 5
 17C7  B1 05					mov cl, 5
 17C9  E8 00B5					call proc_bin_to_decimal

 17CC  BE 2277 R				mov si, offset Decimal_size_str

 17CF  B1 04					mov cl, 4
 17D1				@@:
 17D1  80 3C 30					cmp byte ptr [SI], '0'
 17D4  77 03			                ja short @f
 17D6  46					inc si
 17D7  E2 F8			                loop @b 
 17D9				@@:
 17D9  E8 EA93			                call UNIX_PRINTMSG

 17DC  BE 2270 R				mov si, offset Str_Bytes
 17DF  E8 EA8D			                call UNIX_PRINTMSG

						; 30/11/2012
					
 17E2  A1 21EC R				mov ax, word ptr [Inode_ctim]
 17E5  8B 16 21EE R				mov dx, word ptr [Inode_ctim]+2

 17E9  E8 FE72					call convert_from_epoch
						
 17EC  A1 2215 R				mov ax, word ptr [year]
 17EF  BE 229F R				mov si, offset str_cyear
						;mov cx, 4
 17F2  B1 04					mov cl, 4
 17F4  E8 008A					call proc_bin_to_decimal
						
 17F7  A1 2217 R				mov ax, word ptr [month]
 17FA  BE 229C R				mov si, offset str_cmonth
 17FD  B1 02					mov cl, 2
 17FF  E8 007F					call proc_bin_to_decimal

 1802  A1 2219 R				mov ax, word ptr [day]
 1805  BE 2299 R				mov si, offset str_cday
 1808  B1 02					mov cl, 2
 180A  E8 0074					call proc_bin_to_decimal

 180D  A1 221B R				mov ax, word ptr [hour]
 1810  BE 22A5 R				mov si, offset str_chour
 1813  B1 02					mov cl, 2
 1815  E8 0069					call proc_bin_to_decimal

 1818  A1 221D R				mov ax, word ptr [minute]
 181B  BE 22A8 R				mov si, offset str_cminute
 181E  B1 02					mov cl, 2
 1820  E8 005E					call proc_bin_to_decimal

 1823  A1 221F R				mov ax, word ptr [second]
 1826  BE 22AB R				mov si, offset str_csecond
 1829  B1 02					mov cl, 2
 182B  E8 0053					call proc_bin_to_decimal

 182E  A1 21F0 R				mov ax, word ptr [Inode_mtim]
 1831  8B 16 21F2 R				mov dx, word ptr [Inode_mtim]+2

 1835  E8 FE26					call convert_from_epoch
						
 1838  A1 2215 R				mov ax, word ptr [year]
 183B  BE 22CF R				mov si, offset str_myear
						;mov cx, 4
 183E  B1 04					mov cl, 4
 1840  E8 003E					call proc_bin_to_decimal
						
 1843  A1 2217 R				mov ax, word ptr [month]
 1846  BE 22CC R				mov si, offset str_mmonth
 1849  B1 02					mov cl, 2
 184B  E8 0033					call proc_bin_to_decimal

 184E  A1 2219 R				mov ax, word ptr [day]
 1851  BE 22C9 R				mov si, offset str_mday
 1854  B1 02					mov cl, 2
 1856  E8 0028					call proc_bin_to_decimal

 1859  A1 221B R				mov ax, word ptr [hour]
 185C  BE 22D5 R				mov si, offset str_mhour
 185F  B1 02					mov cl, 2
 1861  E8 001D					call proc_bin_to_decimal

 1864  A1 221D R				mov ax, word ptr [minute]
 1867  BE 22D8 R				mov si, offset str_mminute
 186A  B1 02					mov cl, 2
 186C  E8 0012					call proc_bin_to_decimal

 186F  A1 221F R				mov ax, word ptr [second]
 1872  BE 22DB R				mov si, offset str_msecond
 1875  B1 02					mov cl, 2
 1877  E8 0007					call proc_bin_to_decimal

 187A  BE 227D R				mov si, offset Str_SF_date_Time
 187D  E8 E9EF			                call UNIX_PRINTMSG
				               
 1880  C3					retn  

 1881				proc_display_startupfile_info endp

 1881				proc_bin_to_decimal proc near
					       ; 30/11/2012 (CX input)	
					       ; 25/11/2012 unixboot.asm version	
				               ; 6-5-2009
				               ;  Erdogan Tan
				               ; INPUT: DS:SI = Target location
				               ;        AX = Binary Number
					       ;        CX = Number of digits	
				               ; OUTPUT: Decimal chars at DS:SI
				               ; CX, AX, DX will be changed.

				                ;push bp
						;push si
 1881				loc_reset_str_NumberInput:
 1881  C6 04 30			                mov byte ptr [SI], "0"
 1884  46			                inc si
 1885  E2 FA			                loop loc_reset_str_NumberInput
 1887  8B EC			                mov bp, sp
 1889  33 D2			                xor dx, dx
 188B  B9 000A					mov cx, 10
 188E				loc_rediv_NumberInput:
 188E  F7 F1			                div cx
 1890  80 C2 30					add dl,'0'
 1893  52			                push dx
 1894  33 D2			                xor dx, dx
 1896  4E					dec si
 1897  0B C0					or ax, ax
 1899  75 F3					jnz short loc_rediv_NumberInput
 189B				loop_popcx_NumberInput: 
 189B  5A			                pop dx
 189C  88 14			                mov byte ptr [SI], dl
 189E  46			                inc si
 189F  3B EC			                cmp bp, sp
 18A1  75 F8			                jne short loop_popcx_NumberInput
				                ;pop si
				                ;pop bp  
				 
 18A3  C3			                retn

 18A4				proc_bin_to_decimal endp


 18A4				unlink proc near
					; 05/01/2013 UNIXCOPY.ASM modification (pdir -> i_get)
					; 16/12/2012 UNIXCOPY.ASM version
				        ; 02/12/2012
				        ; unix boot file configuration version
					; of "sysunlink" function of retro unix v1.0 by Erdogan Tan
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972 
					; ('sysunlink', unix kernel function)
					; 
					; INPUT -> AX (R1) = inode number
					;          [u_off] = Directory Entry Offset + 10
					;          ;;; [ii] = i-number of current directory
					; Return -> CF = 0 -> Successed, CF = 1 -> failed
					;                               (error code in AX)

						;jsr r0,arg; u.namep / u.namep points to name
						;jsr r0,namei / find the i-number associated 
						;                with the path name
						;br error9 / not found
					
 18A4  50				push ax ;mov r1,-(sp) / put its i-number on the stack
						;jsr r0,isdir / is it a directory
 18A5  33 C0				xor ax, ax
 18A7  A3 2207 R			mov word ptr [u_dirbuf], ax ; clr u.dirbuf / no, clear 
							 ;the location that will get written
					                 ;/ into the i-number portion of the entry
 18AA  83 2E 2201 R 0A			sub word ptr [u_off], 10 ; sub $10.,u.off 
								 ; / move u.off back 1 directory entry
					;mov ax, word ptr [ii] 
 18AF  A1 1F02 R			mov ax, word ptr [pdir] ; 05/01/2013
 18B2  E8 F8EE				call i_get
 18B5  73 02				jnc short @f
 18B7  58				pop ax
 18B8  C3				retn
					;
 18B9				@@:
 18B9  E8 FBC2				call wdir ;jsr r0,wdir / free the directory entry
 18BC  58				pop ax  ;mov (sp)+,r1 / get i-number back
 18BD  72 11				jc short @f
 18BF  E8 F8E1			        call i_get ;jsr r0,iget / get i-node
 18C2  72 0C				jc short @f
 18C4  E8 FAA7			        call set_imod ;jsr r0,setimod / set modified flag
 18C7  FE 0E 21D8 R		        dec byte ptr [inode_nlks] ;decb i.nlks 
								  ;/ decrement the number of links
 18CB  75 03				jnz short @f ;bgt sysret9 
						     ;/ if this was not the last link to file return
 18CD  E8 0001				call anyi    ;jsr r0,anyi / if it was, see if anyone has it open.
						     ;Then / free contents of file and destroy it.
						     ;br sysret9
 18D0				@@:
 18D0  C3				retn

 18D1				unlink endp


 18D1				anyi proc near
				        ; 02/12/2012
				        ; unix boot file configuration version
					; of "anyi" procedure of retro unix v1.0 by Erdogan Tan
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972 
					; ('anyi' procedure)
					; 
					; INPUT -> AX (R1) = inode number
					; Return -> CF = 0 -> Successed, CF = 1 -> failed
					;                               
					    ; mov $fsp,r2 / move start of fsp table to r2
 18D1				anyi_1: ;1
					    ; cmp r1,(r2) / do i-numbers match?
					    ; beq 1f / yes, 1f
					    ; neg r1 / no complement r1
					    ; cmp r1,(r2) / do they match now?
					    ; beq 1f / yes, transfer
						   ; / i-numbers do not match
					    ; add $8,r2 / no, bump to next entry in fsp table
					    ; cmp r2,$fsp+[nfiles*8] / are we at last entry in the table
					    ; blt 1b / no, check next entries i-number
					    ; tst r1 / yes, no match
					    ; bge .+4
					    ; neg	r1 / make i-number positive
 18D1  E8 0011				call imap ; jsr	r0,imap / get address of allocation bit 
						  ;          	in the i-map in r2
				        ; DX (MQ) has a 1 in the calculated bit position
				        ; BX (R2) has byte address of the byte with allocation bit
 18D4  53				push bx ; retro unix modification (not as original unix code)
 18D5  52				push dx ; retro unix modification (not as original unix code)
					; AX = i-number
 18D6  E8 002C				call itrunc ; jsr r0,itrunc / free all blocks related to i-node
					
 18D9  5A				pop dx ; retro unix modification (not as original unix code)
 18DA  5B				pop bx ; retro unix modification (not as original unix code)

 18DB  72 07				jc short @f

				        ; (AX=0)
					; retro unix modification-> 'call itrunc' moved up for
					; keeping super block unmodified if itrunc return with an error

 18DD  F7 D2			        not dx
 18DF  20 17			        and byte ptr [BX], dl ; bicb mq,(r2) 
							      ; / clear bit for i-node in the imap
					; xor ax, ax
 18E1  A3 21D6 R			mov word ptr [inode_flgs], ax ; 0 ; clr	i.flgs
								   ; / clear all flags in the i-node
 18E4				@@:
 18E4  C3				retn ; rts r0 / return

				;anyi_2: ;1 / i-numbers match
				        ; incb	7(r2) / increment upper byte of the 4th word
					; rts r0 / in that fsp entry (deleted flag of fsp entry)

 18E5				anyi endp


 18E5				imap proc near
				        ; 02/12/2012
				        ; unix boot file configuration version
					; of "imap" procedure of retro unix v1.0 by Erdogan Tan
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972 
					; ('imap' procedure)

					; 11/11/2012 (maknod_imap location -> imap procedure)
 18E5  8B D8			        mov bx, ax   ; BX = R2, AX = R1 (input, i-number)
 18E7  83 EB 29			        sub bx, 41   ; BX has i-41
 18EA  8A CB			        mov cl, bl   ; CX = R3   
 18EC  BA 0001			        mov dx, 1    ; 
 18EF  80 E1 07				and cl, 7    ; CX has (i-41) mod 8 to get the bit position 	 	
 18F2  74 02				jz short @f  ; 21/8/2012
 18F4  D3 E2			        shl dx, cl   ; DX has 1 in the calculated bit position
 18F6				@@:
 18F6  D1 EB			        shr bx, 1
 18F8  D1 EB			        shr bx, 1
 18FA  D1 EB			        shr bx, 1    ; BX has (i-41) base 8 of byte number
						     ; from the start of the (inode) map		

 18FC  03 1E 2C90 R		        add bx, word ptr [systm] ; superblock free map size + 4
 1900  81 C3 2C94 R		        add bx, offset systm + 4 ; is inode map offset in superblock 

				        ; DX (MQ) has a 1 in the calculated bit position
				        ; BX (R2) has byte address of the byte with allocation bit

 1904  C3				retn

 1905				imap	endp


 1905				itrunc proc near
					; 10/03/2013 BugFix
				        ; 01/12/2012
				        ; unix boot file configuration version
					; of "itrunc" procedure of retro unix v1.0 by Erdogan Tan
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972 
					; ('itrunch' procedure)
					; 
					; INPUT -> AX (R1) = inode number
					; Return -> CF = 0 -> Successed (AX=0), CF = 1 -> failed
					;                               (error code in AX)

 1905  E8 F89B				call 	i_get ; jsr r0,iget
 1908  72 1B				jc	short  itrunc_7 ; 10/03/2013
 190A  BE 21DC R			mov 	si, offset inode_dskp ; mov $i.dskp,r2
 190D  8B FE				mov	di, si
 190F				itrunc_1:
					;  10/03/2013 BugFix ('lodsb' -> 'lodsw')
 190F  AD				lodsw 	; mov (r2)+,r1 / move physical block number into r1
 1910  0B C0				or	ax,ax
 1912  74 28				jz	short itrunc_5 ; beq 5f
 1914  56				push	si ;  mov r2,-(sp)
 1915  F7 06 21D6 R 1000	        test    word ptr [inode_flgs], 1000h    
						; bit $10000,i.flgs / test large file bit?
 191B  74 1B				jz	short itrunc_4   ; beq 4f / if clear, branch
 191D  50				push	ax ; mov r1,-(sp) / save block number of indirect block
 191E  E8 F8F7				call	dsk_rd ; jsr r0,dskrd / read in block,
					; bx = Buffer offset     ; 1st data word pointed to by r5
 1921  73 03				jnc	short itrunc_6 ; 10/03/2013
 1923  5E				pop si ; 10/03/2013
 1924  5E				pop si ; 10/03/2013
 1925				itrunc_7:
 1925  C3				retn   ; 10/03/2013
 1926				itrunc_6:
 1926  B9 0100				mov	cx, 256 ; mov $256.,r3 / move word count into r3
 1929  8B F3				mov 	si, bx ; 10/03/2013 (SI more proper here than BX)
 192B				itrunc_2:
					;mov	ax, word ptr [BX] ; mov	(r5)+,r1
						 ; / put 1st data word in r1; physical block number
 192B  AD				lodsw   ; 10/03/2013 ; mov ax, word ptr [SI] ; add si, 2
					;inc	bx
					;inc 	bx ; 10/03/2013 (BugFix) 
 192C  23 C0				and	ax, ax
 192E  74 05				jz	itrunc_3 ; beq	3f / branch if zero
 1930  51				push	cx  ; mov r3,-(sp) / save r3, r5 on stack
					;push	bx  ; mov r5,-(sp) ; 10/03/2013, push bx is not needed
 1931  E8 0022				call	free  ; jsr r0,free / free block in free storage map
					;pop	bx  ; mov (sp)+,r5 ; 10/03/2013, push bx is not needed
 1934  59				pop	cx ;  mov (sp)+,r3
 1935				itrunc_3:
 1935  E2 F4				loop	itrunc_2  ; dec r3 / decrement word count
							  ; bgt	2b / branch if positive
 1937  58				pop	ax ; mov (sp)+,r1 
						   ; / put physical block number of indirect block
 1938				itrunc_4:
 1938  E8 001B				call	free  ; jsr r0,free / free indirect block
 193B  5E				pop	si    ; mov (sp)+,r2
 193C				itrunc_5:
 193C  81 FE 21EC R			cmp	si, offset inode_dskp + 16 ; cmp r2,$i.dskp+16.
 1940  72 CD				jb	short itrunc_1 ; bne 1b 
							; / branch until all i.dskp entries check
 1942  81 26 21D6 R EFFF	        and     word ptr [inode_flgs], 0EFFFh ; 1110111111111111b
						; bic $10000,i.flgs / clear large file bit
 1948  B9 0008				mov	cx, 8
 194B  33 C0				xor	ax, ax
 194D  A3 21DA R			mov	word ptr [inode_size], ax
						; clr i.size / zero file size
					;mov	di, offset inode_dskp
 1950  F3/ AB				rep	stosw ; jsr r0,copyz; i.dskp; i.dskp+16.
						      ; / zero block pointers
					
 1952  E8 FA19				call	set_imod  ; jsr	r0,setimod
							  ; / set i-node modified flag
					;mov	ax, word ptr [ii]  ; mov ii,r1

 1955  C3				retn	; rts	r0

 1956				itrunc endp


 1956				free proc near
				        ; 01/12/2012
				        ; unix boot file configuration version
					; of "free" procedure of retro unix v1.0 by Erdogan Tan
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972 
					; ('free' procedure)
					; 
					; INPUT -> ax (R1) = physical block number
					; Return -> CF = 0 -> Successed, CF = 1 -> failed
					;                               

					;push  bx     ; mov r2,-(sp) / save r2, r3
					;;push cx     ; mov r3,-(sp)
					;push  dx

					;call	free_3 ; jsr r0,3f 
						; / set up bit mask and word no. in free storage map
						; / for block
 1956				free_3: ; 3
 1956  BA 0001				mov dx, 1    
 1959  8B C8				mov cx, ax   ; mov r1,r2 / block number, k, = 1
 195B  83 E1 0F				and cx, 0Fh  ; bic $!7,r2 / clear all bits but 0,1,2; r2 = (k) mod (8)
						     ; clr r3
 195E  74 02				jz short @f
						     ; bisb 2f(r2),r3 / use mask to set bit in r3 
						     ; corresponding to / (k) mod 8
 1960  D3 E2				shl dx, cl
 1962				@@:
 1962  8B D8				mov bx, ax   ; mov r1,r2 / divide block number by 16
 1964  D1 EB				shr bx, 1    ; asr r2	
 1966  D1 EB				shr bx, 1    ; asr r2	
 1968  D1 EB				shr bx, 1    ; asr r2	
 196A  D1 EB				shr bx, 1    ; asr r2
						     ; bcc 1f / branch if bit 3 in r1 was 0 i.e., 	
						             ; bit for block is in / lower half of word
						     ; swab r3 / swap bytes in r3; bit in 
							      ; upper half of word in free / storage map		
 196C				free_1: ; 1
 196C  D1 E3				shl bx, 1 ; asl	r2 / multiply block number by 2; r2 = k/8
 196E  81 C3 2C92 R			add bx, offset systm+2 ; add $systm+2,r2 
							  ; / address of word of free storage map for drum
					    		  ; / with block bit in it
					; retn  ; rts r0 (return from free_3)
 1972				@@:
 1972  09 17				or word ptr [BX], dx  ; bis r3, (r2)
						  ; / set free storage block bit; indicates free block	
					; 0 -> allocated, 1 -> free

					;;inc byte ptr [smod] ; incb smod / set super block modified for drum
					;mov byte ptr [smod], 1 ; / set super block modified for drum
					;pop dx
					;pop cx     ; mov (sp)+,r3 / restore r2, r3
					;pop bx     ; mov (sp)+,r2
					; AX (R1) = Block number

 1974  C3				retn

 1975				free endp


 1975				chmode  proc near
					; 13/01/2013
					; 'change mode' procedure
					; Format: chmod <octal number> <unix file name>
					;
					; output -> cf=1 -> error
					; 	 -> cf=0 -> word ptr [arg] > 0 -> mode (string, 2 chars)
					;		    word ptr [arg] = 0 -> ignored (none is done)	
				        
 1975  33 C0				xor ax, ax
 1977  A3 1F06 R			mov word ptr [arg], ax
 197A				chmode_1:
 197A  AC				lodsb
 197B  3C 30				cmp al, '0'
 197D  72 0E				jb short chmode_8

 197F  3C 37				cmp al, '7'
 1981  77 08				ja short chmode_stc_retn ; cmc
 1983				chmode_2:
 1983  0A E4				or ah, ah
 1985  75 14				jnz short chmode_3
 1987  8A E0				mov ah, al
 1989  EB EF				jmp short chmode_1

 198B				chmode_stc_retn:
 198B  F5				cmc
 198C				chmode_retn:
 198C  C3				retn

 198D				chmode_8:
 198D  0A E4				or ah, ah
 198F  74 FA				jz short chmode_stc_retn
 1991  3C 20				cmp al, 20h
 1993  75 F6				jne short chmode_stc_retn
 1995  8A C4				mov al, ah
 1997  B4 30				mov ah, '0'	
 1999  EB 06				jmp short chmode_4

 199B				chmode_3:
 199B  80 3C 20				cmp byte ptr [SI], 20h
					; no error if the 3rd character is a carriage return
 199E  75 EB				jne short chmode_stc_retn

 19A0  46				inc si
 19A1				chmode_4:
 19A1  A3 1F06 R			mov word ptr [arg], ax
 19A4				chmode_5:
 19A4  89 36 21FB R			mov word ptr [u_namep], si
 19A8  AC				lodsb
 19A9  3C 20				cmp al, 20h
 19AB  74 F7				je short chmode_5
 19AD  72 DC				jb short chmode_stc_retn ; no error (carriage return)
 19AF				chmode_6:
 19AF  E8 F6ED				call name_i
 19B2  72 D8				jc short chmode_retn

					; ax = i-number
 19B4  E8 F7EC				call i_get
 19B7  72 D3				jc short chmode_retn

 19B9  A1 1F06 R			mov ax, word ptr [arg]
 19BC  86 E0				xchg ah, al
 19BE  A3 1F06 R			mov word ptr [arg], ax
 19C1  2D 3030				sub ax, '00' ; 3030h
 19C4  D0 E0				shl al, 1
 19C6  D0 E0				shl al, 1
 19C8  D0 E0				shl al, 1
 19CA  02 C4				add al, ah

 19CC  BB 21D6 R			mov bx, offset inode_flgs
 19CF  F7 07 4000			test word ptr [BX], 4000h ; directory ?
 19D3  74 02				jz short chmode_7
						; clear 'set user id' and 'executable' flags
 19D5  24 0F				and al , 0Fh ; 1111b 
 19D7				chmode_7:
 19D7  88 07				mov byte ptr [BX], al
 19D9  C6 06 21F7 R 01			mov byte ptr [imod], 1
					;xor ah, ah
 19DE  C3				retn		

 19DF				chmode  endp 

 19DF				chowner proc near
					; 13/01/2013
					; 'change owner' procedure
					; Format: chown <decimal number> <unix file name>
					;
					; output -> cf=1 -> error
					; 	 -> cf=0 -> 
					; BX > 0 -> offset arg == owner (decimal string, 3 chars)
					;	    BX = 0 -> ignored (none is done)	
				        
 19DF  33 C0				xor ax, ax
 19E1  BF 1F06 R			mov di, offset arg
 19E4  89 05				mov [di], ax ; 0
 19E6  33 DB				xor bx, bx
					; mov cx, 3
 19E8  B9 3930				mov cx, '90'
					; xor dx, dx
 19EB  32 D2				xor dl, dl
 19ED				chowner_1:
 19ED  AC				lodsb
 19EE  38 C8				cmp al, cl ; '0'
 19F0  72 24				jb short chowner_5
 19F2  38 E8				cmp al, ch ; '9'
 19F4  77 1E				ja short chowner_stc_retn ; cmc
 19F6  FE C2				inc dl
 19F8				chowner_2:
 19F8  0A DB				or bl, bl
 19FA  75 06				jnz short chowner_3

 19FC  38 C8				cmp al, cl ; '0'
 19FE  74 ED				je short chowner_1
 1A00  EB 08				jmp short chowner_4

 1A02				chowner_3:
 1A02  50				push ax
 1A03  B0 0A				mov al, 10
 1A05  F6 E3				mul bl
 1A07  8B D8				mov bx, ax
 1A09  58				pop ax
 1A0A				chowner_4:
 1A0A  2A C1				sub al, cl ; '0'
 1A0C  03 D8				add bx, ax
 1A0E  0A FF				or bh, bh
 1A10  74 11				jz short chowner_7
 1A12  33 DB				xor bx, bx

 1A14				chowner_stc_retn:
 1A14  F5				cmc
 1A15  C3				retn	

 1A16				chowner_5:
 1A16  22 D2				and dl, dl
 1A18  74 38				jz short chowner_retn	
 1A1A  3C 20				cmp al, 20h
 1A1C  74 0A				je short chowner_8
 1A1E				chowner_6:
 1A1E  BB 0000				mov bx, 0
 1A21  EB F1				jmp short chowner_stc_retn

 1A23				chowner_7:
 1A23  02 C1				add al, cl ;'0'
 1A25  AA				stosb
 1A26  EB C5				jmp short chowner_1
					;loop chowner_1
					;cmp byte ptr [SI], 20h
					;; no error if the 4th character is a carriage return
					;jne short chowner_6

					;inc si
 1A28				chowner_8:
 1A28  89 36 21FB R			mov word ptr [u_namep], si
 1A2C  AC				lodsb
 1A2D  3C 20				cmp al, 20h
 1A2F  74 F7				je short chowner_8
 1A31  72 EB				jb short chowner_6 ; no error (carriage return)

					;mov byte ptr [u_uid], bl
 1A33  53				push bx
 1A34  E8 F668				call name_i
 1A37  72 03				jc short chowner_9

					; ax = i-number
 1A39  E8 F767				call i_get

 1A3C				chowner_9:
					;pushf
					;mov bl, byte ptr [u_uid]
					;xor bh, bh
					;mov byte ptr [u_uid], bh ; 0
					;popf
 1A3C  5B				pop bx
 1A3D  72 13				jc short chowner_retn

 1A3F  88 1E 21D9 R			mov byte ptr [inode_uid], bl
 1A43  C6 06 21F7 R 01			mov byte ptr [imod], 1

 1A48  0A DB				or  bl, bl
 1A4A  75 06				jnz short chowner_retn

 1A4C  B7 30				mov bh, '0'
 1A4E  88 3E 1F06 R			mov byte ptr [arg], bh 

 1A52				chowner_retn:	
 1A52  C3				retn
								
 1A53				chowner endp


 1A53				print_decimal_number proc near
					; 05/03/2016
					; 03/02/2013
					; 21/01/2013 
					; print decimal number
					;
					; INPUT -> AX = Integer
					; 32/02/2013 CX = Number of decimal digits
					; OUTPUT -> decimal number as string
 1A53				pdn0:
 1A53  BE 22E2 R			mov si, offset dec_num
					;
 1A56  8B DE				mov bx, si
 1A58  03 F1				add si, cx ; 03/02/2013
 1A5A  8B FE				mov di, si
					;mov cx, 10
 1A5C  B1 0A				mov cl, 10
 1A5E  B2 30				mov dl, '0'
 1A60				@@: 
 1A60  88 17				mov byte ptr [BX], dl
 1A62  43				inc bx
 1A63  E2 FB				loop @b
					;
					;xor dl, dl
					;mov byte ptr [BX], dl
 1A65  BB 000A				mov bx, 10
 1A68  33 D2				xor dx, dx
 1A6A				pdn_itoa:
 1A6A  F7 F3				div bx
					; 03/02/2013
 1A6C  00 14				add byte ptr [SI], dl ; 03/02/2013
 1A6E  22 D2				and dl, dl
 1A70  75 04				jnz short @f
 1A72  23 C0				and ax, ax ; 05/03/2016
 1A74  74 05				jz short pdn_14
 1A76				@@:	
 1A76  4E				dec si
 1A77  32 D2				xor dl, dl
 1A79  EB EF				jmp short pdn_itoa
 1A7B				pdn_14:
 1A7B  BE 22E2 R			mov si, offset dec_num
 1A7E  8B DE				mov bx, si
 1A80				@@:	; leading zeros will not be printed
 1A80  8A 07			        mov al, byte ptr [BX] ; 03/02/2013
 1A82  3C 30				cmp al, '0'
 1A84  77 0B				ja short @f
 1A86  3B DF				cmp bx, di
 1A88  73 07				jnb short @f
 1A8A  B0 20				mov al, 20h
 1A8C  88 07				mov byte ptr [BX], al 
 1A8E  43				inc bx
 1A8F  EB EF				jmp short @b
 1A91				@@:
 1A91  B4 0E				mov ah, 0Eh
 1A93  BB 0007				mov bx, 07h
 1A96				@@:
 1A96  AC				lodsb
 1A97				pdn_putc:	
 1A97  CD 10				int 10h

 1A99  3B F7				cmp si, di
 1A9B  76 F9				jna short @b

					;mov al, 20h
					;int 10h
					
 1A9D  C3				retn 
					
 1A9E				print_decimal_number endp

 1A9E				print_volume_info proc near
					; 16/02/2013

 1A9E  BB 2A90 R			mov bx, offset BSBuffer
 1AA1  83 C3 08				add bx, bsVolumeSerial+2
 1AA4  B9 0002				mov cx, 2
 1AA7  BF 2349 R			mov di, offset msgVolume_Serial
 1AAA				@@:
 1AAA  8B 07				mov ax, word ptr [BX]
 1AAC  E8 00B9				call proc_hex_double
 1AAF  AB				stosw
 1AB0  8B C2				mov ax, dx
 1AB2  AB				stosw
 1AB3  49				dec cx
 1AB4  74 06				jz short @f
 1AB6  47				inc di
 1AB7  83 EB 02				sub bx, 2		
 1ABA  EB EE				jmp short @b
 1ABC				@@:
 1ABC  BE 22F0 R			mov si, offset msgVolume_Info
 1ABF  E8 E7AD				call UNIX_PRINTMSG
 1AC2				@@:
 1AC2  BB 2C90 R			mov bx, offset systm ; SuperBlock 
						; start of free storage map for disk
 1AC5				@@:
 1AC5  8B 07				mov ax, word ptr [BX] ; first word contains # of bytes 
					                ; in free storage map
 1AC7  D1 E0				shl ax, 1	; multiply AX by 8 gives # of blocks
 1AC9  D1 E0				shl ax, 1
 1ACB  D1 E0				shl ax, 1	
 1ACD  50				push ax		
 1ACE  BE 2356 R			mov si, offset msgVol_Size_Hdr
 1AD1  E8 E79B				call UNIX_PRINTMSG
 1AD4  58				pop ax
 1AD5  50				push ax
 1AD6  B1 04				mov cl, 4 ; mov cx, 4
 1AD8  E8 FF78				call print_decimal_number
 1ADB  BE 2365 R			mov si, offset msgVolume_Size
 1ADE  E8 E78E				call UNIX_PRINTMSG
 1AE1  59				pop cx		; cx = bit count of free storage map
 1AE2  33 D2				xor dx, dx ; mov dx, 0
 1AE4  32 DB				xor bl, bl ; xor bx, bx
 1AE6  BE 2C92 R			mov si, offset systm+2
 1AE9  BF 0010				mov di, 16
 1AEC				pvi_size_loop1:
 1AEC  AD				lodsw
 1AED  0B C0				or ax, ax
 1AEF  74 0B				jz short pvi_size_loop3
 1AF1  51				push cx
 1AF2  8B CF				mov cx, di
 1AF4				pvi_size_loop2:
 1AF4  D1 E8				shr ax, 1
 1AF6  73 01				jnc short @f
 1AF8  43				inc bx
 1AF9				@@:
 1AF9  E2 F9				loop pvi_size_loop2
 1AFB  59				pop cx		
 1AFC				pvi_size_loop3:
 1AFC  03 D7				add dx, di
 1AFE  3B D1				cmp dx, cx    
 1B00  72 EA				jb short pvi_size_loop1

 1B02  53				push bx
 1B03  BE 236F R			mov si, offset msgVol_freeblocks_Hdr
 1B06  E8 E766				call UNIX_PRINTMSG
 1B09  58				pop ax ; # of free blocks
 1B0A  B9 0004				mov cx, 4	
 1B0D  E8 FF43				call print_decimal_number
 1B10  BE 237E R			mov si, offset msgVolume_freeblocks
 1B13  E8 E759				call UNIX_PRINTMSG

 1B16				@@:
 1B16  8B 1E 2C90 R			mov bx, word ptr [systm]
 1B1A  81 C3 2C92 R			add bx, offset systm + 2
						; start of inode map for disk
 1B1E				@@:
 1B1E  8B 07				mov ax, word ptr [BX] ; first word contains # of bytes 
					                ; in inode map
 1B20  53				push bx ; **
 1B21  50				push ax ; * ; 22/03/2022
 1B22  D1 E0				shl ax, 1	; multiply AX by 8 gives # of inodes
 1B24  D1 E0				shl ax, 1
 1B26  D1 E0				shl ax, 1
					;push bx	
 1B28  50				push ax		
 1B29  BE 2388 R			mov si, offset msgVol_icount_Hdr
 1B2C  E8 E740				call UNIX_PRINTMSG
 1B2F  58				pop ax
					;push ax ; 22/03/2022
 1B30  B1 04				mov cl, 4 ; mov cx, 4
 1B32  E8 FF1E				call print_decimal_number
 1B35  BE 2397 R			mov si, offset msgVolume_icount
 1B38  E8 E734				call UNIX_PRINTMSG
 1B3B  59				pop cx	; *	; cx = bit count of inode map
 1B3C  5E				pop si  ; **	; inode map offset
					;
					; 22/03/2022
					;add si, 2
 1B3D  AD				lodsw	; BugFix - 22/03/2022
					;
					;xor dx, dx ; mov dx, 0
 1B3E  32 DB				xor bl, bl ; xor bx, bx
					;mov di, 16
 1B40				pvi_icount_loop1:
					;lodsw
					;;cmp ax, 0FFFFh
					;;je short pvi_icount_loop3
					;inc ax
					;jz short pvi_icount_loop3
					;dec ax
					;push cx
					;mov cx, di
					; 22/03/2022
 1B40  AC				lodsb
 1B41  FE C0				inc al
 1B43  74 0D				jz short pvi_icount_loop3  ; 0FFh -> 0
 1B45  FE C8				dec al
 1B47  B4 08				mov ah, 8	
 1B49				pvi_icount_loop2:
					; 22/03/2022
					;shr ax, 1
 1B49  D0 E8				shr al, 1	
 1B4B  72 01				jc short @f
 1B4D  43				inc bx
 1B4E				@@:
					;loop pvi_icount_loop2
 1B4E  FE CC				dec ah
 1B50  75 F7				jnz short pvi_icount_loop2
					;pop cx		
 1B52				pvi_icount_loop3:
					; 22/03/2022
					;add dx, di
					;cmp dx, cx    
					;jb short pvi_icount_loop1
 1B52  E2 EC				loop pvi_icount_loop1	

 1B54  53				push bx
 1B55  BE 239D R			mov si, offset msgVol_free_icount_Hdr
 1B58  E8 E714				call UNIX_PRINTMSG
 1B5B  58				pop ax ; # of free inodes
 1B5C  B9 0004				mov cx, 4	
 1B5F  E8 FEF1				call print_decimal_number
 1B62  BE 23AC R			mov si, offset msgVolume_free_icount
					;call UNIX_PRINTMSG
					;retn
 1B65  E9 E707				jmp UNIX_PRINTMSG ; 22/03/2022		
					
 1B68				print_volume_info endp

 1B68				proc_hex_double  proc near
					; 16/02/2013 (AX:DX)
					; 28/01/2002 (DX:AX)
					; From binary (word) to hexadecimal (character) converter
					;
					; input -> AX = word (binary number) to be converted
					; output -> AX = First 2 characters of hexadecimal number
					; output -> DX = Last 2 characters of hexadecimal number

 1B68  51				push cx
 1B69  33 D2			        xor dx, dx
 1B6B  B9 0010			        mov cx, 10h
 1B6E  F7 F1			        div cx      ; Q in AX, R in DX (DL)
 1B70  52			        push dx     ; DH= 0, R in DL <- CX= 10h 
 1B71  32 D2			        xor dl, dl
 1B73  F7 F1			        div cx	    ; DH= 0, R in DL, AX <= FFh
 1B75  F6 F1			        div cl      ; AL <= 0Fh
				       	            ; R in AH, Q in AL
 1B77  59			        pop cx      ; R in CL
 1B78  8A F1				mov dh, cl
					
 1B7A  81 CA 3030		        or dx,'00'

 1B7E  80 FA 39			        cmp dl,'9'
 1B81  76 03			        jna short pass_cc_dl
 1B83  80 C2 07			        add dl,7
 1B86				pass_cc_dl:
 1B86  80 FE 39			        cmp dh,'9'
 1B89  76 03			        jna short pass_cc_dh
 1B8B  80 C6 07			        add dh,7
 1B8E				pass_cc_dh:
 1B8E  0D 3030			        or ax, '00'

 1B91  3C 39			        cmp al,'9'
 1B93  76 02			        jna short pass_cc_al
 1B95  04 07			        add al,7
 1B97				pass_cc_al:
 1B97  80 FC 39			        cmp ah,'9'
 1B9A  76 03			        jna short pass_cc_ah
 1B9C  80 C4 07			        add ah,7
 1B9F				pass_cc_ah:
 1B9F  59			        pop cx

 1BA0  C3			        retn

 1BA1				proc_hex_double  endp

 1BA1				show_inode  proc near
					; 17/02/2013
					; print inode details
					; Format: inode <decimal number>, iget <decimal number>
					; INPUT -> AX <> 0 -> Current Inode [ii]
					;	   AX = 0 -> use inode number input
					;
 1BA1  23 C0				and ax, ax
 1BA3  75 55				jnz short show_inode_7
 1BA5  A3 1F06 R			mov word ptr [arg], ax ; 0
 1BA8  33 D2				xor dx, dx
 1BAA				show_inode_1:
 1BAA  AC				lodsb
 1BAB  3C 30				cmp al, '0'
 1BAD  72 0E				jb short show_inode_4
 1BAF  3C 39				cmp al, '9'
 1BB1  77 12			        ja short show_inode_stc_retn ; cmc
 1BB3  2C 30				sub al, '0'
 1BB5				show_inode_2:
 1BB5  0B D2				or dx, dx
 1BB7  75 0E				jnz short show_inode_5
 1BB9				show_inode_3:
 1BB9  8B D0				mov dx, ax
 1BBB  EB ED				jmp short show_inode_1
 1BBD				show_inode_4:
 1BBD  0B D2				or dx, dx
 1BBF  74 04				jz short show_inode_stc_retn
 1BC1  3C 20				cmp al, 20h
 1BC3  76 14				jna short show_inode_6
 1BC5				show_inode_stc_retn:
 1BC5  F5				cmc
 1BC6				show_inode_retn:
 1BC6  C3				retn
 1BC7				show_inode_5:
 1BC7  81 FA 0100			cmp dx, 256
 1BCB  73 F8				jnb short show_inode_stc_retn
 1BCD  8A E2				mov ah, dl
 1BCF  8A D0				mov dl, al
 1BD1  B0 0A				mov al, 10
 1BD3  F6 E4				mul ah
 1BD5  03 D0				add dx, ax 
 1BD7  EB D1				jmp short show_inode_1
 1BD9				show_inode_6:
 1BD9  8B 1E 2C90 R			mov bx, word ptr [systm]
 1BDD  81 C3 2C92 R			add bx, offset systm+2
 1BE1  8B 07				mov ax, word ptr [bx] ; inode map bytes
 1BE3  D1 E0				shl ax, 1
 1BE5  D1 E0				shl ax, 1
 1BE7  D1 E0				shl ax, 1 ; inode count
 1BE9  83 C0 28				add ax, 40 ; + device file inodes
 1BEC  3B C2				cmp ax, dx
 1BEE  72 D6				jb short show_inode_retn ; not a valid i-number
 1BF0  8B C2				mov ax, dx
 1BF2  A3 1F06 R			mov word ptr [arg], ax
					; ax = i-number
 1BF5  E8 F5AB				call i_get
 1BF8  72 CC				jc short show_inode_retn
 1BFA				show_inode_7:
					;mov ax, word ptr [ii]
 1BFA  E8 FF6B				call proc_hex_double
 1BFD  A3 23FD R			mov word ptr [txt_inode_number], ax
 1C00  89 16 23FF R			mov word ptr [txt_inode_number]+2, dx
 1C04  A1 21D6 R			mov ax, word ptr [inode_flgs]
 1C07  50				push ax
 1C08  E8 FF5D				call proc_hex_double
 1C0B  A3 240E R			mov word ptr [txt_inode_flags_h], ax
 1C0E  89 16 2410 R			mov word ptr [txt_inode_flags_h]+2, dx
 1C12  5A				pop dx
 1C13  BF 2416 R			mov di, offset txt_inode_flags_b
 1C16  B9 0010				mov cx, 16
 1C19				@@:
 1C19  32 C0				xor al, al ; 0
 1C1B  D1 E2				shl dx, 1
 1C1D  14 30				adc al, '0'			
 1C1F  AA				stosb
 1C20  E2 F7				loop @b
 1C22  A1 21D8 R			mov ax, word ptr [inode_nlks]  ; & uid
 1C25  E8 FF40				call proc_hex_double
 1C28  89 16 2437 R			mov word ptr [txt_inode_nlks], dx
 1C2C  A3 2446 R			mov word ptr [txt_inode_uid], ax
 1C2F  A1 21DA R		        mov ax, word ptr [inode_size]
 1C32  E8 FF33				call proc_hex_double
 1C35  A3 2452 R			mov word ptr [txt_inode_size], ax
 1C38  89 16 2454 R			mov word ptr [txt_inode_size]+2, dx
 1C3C  B1 08				mov cl, 8
 1C3E  BE 21DC R			mov si, offset inode_dskp
 1C41  BF 2467 R			mov di, offset txt_inode_dskp
 1C44				@@:
 1C44  AD				lodsw
 1C45  E8 FF20				call proc_hex_double	
 1C48  AB				stosw
 1C49  8B C2				mov ax, dx
 1C4B  AB				stosw
 1C4C  FE C9				dec cl
 1C4E  74 04				jz short @f
 1C50  47				inc di
 1C51  47				inc di
 1C52  EB F0				jmp short @b
 1C54				@@:
					;mov si, offset inode_ctim
 1C54  8B 04				mov ax, word ptr [SI]
 1C56  8B 54 02				mov dx, word ptr [SI]+2
 1C59  52				push dx
 1C5A  50				push ax
 1C5B  52				push dx
 1C5C  E8 FF09				call proc_hex_double
 1C5F  A3 24AC R			mov word ptr [txt_inode_ctim_h]+4, ax	
 1C62  89 16 24AE R			mov word ptr [txt_inode_ctim_h]+6, dx
 1C66  58				pop ax
 1C67  E8 FEFE				call proc_hex_double
 1C6A  A3 24A8 R			mov word ptr [txt_inode_ctim_h], ax	
 1C6D  89 16 24AA R			mov word ptr [txt_inode_ctim_h]+2, dx
 1C71  58				pop ax
 1C72  5A				pop dx
 1C73  E8 F9E8				call convert_from_epoch
 1C76  A1 2215 R			mov ax, word ptr [year]
 1C79  BE 24BA R			mov si, offset txt_inode_cyear
					;mov cx, 4
 1C7C  B1 04				mov cl, 4
 1C7E  E8 FC00				call proc_bin_to_decimal
 1C81  A1 2217 R			mov ax, word ptr [month]
 1C84  BE 24B7 R			mov si, offset txt_inode_cmonth
 1C87  B1 02				mov cl, 2
 1C89  E8 FBF5				call proc_bin_to_decimal
 1C8C  A1 2219 R			mov ax, word ptr [day]
 1C8F  BE 24B4 R			mov si, offset txt_inode_cday
 1C92  B1 02				mov cl, 2
 1C94  E8 FBEA				call proc_bin_to_decimal
 1C97  A1 221B R			mov ax, word ptr [hour]
 1C9A  BE 24BF R			mov si, offset txt_inode_chour
 1C9D  B1 02				mov cl, 2
 1C9F  E8 FBDF				call proc_bin_to_decimal
 1CA2  A1 221D R			mov ax, word ptr [minute]
 1CA5  BE 24C2 R			mov si, offset txt_inode_cminute
 1CA8  B1 02				mov cl, 2
 1CAA  E8 FBD4				call proc_bin_to_decimal
 1CAD  A1 221F R			mov ax, word ptr [second]
 1CB0  BE 24C5 R			mov si, offset txt_inode_csecond
 1CB3  B1 02				mov cl, 2
 1CB5  E8 FBC9				call proc_bin_to_decimal
 1CB8  BE 21F0 R			mov si, offset inode_mtim
 1CBB  8B 04				mov ax, word ptr [SI]
 1CBD  8B 54 02				mov dx, word ptr [SI]+2
 1CC0  52				push dx
 1CC1  50				push ax
 1CC2  52				push dx
 1CC3  E8 FEA2				call proc_hex_double
 1CC6  A3 24E2 R			mov word ptr [txt_inode_mtim_h]+4, ax	
 1CC9  89 16 24E4 R			mov word ptr [txt_inode_mtim_h]+6, dx
 1CCD  58				pop ax
 1CCE  E8 FE97				call proc_hex_double
 1CD1  A3 24DE R			mov word ptr [txt_inode_mtim_h], ax	
 1CD4  89 16 24E0 R			mov word ptr [txt_inode_mtim_h]+2, dx
 1CD8  58				pop ax
 1CD9  5A				pop dx
 1CDA  E8 F981				call convert_from_epoch
 1CDD  A1 2215 R			mov ax, word ptr [year]
 1CE0  BE 24F0 R			mov si, offset txt_inode_myear
					;mov cx, 4
 1CE3  B1 04				mov cl, 4
 1CE5  E8 FB99				call proc_bin_to_decimal
 1CE8  A1 2217 R			mov ax, word ptr [month]
 1CEB  BE 24ED R			mov si, offset txt_inode_mmonth
 1CEE  B1 02				mov cl, 2
 1CF0  E8 FB8E				call proc_bin_to_decimal
 1CF3  A1 2219 R			mov ax, word ptr [day]
 1CF6  BE 24EA R			mov si, offset txt_inode_mday
 1CF9  B1 02				mov cl, 2
 1CFB  E8 FB83				call proc_bin_to_decimal
 1CFE  A1 221B R			mov ax, word ptr [hour]
 1D01  BE 24F5 R			mov si, offset txt_inode_mhour
 1D04  B1 02				mov cl, 2
 1D06  E8 FB78				call proc_bin_to_decimal
 1D09  A1 221D R			mov ax, word ptr [minute]
 1D0C  BE 24F8 R			mov si, offset txt_inode_mminute
 1D0F  B1 02				mov cl, 2
 1D11  E8 FB6D				call proc_bin_to_decimal
 1D14  A1 221F R			mov ax, word ptr [second]
 1D17  BE 24FB R			mov si, offset txt_inode_msecond
 1D1A  B1 02				mov cl, 2
 1D1C  E8 FB62				call proc_bin_to_decimal
 1D1F  A1 21F4 R			mov ax, word ptr [inode_reserved]
 1D22  E8 FE43				call proc_hex_double 
 1D25  A3 2509 R			mov word ptr [txt_inode_reserved], ax	
 1D28  89 16 250B R			mov word ptr [txt_inode_reserved]+2, dx
 1D2C				@@:
 1D2C  BE 23D0 R			mov si, offset msg_inode_details	
 1D2F  E8 E53D				call UNIX_PRINTMSG
 1D32  C3				retn

 1D33				show_inode endp 


 1D33 00			PhysicalDriveNumber: db 0
 1D34 0000			FileHandle: dw 0

				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				;  messages
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 1D36				UNIX_Welcome:
 1D36  0D 0A			                db 0Dh, 0Ah
 1D38  52 65 74 72 6F 20	                db 'Retro UNIX 8086 v1 FS File Import/Export Utility'
       55 4E 49 58 20 38
       30 38 36 20 76 31
       20 46 53 20 46 69
       6C 65 20 49 6D 70
       6F 72 74 2F 45 78
       70 6F 72 74 20 55
       74 69 6C 69 74 79
 1D68  0D 0A					db 0Dh, 0Ah
 1D6A  55 4E 49 58 43 4F	                db 'UNIXCOPY by Erdogan TAN 2012 - [15/04/2022]'
       50 59 20 62 79 20
       45 72 64 6F 67 61
       6E 20 54 41 4E 20
       32 30 31 32 20 2D
       20 5B 31 35 2F 30
       34 2F 32 30 32 32
       5D
 1D95  0D 0A					db 0Dh, 0Ah
 1D97  28 54 79 70 65 20			db '(Type ', 27h,'?',27h,' to see valid commands)'
       27 3F 27 20 74 6F
       20 73 65 65 20 76
       61 6C 69 64 20 63
       6F 6D 6D 61 6E 64
       73 29
 1DB7  0D 0A			                db 0Dh,0Ah
 1DB9  0D 0A 00			                db 0Dh,0Ah, 0
 1DBC				usage:
 1DBC  55 73 61 67 65 3A	                db 'Usage: unixcopy [Floppy Drive or File Name] '
       20 75 6E 69 78 63
       6F 70 79 20 5B 46
       6C 6F 70 70 79 20
       44 72 69 76 65 20
       6F 72 20 46 69 6C
       65 20 4E 61 6D 65
       5D 20
 1DE8  0D 0A			                db 0Dh,0Ah
 1DEA  0D 0A			                db 0Dh,0Ah
 1DEC  46 6C 6F 70 70 79	                db "Floppy Drive names:"
       20 44 72 69 76 65
       20 6E 61 6D 65 73
       3A
 1DFF  0D 0A			                db 0Dh,0Ah
 1E01  0D 0A			                db 0Dh,0Ah
 1E03  66 64 30 20 20 20	                db "fd0    (Floppy Disk 1, A:)", 0Dh, 0Ah
       20 28 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 31 2C 20 41
       3A 29 0D 0A
 1E1F  66 64 31 20 20 20	                db "fd1    (Floppy Disk 2, B:)", 0Dh, 0Ah
       20 28 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 32 2C 20 42
       3A 29 0D 0A
 1E3B  0D 0A			      		db 0Dh,0Ah
 1E3D  46 6C 6F 70 70 79			db "Floppy Disk Image File name examples:"
       20 44 69 73 6B 20
       49 6D 61 67 65 20
       46 69 6C 65 20 6E
       61 6D 65 20 65 78
       61 6D 70 6C 65 73
       3A
 1E62  0D 0A			                db 0Dh,0Ah
 1E64  0D 0A			                db 0Dh,0Ah
 1E66  66 64 30 2E 69 6D	                db "fd0.img", 0Dh, 0Ah
       67 0D 0A
 1E6F  66 64 31 2E 69 6D	                db "fd1.img", 0Dh, 0Ah
       67 0D 0A
 1E78  72 75 6E 69 78 66	                db "runixfd.img", 0Dh, 0Ah
       64 2E 69 6D 67 0D
       0A
 1E85  00			                db 0
 1E86				unix_cdrv:
 1E86				UNIX_FD_Name:
 1E86  66 64			                db 'fd'
 1E88				UNIX_FD_Number:
 1E88  30 3A 00			                db '0:', 0
 1E8B 21			unix_img_cdir:	db '!'  ; 07/07/2015
 1E8C 2F			unix_cdir:	db '/'
 1E8D  0025 [					db 37 dup(0)
        00
       ]

 1EB2 0000			CDirOffset:	dw 0

 1EB4 3E			unix_prompt_char: db '>'

 1EB5 0000			CursorColumn: 	dw 0

 1EB7  004A [			CommandBuffer: 	db 74 dup(0)
        00
       ]

 1F01 00			program_exit: 	db 0

 1F02 0000			pdir: 		dw 0

 1F04 0D 0A			msg_arg:	db 0Dh, 0Ah ; 13/01/2012 (chmod)
 1F06 0000			arg: 		dw 0
 1F08  0000					dw 0 ; 13/01/2012

 1F0A				msg_yes_no:
 1F0A  28 59 65 73 2F 4E	                db '(Yes/No)? ', 0
       6F 29 3F 20 00

 1F15				msg_unix_drv_read_error:
 1F15  0D 0A			                db 0Dh, 0Ah
 1F17  44 72 69 76 65 20	                db "Drive not ready or read error!"
       6E 6F 74 20 72 65
       61 64 79 20 6F 72
       20 72 65 61 64 20
       65 72 72 6F 72 21
 1F35  0D 0A 00			                db 0Dh, 0Ah, 0

 1F38				msg_inv_file_name: ; 07/07/2015
 1F38  0D 0A					db 0dh, 0Ah
 1F3A  49 6E 76 61 6C 69	                db "Invalid file name !", 0Dh, 0Ah
       64 20 66 69 6C 65
       20 6E 61 6D 65 20
       21 0D 0A
 1F4F  28 46 69 6C 65 20	                db "(File name must fit for 8.3 DOS format) !"
       6E 61 6D 65 20 6D
       75 73 74 20 66 69
       74 20 66 6F 72 20
       38 2E 33 20 44 4F
       53 20 66 6F 72 6D
       61 74 29 20 21
 1F78  0D 0A 00			                db 0Dh, 0Ah, 0  

 1F7B				msg_file_not_found: ; 07/07/2015
 1F7B  0D 0A			               db 0Dh, 0Ah
 1F7D  46 69 6C 65 20 6E	               db "File not found !", 0Dh, 0Ah
       6F 74 20 66 6F 75
       6E 64 20 21 0D 0A
 1F8F  28 46 69 6C 65 20	               db "(File must be in current directory) !"
       6D 75 73 74 20 62
       65 20 69 6E 20 63
       75 72 72 65 6E 74
       20 64 69 72 65 63
       74 6F 72 79 29 20
       21
 1FB4  0D 0A 00			               db 0Dh, 0Ah, 0

 1FB7				msg_inv_image_file: ; 07/07/2015
 1FB7  0D 0A			               db 0Dh, 0Ah
 1FB9  49 6E 76 61 6C 69	               db "Invalid floppy disk image file !", 0Dh, 0Ah
       64 20 66 6C 6F 70
       70 79 20 64 69 73
       6B 20 69 6D 61 67
       65 20 66 69 6C 65
       20 21 0D 0A
 1FDB  28 46 69 6C 65 20	               db "(File size must be 1474560 bytes) !"
       73 69 7A 65 20 6D
       75 73 74 20 62 65
       20 31 34 37 34 35
       36 30 20 62 79 74
       65 73 29 20 21
 1FFE  0D 0A 00			               db 0Dh, 0Ah, 0

 2001				Msg_Not_Unix_FS:
 2001  0D 0A			                db 0Dh, 0Ah
 2003  44 72 69 76 65 20	                db "Drive has not got a Retro UNIX v1 FS !"
       68 61 73 20 6E 6F
       74 20 67 6F 74 20
       61 20 52 65 74 72
       6F 20 55 4E 49 58
       20 76 31 20 46 53
       20 21
 2029  0D 0A 00			                db 0Dh, 0Ah, 0

 202C				Msg_writing_file:
 202C  0D 0A			                db 0Dh, 0Ah
 202E  57 72 69 74 69 6E	                db "Writing file..."
       67 20 66 69 6C 65
       2E 2E 2E
 203D  00			                db 0

 203E				Msg_Removing_file:
 203E  0D 0A			                db 0Dh, 0Ah
 2040  44 65 6C 65 74 69	                db "Deleting file..."
       6E 67 20 66 69 6C
       65 2E 2E 2E
 2050  00			                db 0

 2051				Msg_DosFile_Name:
 2051  0D 0A			                db 0Dh, 0Ah
 2053  44 4F 53 20 46 69	                db "DOS File Name : ", 0
       6C 65 20 4E 61 6D
       65 20 3A 20 00

 2064				Msg_StartupFile_Name:
 2064  0D 0A			                db 0Dh, 0Ah
 2066  53 74 61 72 74 75	                db "Startup File Name : ", 0
       70 20 46 69 6C 65
       20 4E 61 6D 65 20
       3A 20 00

 207B 2E 2E 2E			Msg_3dot_OK:    db "..."
 207E				Msg_OK:
 207E  20 4F 4B 2E 0D 0A	                db ' OK.', 0Dh, 0Ah, 0
       00

 2085 20 59 45 53		msg_YES:        db ' YES'
 2089  00			                db 0
 208A 20 4E 4F			msg_NO:         db ' NO'
 208D  00			                db 0   
 208E				error_msg:
 208E  0D 0A					db 0Dh, 0Ah
 2090  45 72 72 6F 72 20			db 'Error !'
       21
 2097				UNIX_CRLF:
 2097  0D 0A 00			                db 0Dh, 0Ah, 0

 209A				msg_making_directory:
 209A  0D 0A			                db 0Dh, 0Ah
 209C  4D 61 6B 69 6E 67	                db "Making directory..."
       20 64 69 72 65 63
       74 6F 72 79 2E 2E
       2E
 20AF  00			                db 0

 20B0				msg_removing_directory:
 20B0  0D 0A			                db 0Dh, 0Ah
 20B2  52 65 6D 6F 76 69	                db "Removing directory..."
       6E 67 20 64 69 72
       65 63 74 6F 72 79
       2E 2E 2E
 20C7  00			                db 0

 20C8				msg_unix_drv_write_error:
 20C8  0D 0A			                db 0Dh, 0Ah
 20CA  44 72 69 76 65 20	                db 'Drive not ready or write error!'
       6E 6F 74 20 72 65
       61 64 79 20 6F 72
       20 77 72 69 74 65
       20 65 72 72 6F 72
       21
 20E9  0D 0A			                db 0Dh, 0Ah
 20EB  00			                db 0
 20EC				msg_Startup_File_Not_Exists:
 20EC  0D 0A			                db 0Dh, 0Ah
 20EE  53 74 61 72 74 75	                db 'Startup File is not configured yet ! '
       70 20 46 69 6C 65
       20 69 73 20 6E 6F
       74 20 63 6F 6E 66
       69 67 75 72 65 64
       20 79 65 74 20 21
       20
 2113  0D 0A 00			                db 0Dh, 0Ah, 0 

 2116				msg_sf_configuration_set_ok:
 2116  0D 0A					db 0Dh, 0Ah
 2118  53 74 61 72 74 75	                db "Startup file configuration SET is OK."
       70 20 66 69 6C 65
       20 63 6F 6E 66 69
       67 75 72 61 74 69
       6F 6E 20 53 45 54
       20 69 73 20 4F 4B
       2E
 213D  0D 0A 00			                db 0Dh, 0Ah, 0

 2140				msg_sf_configuration_reset_ok:
 2140  0D 0A					db 0Dh, 0Ah
 2142  53 74 61 72 74 75	                db "Startup file configuration RESET is OK."
       70 20 66 69 6C 65
       20 63 6F 6E 66 69
       67 75 72 61 74 69
       6F 6E 20 52 45 53
       45 54 20 69 73 20
       4F 4B 2E
 2169  0D 0A 00			                db 0Dh, 0Ah, 0

 216C				msg_overwrite_question1:
						; 1/12/2012
 216C  0D 0A					db 0Dh, 0Ah
 216E  44 6F 20 79 6F 75			db 'Do you want to overwrite '
       20 77 61 6E 74 20
       74 6F 20 6F 76 65
       72 77 72 69 74 65
       20
 2187  27					db 27h
 2188  00					db 0

 2189				msg_overwrite_question2: 
 2189  27					db 27h
 218A  20 66 69 6C 65 20			db ' file '
 2190  00					db 0		

 2191				msg_remove_question1:
						; 1/12/2012
 2191  0D 0A					db 0Dh, 0Ah
 2193  44 6F 20 79 6F 75			db 'Do you want to delete '
       20 77 61 6E 74 20
       74 6F 20 64 65 6C
       65 74 65 20
 21A9  27					db 27h
 21AA  00					db 0

 21AB				msg_remove_question2: 
 21AB  27					db 27h
 21AC  20 66 69 6C 65 20			db ' file '
 21B2  00					db 0
				align 2

				; 03/04/2022
				;RetryCount:	dw 0
 21B4 0000			i_count:	dw 0 ; inode count	

				; 07/07/2015
 21B6  000D [			img_file_name:  db 13 dup(0)
        00
       ]
 21C3  00				        db 0
 21C4 0000			img_file_handle: dw 0
				;img_file_pos:	dd 0 ; file (position) pointer
				;
 21C6				DirFileName:
 21C6  20					db 20h ; 06/01/2013
 21C7  0009 [			BOOT_FILE_NAME: db 9 dup(0)
        00
       ]

 21D0 00000000			uf_make_datetime: dd 0 ; 25/11/2012

 21D4 0000			uf_i_number: dw 0 ; 25/11/2012

 21D6				bootfile_inode: 
 21D6				inode:
 21D6 801E			inode_flgs:	dw 801Eh ; Flags (1000000000011110b)
 21D8 01			inode_nlks:	db 1	; number of links 
 21D9 00			inode_uid:	db 0	; user ID (0 = root)
 21DA 0000			inode_size:	dw 0	; file size
 21DC  0008 [			inode_dskp:	dw 8 dup (0) ; indirect or contents blocks
        0000
       ]
 21EC 00000000			inode_ctim:	dd 0	; creation date & time
 21F0 00000000			inode_mtim:	dd 0	; modification date & time
 21F4 0000			inode_reserved:	dw 0	; unused

 21F6 00			rw: db 0

 21F7 00			imod: db 0

 21F8				U:
 21F8 00			u_uid: db 0
 21F9 0029			u_cdir: dw ROOT_DIR_INODE_NUMBER
 21FB 0000			u_namep: dw 0
 21FD 0000			u_dirp: dw 0
 21FF 0000			u_base: dw 0
 2201 0000			u_off: dw 0
 2203 0000			u_count: dw 0
 2205 0000			u_nread: dw 0
 2207  000A [			u_dirbuf: db 10 dup(0)
        00
       ]

 2211 0000			ii: dw 0
 2213 0000			buff_s: dw 0

 2215 07B2			year: dw 1970
 2217 0001			month: dw 1
 2219 0001			day: dw 1
 221B 0000			hour: dw 0
 221D 0000			minute: dw 0
 221F 0000			second: dw 0

 2221				DMonth:
 2221  0000			dw 0
 2223  001F			dw 31
 2225  003B			dw 59
 2227  005A			dw 90
 2229  0078			dw 120
 222B  0097			dw 151
 222D  00B5			dw 181
 222F  00D4			dw 212
 2231  00F3			dw 243
 2233  0111			dw 273
 2235  0130			dw 304
 2237  014E			dw 334

				; 30/11/2012
				;imin: dd 0
				;ihrs: dd 0
				;iday: dw 0
				;lday: dw 0
				;qday: dw 0
				;iyrs: dw 0
				;jday: dw 0
				;mday: dw 0


				; 25/11/2012
 2239				str_inode_number:
 2239  0D 0A			                db 0Dh, 0Ah
 223B  53 74 61 72 74 75			db 'Startup File I-Number: ', 0
       70 20 46 69 6C 65
       20 49 2D 4E 75 6D
       62 65 72 3A 20 00
 2253				Decimal_i_no_str:		
 2253  0006 [					db 6 dup (0)
        00
       ]

 2259				Str_startup_file_size:
 2259  0D 0A			                db 0Dh, 0Ah
 225B  53 74 61 72 74 75	                db 'Startup File Size : ', 0
       70 20 46 69 6C 65
       20 53 69 7A 65 20
       3A 20 00
 2270				Str_Bytes:
 2270  20 62 79 74 65 73	                db ' bytes', 0
       00

 2277  0006 [			Decimal_size_str: db 6 dup (0)
        00
       ]

 227D				Str_sf_date_time:
 227D  0D 0A			                db 0Dh, 0Ah
 227F  43 72 65 61 74 69	                db 'Creating Date & Time    : '
       6E 67 20 44 61 74
       65 20 26 20 54 69
       6D 65 20 20 20 20
       3A 20
 2299 30 30			Str_cday:	db '00'
 229B  2F					db '/'
 229C 30 30			Str_cmonth:	db '00'
 229E  2F			                db '/'
 229F 30 30 30 30		Str_cyear:	db '0000'
 22A3  20 20			                db 20h, 20h
 22A5 30 30			Str_chour: 	db '00'
 22A7  3A			                db ':'
 22A8 30 30			Str_cminute:  	db '00'
 22AA  3A			                db ':'
 22AB 30 30			Str_csecond:  	db '00'
 22AD  0D 0A			                db 0Dh, 0Ah
 22AF  4C 61 73 74 20 4D	                db 'Last Modif. Date & Time : '
       6F 64 69 66 2E 20
       44 61 74 65 20 26
       20 54 69 6D 65 20
       3A 20
 22C9 30 30			Str_mday:	db '00'
 22CB  2F					db '/'
 22CC 30 30			Str_mmonth:	db '00'
 22CE  2F			                db '/'
 22CF 30 30 30 30		Str_myear:	db '0000'
 22D3  20 20			                db 20h, 20h
 22D5 30 30			Str_mhour: 	db '00'
 22D7  3A			                db ':'
 22D8 30 30			Str_mminute:  	db '00'
 22DA  3A			                db ':'
 22DB 30 30			Str_msecond:  	db '00'
 22DD  0D 0A 00			                db 0Dh, 0Ah, 0

				;23/02/2013
 22E0 FF			list_count: db 0FFh
				; 20/01/2013
 22E1 00			ls_option: db 0
				; 21/01/2013
 22E2  000A [			dec_num: db 10 dup(20h) ; 03/02/2013, 3 bytes -> 10 bytes
        20
       ]
 22EC  00			db 0

				;30/12/2012
 22ED				DotDot:
 22ED  2E			db '.'
 22EE				Dot:
 22EE  2E			db '.'
 22EF  00			db 0

				;16/02/2013
 22F0				msgVolume_Info:
 22F0  0D 0A					db 0Dh, 0Ah
 22F2  52 65 74 72 6F 20			db "Retro UNIX 8086 v1 (RUFS) File System", 0Dh, 0Ah
       55 4E 49 58 20 38
       30 38 36 20 76 31
       20 28 52 55 46 53
       29 20 46 69 6C 65
       20 53 79 73 74 65
       6D 0D 0A
 2319  62 79 20 45 72 64			db "by Erdogan Tan (2013-2022)"
       6F 67 61 6E 20 54
       61 6E 20 28 32 30
       31 33 2D 32 30 32
       32 29
 2333  0D 0A 0D 0A				db 0Dh, 0Ah, 0Dh, 0Ah
 2337  56 6F 6C 75 6D 65			db "Volume Serial No: "
       20 53 65 72 69 61
       6C 20 4E 6F 3A 20
 2349				msgVolume_Serial:
 2349  30 30 30 30 2D 30			db "0000-0000h"
       30 30 30 68
 2353  0D 0A 00					db 0Dh, 0Ah, 0
 2356 56 6F 6C 75 6D 65		msgVol_Size_Hdr:db "Volume Size : ", 0
       20 53 69 7A 65 20
       3A 20 00
 2365				msgVolume_Size:	; db "0000" 
 2365  20 62 6C 6F 63 6B			db " blocks", 0Dh, 0Ah, 0
       73 0D 0A 00
 236F 46 72 65 65 20 43		msgVol_freeblocks_Hdr:db "Free Count  : ", 0
       6F 75 6E 74 20 20
       3A 20 00
 237E				msgVolume_freeblocks : ;db "0000" 
 237E  20 62 6C 6F 63 6B			db " blocks", 0Dh, 0Ah, 0		 
       73 0D 0A 00
 2388				msgVol_icount_Hdr:
 2388  23 20 6F 66 20 49			db "# of Inodes : ", 0
       6E 6F 64 65 73 20
       3A 20 00
 2397				msgVolume_icount:	; db "0000" 
 2397  2B 34 30 0D 0A 00			db "+40", 0Dh, 0Ah, 0
 239D 46 72 65 65 20 49		msgVol_free_icount_Hdr:db 'Free Inodes : ', 0
       6E 6F 64 65 73 20
       3A 20 00
 23AC				msgVolume_free_icount : ;db "0000" 
 23AC  0D 0A 00					db 0Dh, 0Ah, 0

 23AF				NotFound_msg:
 23AF  0D 0A					db 0Dh, 0Ah
 23B1  4E 6F 74 20 66 6F			db "Not found !"
       75 6E 64 20 21
 23BC  0D 0A 00			                db 0Dh, 0Ah, 0
 23BF				msgINumber:
 23BF  0D 0A					db 0Dh, 0Ah
 23C1  49 6E 6F 64 65 20			db "Inode Number :", 0
       4E 75 6D 62 65 72
       20 3A 00

 23D0				msg_inode_details:
 23D0  0D 0A					db 0Dh, 0Ah
 23D2  55 4E 49 58 20 56			db "UNIX V1 I-NODE STRUCTURE DETAILS OF I-NODE "
       31 20 49 2D 4E 4F
       44 45 20 53 54 52
       55 43 54 55 52 45
       20 44 45 54 41 49
       4C 53 20 4F 46 20
       49 2D 4E 4F 44 45
       20
 23FD				txt_inode_number:
 23FD  30 30 30 30 68				db "0000h"
 2402  0D 0A 0D 0A				db 0Dh, 0Ah, 0Dh, 0Ah
 2406  46 6C 61 67 73 20			db "Flags : "
       3A 20
 240E				txt_inode_flags_h:
 240E  30 30 30 30 68				db "0000h"
 2413  20 20					db 20h, 20h
 2415  5B					db "["
 2416				txt_inode_flags_b:
 2416  30 30 30 30 30 30			db "0000000000000000b"
       30 30 30 30 30 30
       30 30 30 30 62
 2427  5D					db "]"
 2428  0D 0A					db 0Dh, 0Ah
 242A  23 20 6F 66 20 4C			db "# of Links : "
       69 6E 6B 73 20 3A
       20
 2437				txt_inode_nlks:
 2437  30 30 68					db "00h"
 243A  0D 0A					db 0Dh, 0Ah
 243C  55 73 65 72 20 49			db "User ID : "
       44 20 3A 20
 2446				txt_inode_uid:
 2446  30 30 68					db "00h"
 2449  0D 0A					db 0Dh, 0Ah
 244B  53 69 7A 65 20 3A			db "Size : "
       20
 2452				txt_inode_size:
 2452  30 30 30 30 68				db "0000h"
 2457  0D 0A					db 0Dh, 0Ah
 2459  44 69 73 6B 20 42			db "Disk Blocks : "
       6C 6F 63 6B 73 20
       3A 20
 2467				txt_inode_dskp:		
 2467  30 30 30 30 68 20			db "0000h 0000h 0000h 0000h "
       30 30 30 30 68 20
       30 30 30 30 68 20
       30 30 30 30 68 20
 247F  30 30 30 30 68 20			db "0000h 0000h 0000h 0000h"
       30 30 30 30 68 20
       30 30 30 30 68 20
       30 30 30 30 68
 2496  0D 0A					db 0Dh, 0Ah
 2498  43 72 65 61 74 69			db "Creation Time : "
       6F 6E 20 54 69 6D
       65 20 3A 20
 24A8				txt_inode_ctim_h:
 24A8  30 30 30 30 30 30			db "00000000h"
       30 30 68
 24B1  20 20					db 20h, 20h
 24B3  5B					db "["
 24B4				txt_inode_cday:
 24B4  30 30					db "00"
 24B6  2F					db "/"
 24B7				txt_inode_cmonth:
 24B7  30 30					db "00"
 24B9  2F					db "/"
 24BA				txt_inode_cyear:
 24BA  30 30 30 30				db "0000"
 24BE  2C					db ","
 24BF				txt_inode_chour:
 24BF  30 30					db "00"
 24C1  3A					db ":"
 24C2				txt_inode_cminute:
 24C2  30 30					db "00"
 24C4  3A					db ":"
 24C5				txt_inode_csecond:		
 24C5  30 30					db "00"
 24C7  5D					db "]"
 24C8  0D 0A					db 0Dh, 0Ah
 24CA  4D 6F 64 69 66 69			db "Modification Time : "
       63 61 74 69 6F 6E
       20 54 69 6D 65 20
       3A 20
 24DE				txt_inode_mtim_h:
 24DE  30 30 30 30 30 30			db "00000000h"
       30 30 68
 24E7  20 20					db 20h, 20h
 24E9  5B					db "["
 24EA				txt_inode_mday:		
 24EA  30 30					db "00"
 24EC  2F					db "/"
 24ED				txt_inode_mmonth:
 24ED  30 30					db "00"
 24EF  2F					db "/"
 24F0				txt_inode_myear:
 24F0  30 30 30 30				db "0000"
 24F4  2C					db ","
 24F5				txt_inode_mhour:
 24F5  30 30					db "00"
 24F7  3A					db ":"
 24F8				txt_inode_mminute:
 24F8  30 30					db "00"
 24FA  3A					db ":"
 24FB				txt_inode_msecond:		
 24FB  30 30					db "00"
 24FD  5D					db "]"
 24FE  0D 0A					db 0Dh, 0Ah
 2500  55 6E 75 73 65 64			db "Unused : "
       20 3A 20
 2509				txt_inode_reserved:		
 2509  30 30 30 30 68				db "0000h"
 250E  0D 0A 00					db 0Dh, 0Ah, 0

 2511				UNIXCOPY_Commands: ; 23/02/2013
 2511  0D 0A			db 0Dh, 0Ah
 2513  55 4E 49 58 43 4F	db "UNIXCOPY COMMANDS      [", 27h, "/", 27h, " means alternative, ",  27h, "<...>", 27h, " means command argument]", 0Dh, 0Ah
       50 59 20 43 4F 4D
       4D 41 4E 44 53 20
       20 20 20 20 20 5B
       27 2F 27 20 6D 65
       61 6E 73 20 61 6C
       74 65 72 6E 61 74
       69 76 65 2C 20 27
       3C 2E 2E 2E 3E 27
       20 6D 65 61 6E 73
       20 63 6F 6D 6D 61
       6E 64 20 61 72 67
       75 6D 65 6E 74 5D
       0D 0A
 2563  64 69 72 20 3C 64	db "dir <directory name>   : print directory entries without details", 0Dh, 0Ah 
       69 72 65 63 74 6F
       72 79 20 6E 61 6D
       65 3E 20 20 20 3A
       20 70 72 69 6E 74
       20 64 69 72 65 63
       74 6F 72 79 20 65
       6E 74 72 69 65 73
       20 77 69 74 68 6F
       75 74 20 64 65 74
       61 69 6C 73 0D 0A
 25A5  6C 73 20 3C 64 69	db "ls <directory name>    : print directory entries, ", 27h, "/",  27h," means entry is directory", 0Dh, 0Ah
       72 65 63 74 6F 72
       79 20 6E 61 6D 65
       3E 20 20 20 20 3A
       20 70 72 69 6E 74
       20 64 69 72 65 63
       74 6F 72 79 20 65
       6E 74 72 69 65 73
       2C 20 27 2F 27 20
       6D 65 61 6E 73 20
       65 6E 74 72 79 20
       69 73 20 64 69 72
       65 63 74 6F 72 79
       0D 0A
 25F5  6C 73 20 2D 6C 20	db "ls -l <directory name> : print directory entries with details", 0Dh, 0Ah
       3C 64 69 72 65 63
       74 6F 72 79 20 6E
       61 6D 65 3E 20 3A
       20 70 72 69 6E 74
       20 64 69 72 65 63
       74 6F 72 79 20 65
       6E 74 72 69 65 73
       20 77 69 74 68 20
       64 65 74 61 69 6C
       73 0D 0A
 2634  63 68 64 69 72 2F	db "chdir/cd <directory name> : change directory", 0Dh, 0Ah
       63 64 20 3C 64 69
       72 65 63 74 6F 72
       79 20 6E 61 6D 65
       3E 20 3A 20 63 68
       61 6E 67 65 20 64
       69 72 65 63 74 6F
       72 79 0D 0A
 2662  66 72 6F 6D 64 6F	db "fromdos <dos file name> <unix file name> : copy/import dos file to unix fs", 0Dh, 0Ah
       73 20 3C 64 6F 73
       20 66 69 6C 65 20
       6E 61 6D 65 3E 20
       3C 75 6E 69 78 20
       66 69 6C 65 20 6E
       61 6D 65 3E 20 3A
       20 63 6F 70 79 2F
       69 6D 70 6F 72 74
       20 64 6F 73 20 66
       69 6C 65 20 74 6F
       20 75 6E 69 78 20
       66 73 0D 0A
 26AE  74 6F 64 6F 73 20	db "todos <unix file name> <dos file name>   : copy/export unix file to dos fs", 0Dh, 0Ah  
       3C 75 6E 69 78 20
       66 69 6C 65 20 6E
       61 6D 65 3E 20 3C
       64 6F 73 20 66 69
       6C 65 20 6E 61 6D
       65 3E 20 20 20 3A
       20 63 6F 70 79 2F
       65 78 70 6F 72 74
       20 75 6E 69 78 20
       66 69 6C 65 20 74
       6F 20 64 6F 73 20
       66 73 0D 0A
 26FA  72 6D 20 3C 66 69	db "rm <file name>         : remove/delete/unlink file", 0Dh, 0Ah 
       6C 65 20 6E 61 6D
       65 3E 20 20 20 20
       20 20 20 20 20 3A
       20 72 65 6D 6F 76
       65 2F 64 65 6C 65
       74 65 2F 75 6E 6C
       69 6E 6B 20 66 69
       6C 65 0D 0A
 272E  6D 6B 64 69 72 20	db "mkdir <directory name> : make new sub directory", 0Dh, 0Ah
       3C 64 69 72 65 63
       74 6F 72 79 20 6E
       61 6D 65 3E 20 3A
       20 6D 61 6B 65 20
       6E 65 77 20 73 75
       62 20 64 69 72 65
       63 74 6F 72 79 0D
       0A
 275F  72 6D 64 69 72 20	db "rmdir <directory name> : remove/delete sub directory", 0Dh, 0Ah
       3C 64 69 72 65 63
       74 6F 72 79 20 6E
       61 6D 65 3E 20 3A
       20 72 65 6D 6F 76
       65 2F 64 65 6C 65
       74 65 20 73 75 62
       20 64 69 72 65 63
       74 6F 72 79 0D 0A
 2795  6C 69 6E 6B 20 3C	db "link <source file name> <destination file name> : link file to file", 0Dh, 0Ah 
       73 6F 75 72 63 65
       20 66 69 6C 65 20
       6E 61 6D 65 3E 20
       3C 64 65 73 74 69
       6E 61 74 69 6F 6E
       20 66 69 6C 65 20
       6E 61 6D 65 3E 20
       3A 20 6C 69 6E 6B
       20 66 69 6C 65 20
       74 6F 20 66 69 6C
       65 0D 0A
 27DA  65 78 69 74 20 20	db "exit                   : return to dos", 0Dh, 0Ah
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 3A
       20 72 65 74 75 72
       6E 20 74 6F 20 64
       6F 73 0D 0A
 2802  73 68 6F 77 20 3C	db "show <file name>       : show file, print/display file contents", 0Dh, 0Ah
       66 69 6C 65 20 6E
       61 6D 65 3E 20 20
       20 20 20 20 20 3A
       20 73 68 6F 77 20
       66 69 6C 65 2C 20
       70 72 69 6E 74 2F
       64 69 73 70 6C 61
       79 20 66 69 6C 65
       20 63 6F 6E 74 65
       6E 74 73 0D 0A
 2843  69 6E 6F 64 65 2F	db "inode/iget <inode number> : print inode details for (decimal) inode number", 0Dh, 0Ah
       69 67 65 74 20 3C
       69 6E 6F 64 65 20
       6E 75 6D 62 65 72
       3E 20 3A 20 70 72
       69 6E 74 20 69 6E
       6F 64 65 20 64 65
       74 61 69 6C 73 20
       66 6F 72 20 28 64
       65 63 69 6D 61 6C
       29 20 69 6E 6F 64
       65 20 6E 75 6D 62
       65 72 0D 0A
 288F  63 68 6D 6F 64 20	db "chmod <mode> <file name>  : change file mode (according to octal number)", 0Dh, 0Ah
       3C 6D 6F 64 65 3E
       20 3C 66 69 6C 65
       20 6E 61 6D 65 3E
       20 20 3A 20 63 68
       61 6E 67 65 20 66
       69 6C 65 20 6D 6F
       64 65 20 28 61 63
       63 6F 72 64 69 6E
       67 20 74 6F 20 6F
       63 74 61 6C 20 6E
       75 6D 62 65 72 29
       0D 0A
 28D9  63 68 6F 77 6E 20	db "chown <owner> <file name> : change file's owner (according to decimal number)", 0Dh, 0Ah 
       3C 6F 77 6E 65 72
       3E 20 3C 66 69 6C
       65 20 6E 61 6D 65
       3E 20 3A 20 63 68
       61 6E 67 65 20 66
       69 6C 65 27 73 20
       6F 77 6E 65 72 20
       28 61 63 63 6F 72
       64 69 6E 67 20 74
       6F 20 64 65 63 69
       6D 61 6C 20 6E 75
       6D 62 65 72 29 0D
       0A
 2928  6E 61 6D 65 69 20	db "namei <file name>      : return/print inode number of file (as decimal)", 0Dh, 0Ah 
       3C 66 69 6C 65 20
       6E 61 6D 65 3E 20
       20 20 20 20 20 3A
       20 72 65 74 75 72
       6E 2F 70 72 69 6E
       74 20 69 6E 6F 64
       65 20 6E 75 6D 62
       65 72 20 6F 66 20
       66 69 6C 65 20 28
       61 73 20 64 65 63
       69 6D 61 6C 29 0D
       0A
 2971  66 73 2F 76 6F 6C	db "fs/volume              : print (current) unix fs (super block) info", 0Dh, 0Ah
       75 6D 65 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 3A
       20 70 72 69 6E 74
       20 28 63 75 72 72
       65 6E 74 29 20 75
       6E 69 78 20 66 73
       20 28 73 75 70 65
       72 20 62 6C 6F 63
       6B 29 20 69 6E 66
       6F 0D 0A
 29B6  62 6F 6F 74 66 69	db "bootfile <file name>   : select/configure file as startup/boot file", 0Dh, 0Ah
       6C 65 20 3C 66 69
       6C 65 20 6E 61 6D
       65 3E 20 20 20 3A
       20 73 65 6C 65 63
       74 2F 63 6F 6E 66
       69 67 75 72 65 20
       66 69 6C 65 20 61
       73 20 73 74 61 72
       74 75 70 2F 62 6F
       6F 74 20 66 69 6C
       65 0D 0A
 29FB  6E 6F 62 6F 6F 74	db "nobootfile             : reset/cancel bootfile configuration", 0Dh, 0Ah
       66 69 6C 65 20 20
       20 20 20 20 20 20
       20 20 20 20 20 3A
       20 72 65 73 65 74
       2F 63 61 6E 63 65
       6C 20 62 6F 6F 74
       66 69 6C 65 20 63
       6F 6E 66 69 67 75
       72 61 74 69 6F 6E
       0D 0A
 2A39  3F 2F 68 65 6C 70	db "?/help                 : print/display UNIXCOPY commands summary (as above)", 0Dh, 0Ah, 0
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 3A
       20 70 72 69 6E 74
       2F 64 69 73 70 6C
       61 79 20 55 4E 49
       58 43 4F 50 59 20
       63 6F 6D 6D 61 6E
       64 73 20 73 75 6D
       6D 61 72 79 20 28
       61 73 20 61 62 6F
       76 65 29 0D 0A 00

				align 16

				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				;  buffers
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 2A90  0200 [			BSBUFFER:	db 512 dup(0)
        00
       ]
				; superblock
 2C90  0200 [			systm: 		db 512 dup(0)
        00
       ]
 2E90  0200 [			ReadBUFFER:     db 512 dup(0)
        00
       ]
 3090  0200 [			WriteBUFFER:    db 512 dup(0)
        00
       ]


 3290 = 0001322C		SizeOfFile      equ $-100

				               
 3290				UNIXCOPY  ends

				          end  START_CODE
Microsoft (R) Macro Assembler Version 6.14.8444		    04/15/22 15:20:05
unixcopy.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

UNIXCOPY . . . . . . . . . . . .	16 Bit	 3290	  Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

UNIX_PRINTMSG  . . . . . . . . .	P Near	 026F	  UNIXCOPY	Length= 000F Private
anyi . . . . . . . . . . . . . .	P Near	 18D1	  UNIXCOPY	Length= 0014 Private
b_clear  . . . . . . . . . . . .	P Near	 13A9	  UNIXCOPY	Length= 0016 Private
chmode . . . . . . . . . . . . .	P Near	 1975	  UNIXCOPY	Length= 006A Private
chowner  . . . . . . . . . . . .	P Near	 19DF	  UNIXCOPY	Length= 0074 Private
command_interpreter  . . . . . .	P Near	 0397	  UNIXCOPY	Length= 08B3 Private
convert_from_epoch . . . . . . .	P Near	 165E	  UNIXCOPY	Length= 007C Private
dsk_rd . . . . . . . . . . . . .	P Near	 1218	  UNIXCOPY	Length= 003C Private
dsk_wr . . . . . . . . . . . . .	P Near	 151C	  UNIXCOPY	Length= 002F Private
epoch  . . . . . . . . . . . . .	P Near	 156F	  UNIXCOPY	Length= 00EF Private
find_bfn . . . . . . . . . . . .	P Near	 174C	  UNIXCOPY	Length= 003D Private
free . . . . . . . . . . . . . .	P Near	 1956	  UNIXCOPY	Length= 001F Private
i_calc . . . . . . . . . . . . .	P Near	 11D5	  UNIXCOPY	Length= 0043 Private
i_get  . . . . . . . . . . . . .	P Near	 11A3	  UNIXCOPY	Length= 0032 Private
image_file_rd  . . . . . . . . .	P Near	 1254	  UNIXCOPY	Length= 002C Private
image_file_wr  . . . . . . . . .	P Near	 154B	  UNIXCOPY	Length= 0024 Private
imap . . . . . . . . . . . . . .	P Near	 18E5	  UNIXCOPY	Length= 0020 Private
itrunc . . . . . . . . . . . . .	P Near	 1905	  UNIXCOPY	Length= 0051 Private
m_get  . . . . . . . . . . . . .	P Near	 1280	  UNIXCOPY	Length= 00A1 Private
mak_nod  . . . . . . . . . . . .	P Near	 13BF	  UNIXCOPY	Length= 0096 Private
make_directory . . . . . . . . .	P Near	 0ED9	  UNIXCOPY	Length= 003E Private
mk_dir . . . . . . . . . . . . .	P Near	 1455	  UNIXCOPY	Length= 0040 Private
name_i . . . . . . . . . . . . .	P Near	 109F	  UNIXCOPY	Length= 0097 Private
print_decimal_number . . . . . .	P Near	 1A53	  UNIXCOPY	Length= 004B Private
print_directory_list . . . . . .	P Near	 0CC6	  UNIXCOPY	Length= 01F9 Private
print_volume_info  . . . . . . .	P Near	 1A9E	  UNIXCOPY	Length= 00CA Private
proc_bin_to_decimal  . . . . . .	P Near	 1881	  UNIXCOPY	Length= 0023 Private
proc_display_startupfile_info  .	P Near	 1789	  UNIXCOPY	Length= 00F8 Private
proc_div32 . . . . . . . . . . .	P Near	 16EE	  UNIXCOPY	Length= 000D Private
proc_hex_double  . . . . . . . .	P Near	 1B68	  UNIXCOPY	Length= 0039 Private
proc_mul32 . . . . . . . . . . .	P Near	 16DA	  UNIXCOPY	Length= 0014 Private
proc_rw_char . . . . . . . . . .	P Near	 0310	  UNIXCOPY	Length= 0087 Private
proc_start . . . . . . . . . . .	P Near	 0100	  UNIXCOPY	Length= 016F Private
read_i . . . . . . . . . . . . .	P Near	 1136	  UNIXCOPY	Length= 006D Private
remove_directory . . . . . . . .	P Near	 0F65	  UNIXCOPY	Length= 00A0 Private
sb_alloc . . . . . . . . . . . .	P Near	 1321	  UNIXCOPY	Length= 004D Private
set_imod . . . . . . . . . . . .	P Near	 136E	  UNIXCOPY	Length= 003B Private
show_file  . . . . . . . . . . .	P Near	 1005	  UNIXCOPY	Length= 009A Private
show_inode . . . . . . . . . . .	P Near	 1BA1	  UNIXCOPY	Length= 0192 Private
sync . . . . . . . . . . . . . .	P Near	 16FB	  UNIXCOPY	Length= 0051 Private
sys_chdir  . . . . . . . . . . .	P Near	 0EBF	  UNIXCOPY	Length= 001A Private
sys_mkdir  . . . . . . . . . . .	P Near	 0F17	  UNIXCOPY	Length= 004E Private
unix_prompt  . . . . . . . . . .	P Near	 027E	  UNIXCOPY	Length= 0092 Private
unlink . . . . . . . . . . . . .	P Near	 18A4	  UNIXCOPY	Length= 002D Private
update_cdir_string . . . . . . .	P Near	 0C4A	  UNIXCOPY	Length= 007C Private
write_i  . . . . . . . . . . . .	P Near	 1495	  UNIXCOPY	Length= 0087 Private


Symbols:

                N a m e                 Type     Value    Attr

BOOT_FILE_NAME . . . . . . . . .	L Near	 21C7	  UNIXCOPY	
BSBUFFER . . . . . . . . . . . .	L Near	 2A90	  UNIXCOPY	
CDirOffset . . . . . . . . . . .	L Near	 1EB2	  UNIXCOPY	
CommandBuffer  . . . . . . . . .	L Near	 1EB7	  UNIXCOPY	
CursorColumn . . . . . . . . . .	L Near	 1EB5	  UNIXCOPY	
DMonth . . . . . . . . . . . . .	L Near	 2221	  UNIXCOPY	
DTA_Attrib . . . . . . . . . . .	Number	 0095h	 
DTA_Date . . . . . . . . . . . .	Number	 0098h	 
DTA_FileName . . . . . . . . . .	Number	 009Eh	 
DTA_FileSize . . . . . . . . . .	Number	 009Ah	 
DTA_Time . . . . . . . . . . . .	Number	 0096h	 
Decimal_i_no_str . . . . . . . .	L Near	 2253	  UNIXCOPY	
Decimal_size_str . . . . . . . .	L Near	 2277	  UNIXCOPY	
DirFileName  . . . . . . . . . .	L Near	 21C6	  UNIXCOPY	
DotDot . . . . . . . . . . . . .	L Near	 22ED	  UNIXCOPY	
Dot  . . . . . . . . . . . . . .	L Near	 22EE	  UNIXCOPY	
FileHandle . . . . . . . . . . .	L Near	 1D34	  UNIXCOPY	
Msg_3dot_OK  . . . . . . . . . .	L Near	 207B	  UNIXCOPY	
Msg_DosFile_Name . . . . . . . .	L Near	 2051	  UNIXCOPY	
Msg_Not_Unix_FS  . . . . . . . .	L Near	 2001	  UNIXCOPY	
Msg_OK . . . . . . . . . . . . .	L Near	 207E	  UNIXCOPY	
Msg_Removing_file  . . . . . . .	L Near	 203E	  UNIXCOPY	
Msg_StartupFile_Name . . . . . .	L Near	 2064	  UNIXCOPY	
Msg_writing_file . . . . . . . .	L Near	 202C	  UNIXCOPY	
NotFound_msg . . . . . . . . . .	L Near	 23AF	  UNIXCOPY	
PhysicalDriveNumber  . . . . . .	L Near	 1D33	  UNIXCOPY	
ROOT_DIR_INODE_NUMBER  . . . . .	Number	 0029h	 
ReadBUFFER . . . . . . . . . . .	L Near	 2E90	  UNIXCOPY	
START_CODE . . . . . . . . . . .	L Near	 0100	  UNIXCOPY	
SizeOfFile . . . . . . . . . . .	Number	 0001322Ch   
Str_Bytes  . . . . . . . . . . .	L Near	 2270	  UNIXCOPY	
Str_cday . . . . . . . . . . . .	L Near	 2299	  UNIXCOPY	
Str_chour  . . . . . . . . . . .	L Near	 22A5	  UNIXCOPY	
Str_cminute  . . . . . . . . . .	L Near	 22A8	  UNIXCOPY	
Str_cmonth . . . . . . . . . . .	L Near	 229C	  UNIXCOPY	
Str_csecond  . . . . . . . . . .	L Near	 22AB	  UNIXCOPY	
Str_cyear  . . . . . . . . . . .	L Near	 229F	  UNIXCOPY	
Str_mday . . . . . . . . . . . .	L Near	 22C9	  UNIXCOPY	
Str_mhour  . . . . . . . . . . .	L Near	 22D5	  UNIXCOPY	
Str_mminute  . . . . . . . . . .	L Near	 22D8	  UNIXCOPY	
Str_mmonth . . . . . . . . . . .	L Near	 22CC	  UNIXCOPY	
Str_msecond  . . . . . . . . . .	L Near	 22DB	  UNIXCOPY	
Str_myear  . . . . . . . . . . .	L Near	 22CF	  UNIXCOPY	
Str_sf_date_time . . . . . . . .	L Near	 227D	  UNIXCOPY	
Str_startup_file_size  . . . . .	L Near	 2259	  UNIXCOPY	
UNIXCOPY_Commands  . . . . . . .	L Near	 2511	  UNIXCOPY	
UNIX_CRLF  . . . . . . . . . . .	L Near	 2097	  UNIXCOPY	
UNIX_FD_Name . . . . . . . . . .	L Near	 1E86	  UNIXCOPY	
UNIX_FD_Number . . . . . . . . .	L Near	 1E88	  UNIXCOPY	
UNIX_PRINTMSG_LOOP . . . . . . .	L Near	 026F	  UNIXCOPY	
UNIX_PRINTMSG_OK . . . . . . . .	L Near	 027D	  UNIXCOPY	
UNIX_Welcome . . . . . . . . . .	L Near	 1D36	  UNIXCOPY	
U  . . . . . . . . . . . . . . .	L Near	 21F8	  UNIXCOPY	
WriteBUFFER  . . . . . . . . . .	L Near	 3090	  UNIXCOPY	
alloc_1  . . . . . . . . . . . .	L Near	 1325	  UNIXCOPY	
alloc_2  . . . . . . . . . . . .	L Near	 1331	  UNIXCOPY	
alloc_3  . . . . . . . . . . . .	L Near	 1345	  UNIXCOPY	
alloc_4  . . . . . . . . . . . .	L Near	 134C	  UNIXCOPY	
alloc_5  . . . . . . . . . . . .	L Near	 1368	  UNIXCOPY	
alloc_6  . . . . . . . . . . . .	L Near	 136C	  UNIXCOPY	
alloc_7  . . . . . . . . . . . .	L Near	 136C	  UNIXCOPY	
anyi_1 . . . . . . . . . . . . .	L Near	 18D1	  UNIXCOPY	
arg  . . . . . . . . . . . . . .	L Near	 1F06	  UNIXCOPY	
bootfile_inode . . . . . . . . .	L Near	 21D6	  UNIXCOPY	
bsDriveNumber  . . . . . . . . .	Number	 000Ch	 
bsFDSign . . . . . . . . . . . .	Number	 000Ah	 
bsFSystemID  . . . . . . . . . .	Number	 0002h	 
bsHeads  . . . . . . . . . . . .	Number	 000Fh	 
bsInfoEndsign  . . . . . . . . .	Number	 0014h	 
bsReserved . . . . . . . . . . .	Number	 000Dh	 
bsSecPerTrack  . . . . . . . . .	Number	 000Eh	 
bsTracks . . . . . . . . . . . .	Number	 0010h	 
bsVolumeSerial . . . . . . . . .	Number	 0006h	 
bs_bf_inode_number . . . . . . .	Number	 0012h	 
buff_s . . . . . . . . . . . . .	L Near	 2213	  UNIXCOPY	
char_return  . . . . . . . . . .	L Near	 035F	  UNIXCOPY	
chmode_1 . . . . . . . . . . . .	L Near	 197A	  UNIXCOPY	
chmode_2 . . . . . . . . . . . .	L Near	 1983	  UNIXCOPY	
chmode_3 . . . . . . . . . . . .	L Near	 199B	  UNIXCOPY	
chmode_4 . . . . . . . . . . . .	L Near	 19A1	  UNIXCOPY	
chmode_5 . . . . . . . . . . . .	L Near	 19A4	  UNIXCOPY	
chmode_6 . . . . . . . . . . . .	L Near	 19AF	  UNIXCOPY	
chmode_7 . . . . . . . . . . . .	L Near	 19D7	  UNIXCOPY	
chmode_8 . . . . . . . . . . . .	L Near	 198D	  UNIXCOPY	
chmode_retn  . . . . . . . . . .	L Near	 198C	  UNIXCOPY	
chmode_stc_retn  . . . . . . . .	L Near	 198B	  UNIXCOPY	
chowner_1  . . . . . . . . . . .	L Near	 19ED	  UNIXCOPY	
chowner_2  . . . . . . . . . . .	L Near	 19F8	  UNIXCOPY	
chowner_3  . . . . . . . . . . .	L Near	 1A02	  UNIXCOPY	
chowner_4  . . . . . . . . . . .	L Near	 1A0A	  UNIXCOPY	
chowner_5  . . . . . . . . . . .	L Near	 1A16	  UNIXCOPY	
chowner_6  . . . . . . . . . . .	L Near	 1A1E	  UNIXCOPY	
chowner_7  . . . . . . . . . . .	L Near	 1A23	  UNIXCOPY	
chowner_8  . . . . . . . . . . .	L Near	 1A28	  UNIXCOPY	
chowner_9  . . . . . . . . . . .	L Near	 1A3C	  UNIXCOPY	
chowner_retn . . . . . . . . . .	L Near	 1A52	  UNIXCOPY	
chowner_stc_retn . . . . . . . .	L Near	 1A14	  UNIXCOPY	
ci_? . . . . . . . . . . . . . .	L Near	 04A9	  UNIXCOPY	
ci_bf_namei  . . . . . . . . . .	L Near	 0BCD	  UNIXCOPY	
ci_cd_getarg . . . . . . . . . .	L Near	 04D0	  UNIXCOPY	
ci_chmod_getarg  . . . . . . . .	L Near	 0500	  UNIXCOPY	
ci_chown_getarg  . . . . . . . .	L Near	 0534	  UNIXCOPY	
ci_chown_print . . . . . . . . .	L Near	 051C	  UNIXCOPY	
ci_error . . . . . . . . . . . .	L Near	 083B	  UNIXCOPY	
ci_iget_getarg . . . . . . . . .	L Near	 048D	  UNIXCOPY	
ci_mkdir_getarg1 . . . . . . . .	L Near	 06E0	  UNIXCOPY	
ci_mkdir_getarg2 . . . . . . . .	L Near	 06EB	  UNIXCOPY	
ci_move_bfn_1  . . . . . . . . .	L Near	 0BB6	  UNIXCOPY	
ci_move_bfn_2  . . . . . . . . .	L Near	 0BBF	  UNIXCOPY	
ci_no_bootfile . . . . . . . . .	L Near	 0BA7	  UNIXCOPY	
ci_rmdir_getarg1 . . . . . . . .	L Near	 071B	  UNIXCOPY	
ci_rmdir_getarg2 . . . . . . . .	L Near	 0728	  UNIXCOPY	
ci_sync_exit . . . . . . . . . .	L Near	 0B5A	  UNIXCOPY	
cl10 . . . . . . . . . . . . . .	L Near	 0C06	  UNIXCOPY	
cl1  . . . . . . . . . . . . . .	L Near	 0842	  UNIXCOPY	
cl2  . . . . . . . . . . . . . .	L Near	 084F	  UNIXCOPY	
cl3  . . . . . . . . . . . . . .	L Near	 080A	  UNIXCOPY	
cl4  . . . . . . . . . . . . . .	L Near	 0398	  UNIXCOPY	
cl5  . . . . . . . . . . . . . .	L Near	 04B0	  UNIXCOPY	
cl6  . . . . . . . . . . . . . .	L Near	 0966	  UNIXCOPY	
cl7  . . . . . . . . . . . . . .	L Near	 0982	  UNIXCOPY	
cl8  . . . . . . . . . . . . . .	L Near	 0B6F	  UNIXCOPY	
close_img_file . . . . . . . . .	L Near	 025A	  UNIXCOPY	
convert_to_epoch . . . . . . . .	L Near	 15DE	  UNIXCOPY	
day  . . . . . . . . . . . . . .	L Near	 2219	  UNIXCOPY	
dec_num  . . . . . . . . . . . .	L Near	 22E2	  UNIXCOPY	
dir_getarg . . . . . . . . . . .	L Near	 0821	  UNIXCOPY	
dir_namei  . . . . . . . . . . .	L Near	 082C	  UNIXCOPY	
dir_print  . . . . . . . . . . .	L Near	 0836	  UNIXCOPY	
dsk_rd_1 . . . . . . . . . . . .	L Near	 122E	  UNIXCOPY	
dsk_rd_2 . . . . . . . . . . . .	L Near	 124F	  UNIXCOPY	
dsk_rd_3 . . . . . . . . . . . .	L Near	 1253	  UNIXCOPY	
dsk_wr_1 . . . . . . . . . . . .	L Near	 152A	  UNIXCOPY	
dsk_wr_2 . . . . . . . . . . . .	L Near	 154A	  UNIXCOPY	
dskw_1 . . . . . . . . . . . . .	L Near	 14B9	  UNIXCOPY	
dskw_2 . . . . . . . . . . . . .	L Near	 14D3	  UNIXCOPY	
dskw_3 . . . . . . . . . . . . .	L Near	 14DB	  UNIXCOPY	
dskw_4 . . . . . . . . . . . . .	L Near	 150D	  UNIXCOPY	
dskw_5 . . . . . . . . . . . . .	L Near	 151B	  UNIXCOPY	
error_msg  . . . . . . . . . . .	L Near	 208E	  UNIXCOPY	
free_1 . . . . . . . . . . . . .	L Near	 196C	  UNIXCOPY	
free_3 . . . . . . . . . . . . .	L Near	 1956	  UNIXCOPY	
free_4 . . . . . . . . . . . . .	L Near	 1362	  UNIXCOPY	
fromdos_afow_input . . . . . . .	L Near	 0A48	  UNIXCOPY	
fromdos_afow_no  . . . . . . . .	L Near	 0A5E	  UNIXCOPY	
fromdos_afow_yes . . . . . . . .	L Near	 0A6B	  UNIXCOPY	
fromdos_afow . . . . . . . . . .	L Near	 0A1B	  UNIXCOPY	
fromdos_cf . . . . . . . . . . .	L Near	 0B40	  UNIXCOPY	
fromdos_df1  . . . . . . . . . .	L Near	 09A7	  UNIXCOPY	
fromdos_df2  . . . . . . . . . .	L Near	 09B2	  UNIXCOPY	
fromdos_fdf  . . . . . . . . . .	L Near	 09D1	  UNIXCOPY	
fromdos_fuf  . . . . . . . . . .	L Near	 09E1	  UNIXCOPY	
fromdos_maknod . . . . . . . . .	L Near	 142C	  UNIXCOPY	
fromdos_odf  . . . . . . . . . .	L Near	 0AE8	  UNIXCOPY	
fromdos_retn . . . . . . . . . .	L Near	 0B62	  UNIXCOPY	
fromdos_s_fs_mdt . . . . . . . .	L Near	 0A8D	  UNIXCOPY	
fromdos_uf1  . . . . . . . . . .	L Near	 09BC	  UNIXCOPY	
fromdos_uf2  . . . . . . . . . .	L Near	 09C7	  UNIXCOPY	
fromdos_uf_itrunc  . . . . . . .	L Near	 0A77	  UNIXCOPY	
fromdos_wf_msg . . . . . . . . .	L Near	 0B10	  UNIXCOPY	
fs_info_print  . . . . . . . . .	L Near	 0962	  UNIXCOPY	
hour . . . . . . . . . . . . . .	L Near	 221B	  UNIXCOPY	
i_count  . . . . . . . . . . . .	L Near	 21B4	  UNIXCOPY	
i_flags  . . . . . . . . . . . .	Number	 001Eh	 
icalc_1  . . . . . . . . . . . .	L Near	 11EB	  UNIXCOPY	
icalc_2  . . . . . . . . . . . .	L Near	 120A	  UNIXCOPY	
icalc_3  . . . . . . . . . . . .	L Near	 1215	  UNIXCOPY	
icalc_4  . . . . . . . . . . . .	L Near	 1217	  UNIXCOPY	
iget_1 . . . . . . . . . . . . .	L Near	 11A9	  UNIXCOPY	
iget_2 . . . . . . . . . . . . .	L Near	 11C5	  UNIXCOPY	
iget_3 . . . . . . . . . . . . .	L Near	 11D1	  UNIXCOPY	
iget_4 . . . . . . . . . . . . .	L Near	 11D4	  UNIXCOPY	
ii . . . . . . . . . . . . . . .	L Near	 2211	  UNIXCOPY	
image_file_rd_err  . . . . . . .	L Near	 127F	  UNIXCOPY	
image_file_wr_err  . . . . . . .	L Near	 156E	  UNIXCOPY	
img_file_handle  . . . . . . . .	L Near	 21C4	  UNIXCOPY	
img_file_name  . . . . . . . . .	L Near	 21B6	  UNIXCOPY	
imod . . . . . . . . . . . . . .	L Near	 21F7	  UNIXCOPY	
inode_ctim . . . . . . . . . . .	L Near	 21EC	  UNIXCOPY	
inode_dskp . . . . . . . . . . .	L Near	 21DC	  UNIXCOPY	
inode_flgs . . . . . . . . . . .	L Near	 21D6	  UNIXCOPY	
inode_getarg1  . . . . . . . . .	L Near	 07EA	  UNIXCOPY	
inode_getarg2  . . . . . . . . .	L Near	 07F8	  UNIXCOPY	
inode_mtim . . . . . . . . . . .	L Near	 21F0	  UNIXCOPY	
inode_nlks . . . . . . . . . . .	L Near	 21D8	  UNIXCOPY	
inode_reserved . . . . . . . . .	L Near	 21F4	  UNIXCOPY	
inode_size . . . . . . . . . . .	L Near	 21DA	  UNIXCOPY	
inode_uid  . . . . . . . . . . .	L Near	 21D9	  UNIXCOPY	
inode  . . . . . . . . . . . . .	L Near	 21D6	  UNIXCOPY	
itrunc_1 . . . . . . . . . . . .	L Near	 190F	  UNIXCOPY	
itrunc_2 . . . . . . . . . . . .	L Near	 192B	  UNIXCOPY	
itrunc_3 . . . . . . . . . . . .	L Near	 1935	  UNIXCOPY	
itrunc_4 . . . . . . . . . . . .	L Near	 1938	  UNIXCOPY	
itrunc_5 . . . . . . . . . . . .	L Near	 193C	  UNIXCOPY	
itrunc_6 . . . . . . . . . . . .	L Near	 1926	  UNIXCOPY	
itrunc_7 . . . . . . . . . . . .	L Near	 1925	  UNIXCOPY	
link_df1 . . . . . . . . . . . .	L Near	 0411	  UNIXCOPY	
link_df2 . . . . . . . . . . . .	L Near	 041C	  UNIXCOPY	
link_fdf . . . . . . . . . . . .	L Near	 0431	  UNIXCOPY	
link_fsf . . . . . . . . . . . .	L Near	 0426	  UNIXCOPY	
link_sf1 . . . . . . . . . . . .	L Near	 03FC	  UNIXCOPY	
link_sf2 . . . . . . . . . . . .	L Near	 0407	  UNIXCOPY	
list_count . . . . . . . . . . .	L Near	 22E0	  UNIXCOPY	
load_boot_sector_ok  . . . . . .	L Near	 0211	  UNIXCOPY	
load_boot_sector . . . . . . . .	L Near	 020B	  UNIXCOPY	
load_fd_img_boot_sect_ok . . . .	L Near	 0220	  UNIXCOPY	
loc_arrow  . . . . . . . . . . .	L Near	 0353	  UNIXCOPY	
loc_back . . . . . . . . . . . .	L Near	 0320	  UNIXCOPY	
loc_beep . . . . . . . . . . . .	L Near	 032C	  UNIXCOPY	
loc_call_unix_prompt . . . . . .	L Near	 026A	  UNIXCOPY	
loc_cap_file_name0 . . . . . . .	L Near	 0173	  UNIXCOPY	
loc_cap_file_name1 . . . . . . .	L Near	 0182	  UNIXCOPY	
loc_cap_file_name2 . . . . . . .	L Near	 0185	  UNIXCOPY	
loc_cap_file_name3 . . . . . . .	L Near	 018E	  UNIXCOPY	
loc_cap_file_name4 . . . . . . .	L Near	 01A6	  UNIXCOPY	
loc_cap_file_name  . . . . . . .	L Near	 016C	  UNIXCOPY	
loc_check_fd_name  . . . . . . .	L Near	 0128	  UNIXCOPY	
loc_check_fd_sign  . . . . . . .	L Near	 023B	  UNIXCOPY	
loc_check_file_name  . . . . . .	L Near	 0155	  UNIXCOPY	
loc_chk_fname1 . . . . . . . . .	L Near	 0156	  UNIXCOPY	
loc_chk_fname2 . . . . . . . . .	L Near	 015A	  UNIXCOPY	
loc_chk_fname_ok . . . . . . . .	L Near	 0169	  UNIXCOPY	
loc_chk_image_file_features  . .	L Near	 01C5	  UNIXCOPY	
loc_close_file_then_terminate  .	L Near	 0252	  UNIXCOPY	
loc_cmd_bootfile . . . . . . . .	L Near	 0B77	  UNIXCOPY	
loc_cmd_cd . . . . . . . . . . .	L Near	 0854	  UNIXCOPY	
loc_cmd_chdir  . . . . . . . . .	L Near	 04B8	  UNIXCOPY	
loc_cmd_chmod  . . . . . . . . .	L Near	 04F1	  UNIXCOPY	
loc_cmd_chown  . . . . . . . . .	L Near	 0525	  UNIXCOPY	
loc_cmd_dir  . . . . . . . . . .	L Near	 080F	  UNIXCOPY	
loc_cmd_exit . . . . . . . . . .	L Near	 03A5	  UNIXCOPY	
loc_cmd_fromdos  . . . . . . . .	L Near	 098C	  UNIXCOPY	
loc_cmd_fs . . . . . . . . . . .	L Near	 0958	  UNIXCOPY	
loc_cmd_help . . . . . . . . . .	L Near	 0499	  UNIXCOPY	
loc_cmd_iget . . . . . . . . . .	L Near	 047D	  UNIXCOPY	
loc_cmd_inode  . . . . . . . . .	L Near	 07D5	  UNIXCOPY	
loc_cmd_link . . . . . . . . . .	L Near	 03E9	  UNIXCOPY	
loc_cmd_ls . . . . . . . . . . .	L Near	 0861	  UNIXCOPY	
loc_cmd_mkdir  . . . . . . . . .	L Near	 06CB	  UNIXCOPY	
loc_cmd_namei  . . . . . . . . .	L Near	 077B	  UNIXCOPY	
loc_cmd_nobootfile . . . . . . .	L Near	 0C0B	  UNIXCOPY	
loc_cmd_rmdir  . . . . . . . . .	L Near	 0706	  UNIXCOPY	
loc_cmd_rm . . . . . . . . . . .	L Near	 0891	  UNIXCOPY	
loc_cmd_show . . . . . . . . . .	L Near	 03BB	  UNIXCOPY	
loc_cmd_todos  . . . . . . . . .	L Near	 0549	  UNIXCOPY	
loc_cmd_volume . . . . . . . . .	L Near	 096B	  UNIXCOPY	
loc_drv_read_error . . . . . . .	L Near	 0260	  UNIXCOPY	
loc_error  . . . . . . . . . . .	L Near	 0265	  UNIXCOPY	
loc_escape . . . . . . . . . . .	L Near	 0391	  UNIXCOPY	
loc_find_bfn_1 . . . . . . . . .	L Near	 175D	  UNIXCOPY	
loc_find_bfn_2 . . . . . . . . .	L Near	 1786	  UNIXCOPY	
loc_find_bfn_3 . . . . . . . . .	L Near	 1781	  UNIXCOPY	
loc_find_bfn_retn  . . . . . . .	L Near	 1784	  UNIXCOPY	
loc_find_image_file  . . . . . .	L Near	 01AB	  UNIXCOPY	
loc_get_args . . . . . . . . . .	L Near	 0121	  UNIXCOPY	
loc_inv_fname  . . . . . . . . .	L Near	 0163	  UNIXCOPY	
loc_inv_image_file . . . . . . .	L Near	 01DF	  UNIXCOPY	
loc_not_fd_rufs  . . . . . . . .	L Near	 0236	  UNIXCOPY	
loc_open_image_file  . . . . . .	L Near	 01E4	  UNIXCOPY	
loc_read_unix_sf . . . . . . . .	L Near	 063C	  UNIXCOPY	
loc_rediv_NumberInput  . . . . .	L Near	 188E	  UNIXCOPY	
loc_reset_str_NumberInput  . . .	L Near	 1881	  UNIXCOPY	
loc_unix_welcome . . . . . . . .	L Near	 0242	  UNIXCOPY	
loc_write_it . . . . . . . . . .	L Near	 0349	  UNIXCOPY	
loop_popcx_NumberInput . . . . .	L Near	 189B	  UNIXCOPY	
ls_getarg1 . . . . . . . . . . .	L Near	 0870	  UNIXCOPY	
ls_getarg2 . . . . . . . . . . .	L Near	 0877	  UNIXCOPY	
ls_getarg3 . . . . . . . . . . .	L Near	 0828	  UNIXCOPY	
ls_getarg4 . . . . . . . . . . .	L Near	 0880	  UNIXCOPY	
ls_option  . . . . . . . . . . .	L Near	 22E1	  UNIXCOPY	
makdir_1 . . . . . . . . . . . .	L Near	 0F1D	  UNIXCOPY	
makdir_2 . . . . . . . . . . . .	L Near	 0F2A	  UNIXCOPY	
makdir_3 . . . . . . . . . . . .	L Near	 0F3F	  UNIXCOPY	
makdir_4 . . . . . . . . . . . .	L Near	 0F4F	  UNIXCOPY	
maknod_1 . . . . . . . . . . . .	L Near	 13DD	  UNIXCOPY	
maknod_2 . . . . . . . . . . . .	L Near	 1453	  UNIXCOPY	
maknod_3 . . . . . . . . . . . .	L Near	 1452	  UNIXCOPY	
maknod_4 . . . . . . . . . . . .	L Near	 1444	  UNIXCOPY	
mget_0 . . . . . . . . . . . . .	L Near	 1280	  UNIXCOPY	
mget_1 . . . . . . . . . . . . .	L Near	 12AD	  UNIXCOPY	
mget_2 . . . . . . . . . . . . .	L Near	 12AE	  UNIXCOPY	
mget_3 . . . . . . . . . . . . .	L Near	 12C0	  UNIXCOPY	
mget_4 . . . . . . . . . . . . .	L Near	 12C8	  UNIXCOPY	
mget_5 . . . . . . . . . . . . .	L Near	 12E3	  UNIXCOPY	
mget_6 . . . . . . . . . . . . .	L Near	 12FC	  UNIXCOPY	
mget_7 . . . . . . . . . . . . .	L Near	 1320	  UNIXCOPY	
mget_8 . . . . . . . . . . . . .	L Near	 12E2	  UNIXCOPY	
mget_9 . . . . . . . . . . . . .	L Near	 12E1	  UNIXCOPY	
minute . . . . . . . . . . . . .	L Near	 221D	  UNIXCOPY	
mkdir_0  . . . . . . . . . . . .	L Near	 1455	  UNIXCOPY	
mkdir_1  . . . . . . . . . . . .	L Near	 1466	  UNIXCOPY	
mkdir_2  . . . . . . . . . . . .	L Near	 1478	  UNIXCOPY	
mkdir_inc_nlinks . . . . . . . .	L Near	 0F10	  UNIXCOPY	
mkdir_stc  . . . . . . . . . . .	L Near	 1491	  UNIXCOPY	
month  . . . . . . . . . . . . .	L Near	 2217	  UNIXCOPY	
msgINumber . . . . . . . . . . .	L Near	 23BF	  UNIXCOPY	
msgVol_Size_Hdr  . . . . . . . .	L Near	 2356	  UNIXCOPY	
msgVol_free_icount_Hdr . . . . .	L Near	 239D	  UNIXCOPY	
msgVol_freeblocks_Hdr  . . . . .	L Near	 236F	  UNIXCOPY	
msgVol_icount_Hdr  . . . . . . .	L Near	 2388	  UNIXCOPY	
msgVolume_Info . . . . . . . . .	L Near	 22F0	  UNIXCOPY	
msgVolume_Serial . . . . . . . .	L Near	 2349	  UNIXCOPY	
msgVolume_Size . . . . . . . . .	L Near	 2365	  UNIXCOPY	
msgVolume_free_icount  . . . . .	L Near	 23AC	  UNIXCOPY	
msgVolume_freeblocks . . . . . .	L Near	 237E	  UNIXCOPY	
msgVolume_icount . . . . . . . .	L Near	 2397	  UNIXCOPY	
msg_NO . . . . . . . . . . . . .	L Near	 208A	  UNIXCOPY	
msg_Startup_File_Not_Exists  . .	L Near	 20EC	  UNIXCOPY	
msg_YES  . . . . . . . . . . . .	L Near	 2085	  UNIXCOPY	
msg_arg  . . . . . . . . . . . .	L Near	 1F04	  UNIXCOPY	
msg_file_not_found . . . . . . .	L Near	 1F7B	  UNIXCOPY	
msg_inode_details  . . . . . . .	L Near	 23D0	  UNIXCOPY	
msg_inv_file_name  . . . . . . .	L Near	 1F38	  UNIXCOPY	
msg_inv_image_file . . . . . . .	L Near	 1FB7	  UNIXCOPY	
msg_making_directory . . . . . .	L Near	 209A	  UNIXCOPY	
msg_overwrite_question1  . . . .	L Near	 216C	  UNIXCOPY	
msg_overwrite_question2  . . . .	L Near	 2189	  UNIXCOPY	
msg_remove_question1 . . . . . .	L Near	 2191	  UNIXCOPY	
msg_remove_question2 . . . . . .	L Near	 21AB	  UNIXCOPY	
msg_removing_directory . . . . .	L Near	 20B0	  UNIXCOPY	
msg_sf_configuration_reset_ok  .	L Near	 2140	  UNIXCOPY	
msg_sf_configuration_set_ok  . .	L Near	 2116	  UNIXCOPY	
msg_unix_drv_read_error  . . . .	L Near	 1F15	  UNIXCOPY	
msg_unix_drv_write_error . . . .	L Near	 20C8	  UNIXCOPY	
msg_yes_no . . . . . . . . . . .	L Near	 1F0A	  UNIXCOPY	
namei_0  . . . . . . . . . . . .	L Near	 10B5	  UNIXCOPY	
namei_1  . . . . . . . . . . . .	L Near	 10BA	  UNIXCOPY	
namei_2  . . . . . . . . . . . .	L Near	 10D6	  UNIXCOPY	
namei_3  . . . . . . . . . . . .	L Near	 1105	  UNIXCOPY	
namei_4  . . . . . . . . . . . .	L Near	 1121	  UNIXCOPY	
namei_5  . . . . . . . . . . . .	L Near	 112B	  UNIXCOPY	
namei_6  . . . . . . . . . . . .	L Near	 10C7	  UNIXCOPY	
namei_7  . . . . . . . . . . . .	L Near	 10CA	  UNIXCOPY	
namei_fsf  . . . . . . . . . . .	L Near	 07A5	  UNIXCOPY	
namei_iget . . . . . . . . . . .	L Near	 07B9	  UNIXCOPY	
namei_print_inum . . . . . . . .	L Near	 07BC	  UNIXCOPY	
namei_sf1  . . . . . . . . . . .	L Near	 0790	  UNIXCOPY	
namei_sf2  . . . . . . . . . . .	L Near	 079B	  UNIXCOPY	
pass_cc_ah . . . . . . . . . . .	L Near	 1B9F	  UNIXCOPY	
pass_cc_al . . . . . . . . . . .	L Near	 1B97	  UNIXCOPY	
pass_cc_dh . . . . . . . . . . .	L Near	 1B8E	  UNIXCOPY	
pass_cc_dl . . . . . . . . . . .	L Near	 1B86	  UNIXCOPY	
pass_escape  . . . . . . . . . .	L Near	 0382	  UNIXCOPY	
pdir . . . . . . . . . . . . . .	L Near	 1F02	  UNIXCOPY	
pdl_0  . . . . . . . . . . . . .	L Near	 0CCA	  UNIXCOPY	
pdl_10 . . . . . . . . . . . . .	L Near	 0D70	  UNIXCOPY	
pdl_11 . . . . . . . . . . . . .	L Near	 0D49	  UNIXCOPY	
pdl_12 . . . . . . . . . . . . .	L Near	 0E87	  UNIXCOPY	
pdl_13 . . . . . . . . . . . . .	L Near	 0D74	  UNIXCOPY	
pdl_1  . . . . . . . . . . . . .	L Near	 0CDA	  UNIXCOPY	
pdl_2  . . . . . . . . . . . . .	L Near	 0CDE	  UNIXCOPY	
pdl_3  . . . . . . . . . . . . .	L Near	 0CE6	  UNIXCOPY	
pdl_4  . . . . . . . . . . . . .	L Near	 0D0D	  UNIXCOPY	
pdl_5  . . . . . . . . . . . . .	L Near	 0D16	  UNIXCOPY	
pdl_6  . . . . . . . . . . . . .	L Near	 0D1E	  UNIXCOPY	
pdl_7  . . . . . . . . . . . . .	L Near	 0D2F	  UNIXCOPY	
pdl_8  . . . . . . . . . . . . .	L Near	 0E8F	  UNIXCOPY	
pdl_9  . . . . . . . . . . . . .	L Near	 0EB7	  UNIXCOPY	
pdn0 . . . . . . . . . . . . . .	L Near	 1A53	  UNIXCOPY	
pdn_14 . . . . . . . . . . . . .	L Near	 1A7B	  UNIXCOPY	
pdn_itoa . . . . . . . . . . . .	L Near	 1A6A	  UNIXCOPY	
pdn_putc . . . . . . . . . . . .	L Near	 1A97	  UNIXCOPY	
prev_column  . . . . . . . . . .	L Near	 0334	  UNIXCOPY	
program_exit . . . . . . . . . .	L Near	 1F01	  UNIXCOPY	
putc . . . . . . . . . . . . . .	L Near	 0EB8	  UNIXCOPY	
pvi_icount_loop1 . . . . . . . .	L Near	 1B40	  UNIXCOPY	
pvi_icount_loop2 . . . . . . . .	L Near	 1B49	  UNIXCOPY	
pvi_icount_loop3 . . . . . . . .	L Near	 1B52	  UNIXCOPY	
pvi_size_loop1 . . . . . . . . .	L Near	 1AEC	  UNIXCOPY	
pvi_size_loop2 . . . . . . . . .	L Near	 1AF4	  UNIXCOPY	
pvi_size_loop3 . . . . . . . . .	L Near	 1AFC	  UNIXCOPY	
read_inode_1 . . . . . . . . . .	L Near	 1142	  UNIXCOPY	
read_inode_2 . . . . . . . . . .	L Near	 115C	  UNIXCOPY	
read_inode_3 . . . . . . . . . .	L Near	 11A1	  UNIXCOPY	
read_inode_retn  . . . . . . . .	L Near	 11A2	  UNIXCOPY	
read_next_char . . . . . . . . .	L Near	 0310	  UNIXCOPY	
readinode_sioreg . . . . . . . .	L Near	 1166	  UNIXCOPY	
rm_a_no  . . . . . . . . . . . .	L Near	 092B	  UNIXCOPY	
rm_a_yes . . . . . . . . . . . .	L Near	 0938	  UNIXCOPY	
rm_getarg  . . . . . . . . . . .	L Near	 089E	  UNIXCOPY	
rm_move_fn . . . . . . . . . . .	L Near	 08E8	  UNIXCOPY	
rm_namei . . . . . . . . . . . .	L Near	 08A9	  UNIXCOPY	
rm_unlink  . . . . . . . . . . .	L Near	 0944	  UNIXCOPY	
rm_yn_input  . . . . . . . . . .	L Near	 0915	  UNIXCOPY	
rmdir_readi_loop . . . . . . . .	L Near	 0F97	  UNIXCOPY	
rmdir_stc_retn . . . . . . . . .	L Near	 1003	  UNIXCOPY	
rmdir_unlink . . . . . . . . . .	L Near	 0FE1	  UNIXCOPY	
rw . . . . . . . . . . . . . . .	L Near	 21F6	  UNIXCOPY	
sb_alloc_free_3  . . . . . . . .	L Near	 134C	  UNIXCOPY	
second . . . . . . . . . . . . .	L Near	 221F	  UNIXCOPY	
set_cursor_pos . . . . . . . . .	L Near	 0336	  UNIXCOPY	
setimod_1  . . . . . . . . . . .	L Near	 1383	  UNIXCOPY	
setimod_2  . . . . . . . . . . .	L Near	 138D	  UNIXCOPY	
setimod_3  . . . . . . . . . . .	L Near	 1396	  UNIXCOPY	
setimod_4  . . . . . . . . . . .	L Near	 1394	  UNIXCOPY	
show_inode_1 . . . . . . . . . .	L Near	 1BAA	  UNIXCOPY	
show_inode_2 . . . . . . . . . .	L Near	 1BB5	  UNIXCOPY	
show_inode_3 . . . . . . . . . .	L Near	 1BB9	  UNIXCOPY	
show_inode_4 . . . . . . . . . .	L Near	 1BBD	  UNIXCOPY	
show_inode_5 . . . . . . . . . .	L Near	 1BC7	  UNIXCOPY	
show_inode_6 . . . . . . . . . .	L Near	 1BD9	  UNIXCOPY	
show_inode_7 . . . . . . . . . .	L Near	 1BFA	  UNIXCOPY	
show_inode_retn  . . . . . . . .	L Near	 1BC6	  UNIXCOPY	
show_inode_stc_retn  . . . . . .	L Near	 1BC5	  UNIXCOPY	
show_uf1 . . . . . . . . . . . .	L Near	 03CB	  UNIXCOPY	
show_uf2 . . . . . . . . . . . .	L Near	 03D6	  UNIXCOPY	
show_uf3 . . . . . . . . . . . .	L Near	 03E0	  UNIXCOPY	
str_inode_number . . . . . . . .	L Near	 2239	  UNIXCOPY	
suf_10 . . . . . . . . . . . . .	L Near	 1084	  UNIXCOPY	
suf_11 . . . . . . . . . . . . .	L Near	 108E	  UNIXCOPY	
suf_12 . . . . . . . . . . . . .	L Near	 1098	  UNIXCOPY	
suf_1  . . . . . . . . . . . . .	L Near	 1029	  UNIXCOPY	
suf_2  . . . . . . . . . . . . .	L Near	 1032	  UNIXCOPY	
suf_3  . . . . . . . . . . . . .	L Near	 1052	  UNIXCOPY	
suf_4  . . . . . . . . . . . . .	L Near	 105E	  UNIXCOPY	
suf_5  . . . . . . . . . . . . .	L Near	 1065	  UNIXCOPY	
suf_6  . . . . . . . . . . . . .	L Near	 1068	  UNIXCOPY	
suf_7  . . . . . . . . . . . . .	L Near	 1074	  UNIXCOPY	
suf_8  . . . . . . . . . . . . .	L Near	 1078	  UNIXCOPY	
suf_9  . . . . . . . . . . . . .	L Near	 107C	  UNIXCOPY	
sync_1 . . . . . . . . . . . . .	L Near	 1702	  UNIXCOPY	
sync_2 . . . . . . . . . . . . .	L Near	 173A	  UNIXCOPY	
sync_3 . . . . . . . . . . . . .	L Near	 174B	  UNIXCOPY	
syschdir_0 . . . . . . . . . . .	L Near	 0EBF	  UNIXCOPY	
syschdir_1 . . . . . . . . . . .	L Near	 0EC4	  UNIXCOPY	
syschdir_2 . . . . . . . . . . .	L Near	 0EC9	  UNIXCOPY	
syschdir_3 . . . . . . . . . . .	L Near	 0ED1	  UNIXCOPY	
syschdir_4 . . . . . . . . . . .	L Near	 0ED5	  UNIXCOPY	
syschdir_5 . . . . . . . . . . .	L Near	 0ED8	  UNIXCOPY	
sysmkdir_0 . . . . . . . . . . .	L Near	 0F43	  UNIXCOPY	
sysmkdir_1 . . . . . . . . . . .	L Near	 0F4A	  UNIXCOPY	
sysmkdir_flags . . . . . . . . .	L Near	 0F5F	  UNIXCOPY	
sysmkdir_maknod  . . . . . . . .	L Near	 0F62	  UNIXCOPY	
systm  . . . . . . . . . . . . .	L Near	 2C90	  UNIXCOPY	
terminate  . . . . . . . . . . .	L Near	 025E	  UNIXCOPY	
todos_afow_input . . . . . . . .	L Near	 05D1	  UNIXCOPY	
todos_afow_no  . . . . . . . . .	L Near	 05E7	  UNIXCOPY	
todos_afow_yes . . . . . . . . .	L Near	 05F4	  UNIXCOPY	
todos_afow . . . . . . . . . . .	L Near	 05B9	  UNIXCOPY	
todos_cdf  . . . . . . . . . . .	L Near	 0666	  UNIXCOPY	
todos_chk_err  . . . . . . . . .	L Near	 05A3	  UNIXCOPY	
todos_crdf . . . . . . . . . . .	L Near	 0600	  UNIXCOPY	
todos_df1  . . . . . . . . . . .	L Near	 0576	  UNIXCOPY	
todos_df2  . . . . . . . . . . .	L Near	 0581	  UNIXCOPY	
todos_fdf  . . . . . . . . . . .	L Near	 0596	  UNIXCOPY	
todos_fuf  . . . . . . . . . . .	L Near	 058B	  UNIXCOPY	
todos_iget . . . . . . . . . . .	L Near	 0628	  UNIXCOPY	
todos_odf  . . . . . . . . . . .	L Near	 060E	  UNIXCOPY	
todos_retn . . . . . . . . . . .	L Near	 06BE	  UNIXCOPY	
todos_ruf_wdf  . . . . . . . . .	L Near	 061D	  UNIXCOPY	
todos_set_dfdt . . . . . . . . .	L Near	 0669	  UNIXCOPY	
todos_uf1  . . . . . . . . . . .	L Near	 0561	  UNIXCOPY	
todos_uf2  . . . . . . . . . . .	L Near	 056C	  UNIXCOPY	
todos_wf_msg . . . . . . . . . .	L Near	 0622	  UNIXCOPY	
txt_inode_cday . . . . . . . . .	L Near	 24B4	  UNIXCOPY	
txt_inode_chour  . . . . . . . .	L Near	 24BF	  UNIXCOPY	
txt_inode_cminute  . . . . . . .	L Near	 24C2	  UNIXCOPY	
txt_inode_cmonth . . . . . . . .	L Near	 24B7	  UNIXCOPY	
txt_inode_csecond  . . . . . . .	L Near	 24C5	  UNIXCOPY	
txt_inode_ctim_h . . . . . . . .	L Near	 24A8	  UNIXCOPY	
txt_inode_cyear  . . . . . . . .	L Near	 24BA	  UNIXCOPY	
txt_inode_dskp . . . . . . . . .	L Near	 2467	  UNIXCOPY	
txt_inode_flags_b  . . . . . . .	L Near	 2416	  UNIXCOPY	
txt_inode_flags_h  . . . . . . .	L Near	 240E	  UNIXCOPY	
txt_inode_mday . . . . . . . . .	L Near	 24EA	  UNIXCOPY	
txt_inode_mhour  . . . . . . . .	L Near	 24F5	  UNIXCOPY	
txt_inode_mminute  . . . . . . .	L Near	 24F8	  UNIXCOPY	
txt_inode_mmonth . . . . . . . .	L Near	 24ED	  UNIXCOPY	
txt_inode_msecond  . . . . . . .	L Near	 24FB	  UNIXCOPY	
txt_inode_mtim_h . . . . . . . .	L Near	 24DE	  UNIXCOPY	
txt_inode_myear  . . . . . . . .	L Near	 24F0	  UNIXCOPY	
txt_inode_nlks . . . . . . . . .	L Near	 2437	  UNIXCOPY	
txt_inode_number . . . . . . . .	L Near	 23FD	  UNIXCOPY	
txt_inode_reserved . . . . . . .	L Near	 2509	  UNIXCOPY	
txt_inode_size . . . . . . . . .	L Near	 2452	  UNIXCOPY	
txt_inode_uid  . . . . . . . . .	L Near	 2446	  UNIXCOPY	
u_base . . . . . . . . . . . . .	L Near	 21FF	  UNIXCOPY	
u_cdir . . . . . . . . . . . . .	L Near	 21F9	  UNIXCOPY	
u_count  . . . . . . . . . . . .	L Near	 2203	  UNIXCOPY	
u_dirbuf . . . . . . . . . . . .	L Near	 2207	  UNIXCOPY	
u_dirp . . . . . . . . . . . . .	L Near	 21FD	  UNIXCOPY	
u_namep  . . . . . . . . . . . .	L Near	 21FB	  UNIXCOPY	
u_nread  . . . . . . . . . . . .	L Near	 2205	  UNIXCOPY	
u_off  . . . . . . . . . . . . .	L Near	 2201	  UNIXCOPY	
u_uid  . . . . . . . . . . . . .	L Near	 21F8	  UNIXCOPY	
ucds_0 . . . . . . . . . . . . .	L Near	 0C4A	  UNIXCOPY	
ucds_1 . . . . . . . . . . . . .	L Near	 0C80	  UNIXCOPY	
ucds_2 . . . . . . . . . . . . .	L Near	 0C8F	  UNIXCOPY	
ucds_3 . . . . . . . . . . . . .	L Near	 0CA6	  UNIXCOPY	
ucds_4 . . . . . . . . . . . . .	L Near	 0CA3	  UNIXCOPY	
ucds_5 . . . . . . . . . . . . .	L Near	 0CB0	  UNIXCOPY	
ucds_6 . . . . . . . . . . . . .	L Near	 0C6E	  UNIXCOPY	
ucds_7 . . . . . . . . . . . . .	L Near	 0CC1	  UNIXCOPY	
ucds_8 . . . . . . . . . . . . .	L Near	 0C6D	  UNIXCOPY	
ucds_9 . . . . . . . . . . . . .	L Near	 0CBB	  UNIXCOPY	
uf_i_number  . . . . . . . . . .	L Near	 21D4	  UNIXCOPY	
uf_make_datetime . . . . . . . .	L Near	 21D0	  UNIXCOPY	
unix_cdir  . . . . . . . . . . .	L Near	 1E8C	  UNIXCOPY	
unix_cdrv  . . . . . . . . . . .	L Near	 1E86	  UNIXCOPY	
unix_img_cdir  . . . . . . . . .	L Near	 1E8B	  UNIXCOPY	
unix_prompt_0  . . . . . . . . .	L Near	 027E	  UNIXCOPY	
unix_prompt_10 . . . . . . . . .	L Near	 02D8	  UNIXCOPY	
unix_prompt_11 . . . . . . . . .	L Near	 02E8	  UNIXCOPY	
unix_prompt_12 . . . . . . . . .	L Near	 02EB	  UNIXCOPY	
unix_prompt_13 . . . . . . . . .	L Near	 02FF	  UNIXCOPY	
unix_prompt_14 . . . . . . . . .	L Near	 030F	  UNIXCOPY	
unix_prompt_15 . . . . . . . . .	L Near	 0299	  UNIXCOPY	
unix_prompt_1  . . . . . . . . .	L Near	 0290	  UNIXCOPY	
unix_prompt_2  . . . . . . . . .	L Near	 0296	  UNIXCOPY	
unix_prompt_3  . . . . . . . . .	L Near	 029C	  UNIXCOPY	
unix_prompt_4  . . . . . . . . .	L Near	 02A1	  UNIXCOPY	
unix_prompt_5  . . . . . . . . .	L Near	 02A9	  UNIXCOPY	
unix_prompt_6  . . . . . . . . .	L Near	 02B5	  UNIXCOPY	
unix_prompt_7  . . . . . . . . .	L Near	 02C6	  UNIXCOPY	
unix_prompt_8  . . . . . . . . .	L Near	 02CE	  UNIXCOPY	
unix_prompt_9  . . . . . . . . .	L Near	 02D6	  UNIXCOPY	
unix_prompt_char . . . . . . . .	L Near	 1EB4	  UNIXCOPY	
usage  . . . . . . . . . . . . .	L Near	 1DBC	  UNIXCOPY	
vol_infO_print . . . . . . . . .	L Near	 0962	  UNIXCOPY	
wdir . . . . . . . . . . . . . .	L Near	 147E	  UNIXCOPY	
write_1  . . . . . . . . . . . .	L Near	 14A1	  UNIXCOPY	
write_inode_retn . . . . . . . .	L Near	 151B	  UNIXCOPY	
writeinode_sioreg  . . . . . . .	L Near	 14DB	  UNIXCOPY	
year . . . . . . . . . . . . . .	L Near	 2215	  UNIXCOPY	

	   0 Warnings
	   0 Errors

Microsoft (R) Macro Assembler Version 6.14.8444		    04/13/22 15:00:53
unixfdfs.asm						     Page 1 - 1


				; ****************************************************************************
				; UNIXFDFS.ASM
				; ----------------------------------------------------------------------------
				; RETRO UNIX v0.3 - Modified UNIX v7 inode model - 01/09/2019
				;
				; RETRO UNIX 8086 (Retro Unix == Turkish Rational Unix)
				; Operating System Project (v0.1) by ERDOGAN TAN (Beginning: 11/07/2012) 
				; 1.44 MB Floppy Disk 
				; Bootable Unix (RUFS) File System Installation/Formatting Code 
				;
				; Last Modification: 13/04/2022 (Retro UNIX 386 v2)
				; UNIXFDFS.ASM -> Last Modification: 04/12/2015 (Retro UNIX 386 v1)
				;
				; Derivation from UNIX Operating System (v1.0 for PDP-11) 
				; (Original) Source Code by Ken Thompson (1971-1972)
				; <Bell Laboratories (17/3/1972)>
				; <Preliminary Release of UNIX Implementation Document>
				;
				; ----------------------------------------------------------------------------
				; masm unixfdfs.asm unixfdfs.obj unixfdfs.lst
				; link /t unixfdfs
				; ****************************************************************************

				; 05/04/2022
				; 14/03/2022
				; 23/01/2020
				; 05/09/2019 Retro UNIX 386 v2 (Modified UNIX v7 inode model)

				; 04/12/2015 Retro UNIX 386 v1 (14 byte file names)
				; 21/04/2014 (tty8=COM1, tty9=COM2)
				; 22/12/2013
				; 09/07/2013

				; (Retro Unix File System) Boot Sector Parameters
				;
				; jmp short @f 	       ; db EBh, 18h ; 21/12/2019
 = 0002				bsFSystemID	equ 2  ; db 'RUFS'
 = 0006				bsVolumeSerial	equ 6  ; dd 0
						       ; db 'fd'
 = 000C				bsDriveNumber	equ 12 ; db 0
 = 000D				bsReserved	equ 13 ; db 0  ; 512 bytes per sector (and CHS read)
 = 000E				bsSecPerTrack	equ 14 ; db 18
 = 000F				bsHeads		equ 15 ; db 2
 = 0010				bsTracks	equ 16 ; dw 80
 = 0012				bs_BF_I_number	equ 18 ; dw 0
 = 0014				bsMagic		equ 20 ; db '@'
				; 21/12/2019 (extensions for hard disk 71h parition)
 = 0015				bsPartitionID	equ 21 ; db 0 ; db 71h
 = 0016				bsHiddenSects	equ 22 ; dd 0 ; Hidden sectors (Boot Sector LBA)
				; @@:	 

 0000				RUFS_INSTL      SEGMENT PUBLIC 'CODE'
						assume cs:RUFS_INSTL,ds:RUFS_INSTL,es:RUFS_INSTL,ss:RUFS_INSTL

 0000				rufs_fd_format proc near
						; 23/01/2020
						; 04/12/2015
						; 28/10/2012
						; 19/9/2012
						; 14/8/2012
						; 13/8/2012
						; 12/8/2012

						org 100h
 0100				INSTALL:
						; 05/09/2019
 0100  BB 2096 R			        mov bx, SizeOfFile+100
 0103  83 C3 0F			                add bx, 15
 0106  D1 EB			                shr bx, 1
 0108  D1 EB			        	shr bx, 1
 010A  D1 EB					shr bx, 1
 010C  D1 EB					shr bx, 1
 010E  B4 4A			                mov ah, 4Ah ; modify memory allocation
				               ;push cs
				               ;pop es
 0110  CD 21			                int 21h 

				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				; see if drive specified
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 0112  BE 0080					mov si, offset 80h		; PSP command tail
						;mov cl, byte ptr [SI]
 0115  AC					lodsb
 0116  8A C8					mov cl, al
 0118  0A C9					or cl, cl                               
						;jz short rufs_fd_format_7	; jump if zero
 011A  75 03					jnz short @f
 011C  E9 0085					jmp rufs_fd_format_7
 011F				@@:
						; 05/09/2019

						;inc si
 011F				get_args:
 011F  AC					lodsb
 0120  3C 20					cmp al, ' '
 0122  77 06					ja short rufs_fd_format_1
 0124  FE C9					dec cl
 0126  75 F7					jnz short get_args
 0128  EB 7A					jmp short rufs_fd_format_7

 012A				rufs_fd_format_1:
 012A  3C 2D					cmp al, '-'
 012C  75 03					jne short rufs_fd_format_2
 012E  E9 0083					jmp check_fdi_option ; 23/01/2020
					
 0131				rufs_fd_format_2:
 0131  3C 66					cmp al, "f"
 0133  75 1A					jne short rufs_fd_format_3
						;inc si
						;mov al, byte ptr [SI]
 0135  AC					lodsb
 0136  3C 64					cmp al, "d"
 0138  75 6A					jne short rufs_fd_format_7
						;inc si
						;mov ax, word ptr [SI]
 013A  AD					lodsw
 013B  3C 30					cmp al, '0'                            
 013D  72 65					jb short rufs_fd_format_7
 013F  3C 31					cmp al, '1'
 0141  77 61					ja short rufs_fd_format_7
 0143  80 FC 20					cmp ah, 20h
 0146  77 5C					ja short rufs_fd_format_7
 0148  A2 1CBA R				mov byte ptr [RUFS_DRIVE], al
 014B  2C 30					sub al, '0'
 014D  EB 22					jmp short rufs_fd_format_5

 014F				rufs_fd_format_3:
						; 23/01/2020
 014F  80 3C 3A					cmp byte ptr [si], ':'			; A:, B:
 0152  75 50					jne short rufs_fd_format_7
 0154  46					inc si
 0155  80 3C 20					cmp byte ptr [si],20h
 0158  77 4A					ja short rufs_fd_format_7

 015A  3C 41					cmp al, 'A'
 015C  72 46					jb short rufs_fd_format_7
 015E  3C 42					cmp al, 'B'                             ; A - Z
 0160  76 0A					jna short rufs_fd_format_4                    
 0162  3C 61					cmp al, 'a'                             ; a - z 
 0164  72 3E					jb short rufs_fd_format_7                 
 0166  3C 62					cmp al, 'b'                           
 0168  77 3A					ja short rufs_fd_format_7                 

 016A  2C 20					sub al, 'a'-'A'                         ; to upper case

				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				; Write message
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 016C				rufs_fd_format_4:
 016C  A2 1CBA R				mov byte ptr [RUFS_DRIVE], al
 016F  2C 41					sub al, 'A'                             ; make it zero based 

 0171				rufs_fd_format_5:
 0171  8A D0					mov dl, al
 0173  88 16 1DDA R				mov byte ptr [boot_sector+bsDriveNumber], dl
						; 06/09/2019
 0177  A2 0571 R				mov byte ptr [buff_d], al

 017A  B4 08					mov ah, 08h
 017C  CD 13					int 13h                                 ; return disk parameters
 017E  0E					push cs
 017F  07					pop es                                  ; restore es
						;jc rufs_fd_format_17
 0180  73 03 E9 0096				jc rufs_fd_format_13 ; 06/09/2019

						; 06/09/2019
						; If this disk is a Virtual disk, BL will not return with 04h!
						;cmp bl, 04h				; Drive Type
						;jb rufs_fd_format_17

						; 09/09/2019
						; Read boot sector to understand drive is ready or not?
 0185  E8 021B					call drive_check

 0188  BE 1C68 R				mov si, offset Msg_DoYouWantToFormat
 018B  E8 01C0					call PRINT_MSG

 018E				rufs_fd_format_6:
 018E  33 C0					xor ax, ax
 0190  CD 16					int 16h                                 ; wait for keyboard command
 0192  3C 03					cmp al, 'C'-40h
 0194  74 14					je short rufs_fd_format_8              
 0196  3C 1B					cmp al, 27
 0198  74 10					je short rufs_fd_format_8
 019A  24 DF					and al, 0DFh
 019C  3C 59					cmp al, 'Y'                             ; Yes?
 019E  74 5A					je short rufs_fd_format_10             ; write
 01A0  3C 4E					cmp al, 'N'                             ; No?
 01A2  74 2F					je short rufs_fd_format_9              ; no write (exit)

 01A4				rufs_fd_format_7:
 01A4  BE 1B09 R				mov si, offset UNIX_Welcome
 01A7  E8 01A4					call PRINT_MSG

 01AA				rufs_fd_format_8:
 01AA  BE 1D6C R				mov si, offset UNIX_CRLF
 01AD  E8 019E					call PRINT_MSG

 01B0  CD 20					int 20h

 01B2  EB FE			infinive_loop:  jmp short infinive_loop

 01B4				check_fdi_option:
 01B4  AC					lodsb
 01B5  3C 69					cmp al, 'i'
 01B7  75 EB					jne short rufs_fd_format_7
 01B9  FE C9					dec cl
 01BB  74 E7					jz short rufs_fd_format_7
 01BD  AC					lodsb
 01BE  3C 20					cmp al, ' '
 01C0  75 E2					jne short rufs_fd_format_7
 01C2  FE C9					dec cl
 01C4  74 DE					jz short rufs_fd_format_7
 01C6				check_fdi_opt_loop:
 01C6  AC					lodsb
 01C7  3C 20					cmp al, 20h
 01C9  77 10					ja short get_fdi_name
 01CB  72 D7					jb short rufs_fd_format_7
 01CD  FE C9					dec cl
 01CF  74 D3					jz short rufs_fd_format_7
 01D1  EB F3					jmp short check_fdi_opt_loop

 01D3				rufs_fd_format_9:
 01D3  BE 1D34 R				mov si, offset msg_NO
 01D6  E8 0175					call PRINT_MSG

 01D9  EB CF					jmp short rufs_fd_format_8

 01DB				get_fdi_name:
 01DB  BF 1FCE R				mov di, offset img_file_name
 01DE				get_fdi_name_nxt_chr:
 01DE  AA					stosb
 01DF  FE C9					dec cl
 01E1  74 0D					jz short get_fdi_name_ok		
 01E3  AC					lodsb
 01E4  3C 20					cmp al, 20h
 01E6  76 08					jna short get_fdi_name_ok		
 01E8  81 FF 1FDA R				cmp di, offset img_file_name + 12	
 01EC  72 F0					jb short get_fdi_name_nxt_chr

 01EE  EB 4E					jmp short invalid_file_name

 01F0				get_fdi_name_ok:
 01F0  2A C0					sub al, al
 01F2  AA					stosb 

 01F3				check_file_name_chars:
 01F3  E8 017D					call check_invalid_filename_chars
 01F6  72 46					jc short invalid_file_name		
 01F8  EB 6E					jmp cap_file_name
						
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				; get drive parameters
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 01FA				rufs_fd_format_10:
 01FA  BE 1D2F R				mov si, offset msg_YES
 01FD  E8 014E					call PRINT_MSG

						; 06/09/2019
						;mov dl, byte ptr [boot_sector+bsDriveNumber]
						;mov byte ptr [buff_d], dl

 0200				rufs_fd_format_11:
 0200  33 C0					xor ax, ax
 0202  CD 1A					int 1Ah                 ; get time of day
				  					; set unique volume ID
 0204  89 16 1DD4 R				mov word ptr [boot_sector+bsVolumeSerial], dx
 0208  89 0E 1DD6 R				mov word ptr [boot_sector+bsVolumeSerial+2], cx 

 020C				rufs_fd_format_12:
 020C  BE 1CC8 R				mov si, offset Msg_installing_file_system
 020F  E8 013C					call PRINT_MSG

 0212  E8 01B1					call unix_fs_install
 0215  73 2C					jnc short rufs_fd_format_14

 0217  8A 26 1AFD R				mov ah, byte ptr [Error]

 021B				rufs_fd_format_13: ; loc_rw_error
						; 06/09/2019
 021B  8A C4					mov al, ah
 021D  E8 013D					call proc_hex
 0220  A3 1D69 R				mov word ptr [Str_Err], ax
 0223  BE 1D38 R				mov si, offset Msg_Disk_RW_Error
 0226  E8 0125					call PRINT_MSG
 0229  BE 1D5D R				mov si, Offset Msg_Error_Number
 022C				@@:
 022C  E8 011F					call PRINT_MSG

 022F				close_file_then_terminate:		
						; 07/07/2015
 022F  8B 1E 1FDC R				mov bx, word ptr [img_file_handle]
 0233  23 DB					and bx, bx
 0235  74 04					jz  short terminate
 0237				close_img_file:
 0237  B4 3E					mov ah, 3Eh ; close (floppy disk image) file
 0239  CD 21					int 21h		 
 023B				terminate:
 023B  E9 FF6C					jmp rufs_fd_format_8 ; 06/09/2019

				;		int 20h
				;
				;		; 06/09/2019
				;hang:
				;		jmp short hang

 023E				invalid_file_name:
 023E  BE 1FDF R				mov si, offset msg_inv_file_name
 0241  EB E9			                jmp short @b

 0243				rufs_fd_format_14:
 0243  BE 1D2A R				mov  si, offset Msg_OK
 0246  E8 0105					call PRINT_MSG

 0249				rufs_fd_format_15:
 0249  BE 1CF1 R				mov si, offset Msg_writing_boot_sector
 024C  E8 00FF					call PRINT_MSG

						;mov byte ptr [RetryCount], 4

 024F				rufs_fd_format_16:
						; 06/09/2019 - Retro UNIX 386 v2
 024F  C7 06 0574 R 0000			mov word ptr [buff_s], 0
 0255  C7 06 0572 R 1DCE R			mov word ptr [buff_o], offset boot_sector
 025B  E8 149E					call dskwr
 025E  72 BB					jc short rufs_fd_format_13	
						;jmp short rufs_fd_format_17

						;mov ax, 0301h				; write to disk
						;mov bx, offset boot_sector		; location of boot code
						;mov cx, 1				; cylinder = 0
						;					; sector = 1
						;mov dh, 0				; head = 0
						;
						;mov dl, byte ptr [boot_sector+bsDriveNumber]
						;int 13h
						;jnc short rufs_fd_format_17
						;dec byte ptr [RetryCount]
						;jnz short rufs_fd_format_16
						;
						;jmp short rufs_fd_format_13

 0260				rufs_fd_format_17:
 0260  BE 1D2A R				mov  si, offset Msg_OK
 0263  E8 00E8					call PRINT_MSG

						;int 20h
						; 06/09/2019
						;jmp rufs_fd_format_8
 0266  EB C7					jmp short close_file_then_terminate

 0268				cap_file_name:
						; file name capitalization
 0268  BE 1FCE R				mov si, offset img_file_name
 026B  8B FE					mov di, si
 026D  8B DE					mov bx, si
 026F				cap_file_name0:
 026F  AC					lodsb
 0270  3C 61					cmp al, 'a'
 0272  73 0D					jnb short cap_file_name2
 0274  22 C0					and al, al
 0276  74 12					jz short cap_file_name3
 0278  3C 2E					cmp al, '.'
 027A  75 02					jne short cap_file_name1
 027C  8B DF					mov bx, di ; dot position	
 027E				cap_file_name1:
						;stosd
 027E  47					inc di ; 06/09/2019
 027F  EB EE					jmp short cap_file_name0 
 0281				cap_file_name2:
 0281  3C 7A					cmp al, 'z'
 0283  77 F9					ja short cap_file_name1
 0285  24 DF			                and al, 0DFh ; NOT 32
 0287  AA					stosb
 0288  EB E5					jmp short cap_file_name0
 028A				cap_file_name3:
 028A  88 05					mov [di], al
 028C  4F					dec di
 028D  3B DF					cmp bx, di
 028F  73 AD					jnb short invalid_file_name
 0291  2B FB					sub di, bx
 0293  81 EB 1FCE R				sub bx, offset img_file_name
 0297  83 FF 03					cmp di, 3
 029A  76 0B					jna short cap_file_name4
 029C  23 DB					and bx, bx
 029E  75 9E					jnz short invalid_file_name
 02A0  EB 0A					jmp short find_image_file		

 02A2				file_error:
 02A2  BE 03B5 R				mov si, offset file_error_msg
 02A5  EB 85					jmp @b

 02A7				cap_file_name4:
 02A7  83 FB 08					cmp bx, 8
 02AA  77 92					ja short invalid_file_name
					
 02AC				find_image_file:
						; 05/09/2019 - Retro UNIX 386 v2
						; 07/07/2015 (UNIXCOPY.ASM)
 02AC  BA 1FCE R				mov dx, offset img_file_name
 02AF  B9 003F					mov cx, 3Fh ; File Attributes
				                ;xor cx, cx ; 06/09/2019
 02B2  B4 4E					mov ah, 4Eh ; MS Dos Function = Find First File
 02B4  CD 21			                int 21h
 02B6  73 76					jnc short chk_image_file_features
						
						; 06/09/2019 - Retro UNIX 386 v2 development work
						; NOTE: Normally, (this) error code in ax is 12h,
						; 'no more files' error -as experienced in windows 7 cmd-
						; (but -perhaps- ax may have 02h, 'file not found' error) 

						; 06/09/2019
 02B8  3C 12					cmp al,12h  ; 18, no more files
 02BA  74 04					je short create_image_file ; there is not a file in the dir
									   ; with same name;
									   ; so, we can create a new one!	 
 02BC  3C 02					cmp al,02h  ; 2, file not found error
 02BE  75 E2					jne short file_error ; we need to stop here
								     ; if it is another type of error 
 02C0				create_image_file:
						; create a new fd image file
						;mov dx, offset img_file_name
 02C0  B9 0000					mov cx, 0 ; File Attributes
 02C3  B4 3C					mov ah, 3Ch ; MS-DOS Function = Create File
 02C5  CD 21					int 21h
 02C7  72 D9					jc short file_error

 02C9  C6 06 1FDE R FF				mov byte ptr [new_file], 0FFh

 02CE  BE 03C3 R				mov si, CRLF
 02D1  E8 007A					call PRINT_MSG

						; 05/09/2019
 02D4				open_image_file:
 02D4  B0 02					mov al, 2 ; open for reading and writing
						;mov dx, offset img_file_name
 02D6  B4 3D					mov ah, 3Dh ; open file
 02D8  CD 21					int 21h
 02DA  72 C6					jc short file_error

 02DC  A3 1FDC R				mov word ptr [img_file_handle], ax

						; 06/09/2019
						; set (buffer) disk drive number for image file
 02DF  C6 06 0571 R 90				mov byte ptr [buff_d], 90h ; floppy disk image sign

 02E4  80 3E 1FDE R 00				cmp byte ptr [new_file], 0
 02E9  77 03 E9 FF12				jna rufs_fd_format_11

						; set sector buffer for new file initialization

 02EE  B9 0100					mov cx, 256
 02F1  BF 1270 R				mov di, offset sector_buffer
 02F4  B8 F6F6					mov ax, 0F6F6h
 02F7  F3/ AB					rep stosw

 02F9  BE 206C R				mov si, offset msg_init_img_file
 02FC  E8 004F					call PRINT_MSG

 02FF  BA 1270 R				mov dx, offset sector_buffer
 0302  8B 1E 1FDC R		                mov bx, word ptr [img_file_handle]
 0306  B9 0B40					mov cx, 2880 ; sectors
 0309				write_file_next_sector:
 0309  51					push cx
 030A  B9 0200					mov cx, 512
 030D  B4 40					mov ah, 40h ; Write File
 030F  CD 21			                int 21h
 0311  59					pop cx
 0312  72 8E					jc short file_error
 0314  3D 0200					cmp ax, 512
 0317  75 89					jne short file_error
 0319  E2 EE					loop write_file_next_sector

						; reset sector buffer for new file initialization

 031B  B9 0100					mov cx, 256
 031E  BF 1270 R				mov di, offset sector_buffer
 0321  2B C0					sub ax, ax
 0323  F3/ AB					rep stosw

 0325  BE 1D2A R				mov si, Msg_OK
 0328  E8 0023					call PRINT_MSG

 032B  E9 FED2					jmp rufs_fd_format_11

				; DTA (PSP+80h= Offset 128)
 = 0095				DTA_Attrib equ 149 ; PDP+21 ;05/01/2013	
 = 0096				DTA_Time equ 150 ; PSP+22
 = 0098				DTA_Date equ 152 ; PSP 24
 = 009A				DTA_FileSize equ 154 ; PSP + 26
 = 009E				DTA_FileName equ 158 ; PSP + 30

 032E				chk_image_file_features:
 032E  BE 0095					mov si, DTA_Attrib
 0331  8A 04			                mov al, byte ptr [SI]
 0333  24 1F			                and al, 1Fh ; directory, volume label, system, hidden, read only
 0335  74 03 E9 FF68		                jnz file_error       
 033A  BE 009A					mov si, DTA_FileSize
 033D  AD					lodsw
 033E  83 3C 16					cmp word ptr [SI], 16h
 0341  75 05					jne short invalid_image_file
 0343  3D 8000					cmp ax, 8000h ; 1.44 MB floppy disk image (168000h bytes)
 0346  74 8C			                je short open_image_file
 0348				invalid_image_file:
 0348  BE 2022 R				mov si, offset msg_inv_image_file
 034B  E9 FEDE					jmp @b 

 034E				rufs_fd_format  endp

 034E				PRINT_MSG	proc near
 034E  BB 0007					mov BX,07h  
 0351  B4 0E					mov AH,0Eh  
 0353				PRINT_MSG_LOOP:
 0353  AC					lodsb				; Load byte at DS:SI to AL
 0354  22 C0					and AL,AL            
 0356  74 04					jz short PRINT_MSG_OK       
					
 0358  CD 10					int 10h				; BIOS Service func ( ah ) = 0Eh
										; Write char as TTY
										;AL-char BH-page BL-color
 035A  EB F7					jmp short PRINT_MSG_LOOP           
 035C				PRINT_MSG_OK:
 035C  C3					retn

 035D				PRINT_MSG	endp

 035D				proc_hex	proc near

 035D  D4 10					db 0D4h,10h                     ; Undocumented inst. AAM
										; AH = AL / 10h
										; AL = AL MOD 10h
 035F  0D 3030					or AX,'00'                      ; Make it ZERO (ASCII) based

 0362  86 E0					xchg AH,AL 
				; 1999
 0364  3C 39					cmp AL,'9'
 0366  76 02					jna short pass_cc_al
 0368  04 07					add AL,7
 036A				pass_cc_al:
 036A  80 FC 39					cmp AH,'9'
 036D  76 03					jna short pass_cc_ah
 036F  80 C4 07					add AH,7
 0372				pass_cc_ah:
				; 1998
 0372  C3					retn

 0373				proc_hex	endp

				; 05/09/2019

 0373				check_invalid_filename_chars proc near
				               ; 10/07/2010 (FILE.ASM, TRDOS 8086)
				               ; Derivation from proc_check_invalid_filename_chars
				               ; in the old TRDOS.ASM 09/02/2005

				                ; INPUT: DS:SI = ASCIIZ FileName 
				                ; OUTPUT:
				                ; stc -> Invalid
				                ; clc -> Valid
				                ; 10/02/2010
				                ; AX, CX, DI will be changed

				                ;push es
				                ;push ds
				                ;pop es
				                ;push si
 0373  BF 038F R		                mov di, offset invalid_fname_chars
 0376  8A 04			                mov al, byte ptr [SI]
 0378				check_filename_next_char:
 0378  B9 0014			                mov cx, sizeInvFnChars
 037B  BF 038F R		                mov di, offset invalid_fname_chars
 037E				loop_scan_invalid_filename_char:
 037E  AE					scasb 
 037F  74 0C			                je short loc_invalid_filename 
 0381  E2 FB			                loop loop_scan_invalid_filename_char
 0383  46			                inc si
 0384  8A 04			                mov al, byte ptr [SI]
				                ; 10/07/2010
 0386  3C 1F			                cmp al, 1Fh  ; 20h and above 
 0388  77 EE			                ja short check_filename_next_char
 038A  32 E4			                xor ah, ah 
 038C				loc_check_invalid_filename_retn:
				                ;pop si
				                ;pop es
 038C  C3			                retn
 038D				loc_invalid_filename:
				              ; 10/07/2010
				               ;mov ax, 0Bh ; Invalid format
				                            ; Invalid file name chars
 038D  F9			                stc
				                ;jmp short loc_check_invalid_filename_retn
 038E  C3					retn

 038F				invalid_fname_chars:
 038F  22 27 28 29 2A 2B			db 22h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Fh
       2C 2F
 0397  3A 3B 3C 3D 3E 3F			db 3Ah, 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h
       40
 039E  5B 5C 5D 5E 60				db 5Bh, 5Ch, 5Dh, 5Eh, 60h
 03A3 = 0014			sizeInvFnChars  equ ($ - invalid_fname_chars)                

 03A3				check_invalid_filename_chars endp

 03A3				drive_check:
						; 09/09/2019 - Retro UNIX 386 v2
 03A3  33 DB					xor bx, bx ; sector 0
						;mov word ptr [buff_s], bx
						;mov word ptr [buff_o], offset Buffer
 03A5  E8 1336					call dskrd
 03A8  73 0A					jnc short drive_check_ok
 03AA				drive_not_ready:
						; 09/09/2019
 03AA  58					pop ax ; near call return address
 03AB  BE 1D4A R				mov si, offset msg_drive_not_ready
 03AE  E8 FF9D					call PRINT_MSG
 03B1  E9 FDF6					jmp rufs_fd_format_8
 03B4				drive_check_ok:
 03B4  C3					retn

 03B5				file_error_msg:
 03B5  0D 0A					db 0Dh, 0Ah
 03B7  46 69 6C 65 20 45			db 'File Error !'
       72 72 6F 72 20 21
 03C3				CRLF:
 03C3  0D 0A 00			                db 0Dh, 0Ah, 0

				;;;;;
				include         uinstall.asm
			      C ; UINSTALL.ASM
			      C ; --------------------------------------------------------------
			      C ; RETRO UNIX v0.3 - Modified UNIX v7 inode model - 01/09/2019
			      C ;
			      C ; RETRO UNIX v0.2 - 14 byte file name modifications (04/12/2015)
			      C ; RETRO UNIX v0.1 'fd0' formatting procedures
			      C ;
			      C ; Last Update: 13/04/2022 (Retro UNIX 386 v2) ;*****************
			      C ;
			      C ; 04/12/2015 (new /dev directory format 
			      C ; 	      according to Retro UNIX 8086 v1 kernel)
			      C ; 21/04/2014 (tty8, tty9)
			      C ; 05/03/2013 (ALIGN) 
			      C ; 31/10/2012, 16/12/2012 (unixproc.asm -> sioreg) 
			      C ; ERDOGAN TAN [ 14-15-16-21-27/7/2012, 4-5-12-13-14-15-21/8/2012 ]
			      C ; These procedures will be located in UNIXFDFS.ASM file 
			      C ; when they are completed.
			      C ; (NOTE: only for (R)UFS initialization of FD0 1.44MB floppy disk
			      C 
			      C ; 14/03/2022 (first free block bugfix)
			      C ; 23/01/2020 - Retro UNIX 386 v2
			      C 
 = 0168			      C SIZE_FREE_MAP equ 360
 = 0020			      C SIZE_INODE_MAP equ 32
			      C 
 = 0B40			      C DISK_SIZE equ 2880 ; in blocks
			      C 
 = 0100			      C INODE_COUNT equ SIZE_INODE_MAP * 8
			      C ;;INODE_LIST_BLOCKS equ (INODE_COUNT / 16)
			      C ;INODE_LIST_BLOCKS equ (INODE_COUNT / 8) ; 01/09/2019
 = 0020			      C INODE_LIST_BLOCKS equ ((INODE_COUNT + 7) / 8) ; 05/04/2022
			      C 
			      C ;ROOT_DIR_INODE equ 41
			      C ;ROOT_DIR_INODE equ 1; 07/09/2019 - Retro UNIX 386 v2
			      C 
			      C ;SIZE_Reserved1 equ 512 - (2+SIZE_FREE_MAP+2+SIZE_INODE_MAP) 
			      C 
			      C ;SuperBlock struc
			      C ;
			      C ;sb_FreeMapSize dw ?
			      C ;sb_FreeMap	db SIZE_FREE_MAP dup(?)
			      C ;sb_InodeMapSize dw ?
			      C ;sb_InodeMap	db SIZE_INODE_MAP dup(?)
			      C ;sb_Reserved1	db SIZE_Reserved1 dup(?)
			      C ;sb_Reserved2	db 512 dup(?)
			      C ;
			      C ;SuperBlock ends
			      C 
			      C ; 14/01/2020 - Extended sections/divisions (consequental sectors)
			      C ;	     - (for swapping, configuration, boot space etc.)	
			      C 
			      C ; 21/12/2019
			      C ; 19/12/2019 (UNIXHDFS.COM, RUFSHDI.ASM)
			      C ; 01/09/2019 - Retro UNIX 386 v2 SuperBlock
			      C 
 0200			      C SuperBlock struc
			      C 
 0000  00000000		      C sb_Header	dd ?
 0004  00000000		      C sb_BootSectAddr dd ?  ; Hidden Sectors
 0008  00000000		      C sb_VolumeSize	dd ?  ; Entire Volume/Partition Size (includes ext. volume)	
 000C  00000000		      C sb_Version	dd ?
 0010  00000000		      C sb_BlockSize	dd ?
 0014  00000000		      C sb_InodeCount	dd ? 	
 0018  00000000		      C sb_FreeMapAddr	dd ?
 001C  00000000		      C sb_FreeMapSize  dd ?
 0020  00000000		      C sb_InodeMapAddr	dd ?
 0024  00000000		      C sb_InodeMapSize dd ?
 0028  00000000		      C sb_InodeTblAddr dd ?
 002C  00000000		      C sb_InodeTblSize dd ?
 0030  00000000		      C sb_FreeInodes	dd ?
 0034  00000000		      C sb_FirstFreeIno dd ?
 0038  00000000		      C sb_FreeBlocks	dd ?
 003C  00000000		      C sb_FirstFreeBlk dd ?
 0040  0013 [		      C sb_BootSecParms db 19 dup(?) ; v1 ; 19/12/2019
        00
       ]
 0053  0005 [		      C sb_BSExtension	db 5 dup(?) ; v2 HDFS ; 19/12/2019
        00
       ]
 0058  00000000		      C sb_Status	dd ? ; 19/12/2019
 005C  00000000		      C sb_ModifTime	dd ?
 0060  00000000		      C sb_ExtdVolTbl	dd 0 ; 14/01/2020 ; Extended Volume Start/Table Address
 0064  00000000		      C sb_ExtdVolSize	dd 0 ; 14/01/2020 ; Extended Volume (swap section etc.) Size	
 0068  00		      C sb_LBA_rw	db 0 ; 03/10/2019
 0069  00		      C sb_ClusterSize	db 0 ; 03/10/2019
 006A  00		      C sb_ReadOnly	db 0 ; 03/10/2019
 006B  00		      C sb_Mounted	db 0 ; 03/10/2019
 006C  00000000		      C sb_MountInode	dd 0 ; 03/10/2019
 0070  00		      C sb_DevMajor	db 0 ; 03/10/2019
 0071  00		      C sb_DevMinor	db 0 ; 03/10/2019
 0072  00		      C sb_LongName	db 0 ; 03/10/2019
 0073  00		      C sb_Direntry32	db 0 ; 03/10/2019
 0074  0188 [		      C sb_Reserved	db 508-116 dup(?) ; Must be 0 for current RUFS version
        00
       ]
 01FC  00000000		      C sb_Footer	dd ?
			      C 
			      C SuperBlock ends
			      C 
			      C ; 14/01/2020
 = sb_BootSecAddr	      C sb_HiddenSects equ sb_BootSecAddr
 = sb_VolumeSize	      C sb_TotalSects equ sb_VolumeSize
			      C 
			      C ; 21/12/2019
			      C ; 19/12/2019 - Retro UNIX 386 v2 HD (071h) partition boot sector 
			      C ;		(RUFSHDI.ASM)
			      C ; 04/12/2019
			      C ; 03/10/2019 - Retro UNIX 386 v2 
			      C ; Hard Disk Partition (71h) Boot Sector Parameters
			      C 
			      C ;RUFS struc
			      C ;bsJumpCode     dw ? ; 0EB, 13h ; jmp short @f  	
			      C ;bsFSystemID    db 4 dup(?)  ;'RUFS'
			      C ;bsVolumeSerial dd ?
			      C ;bsDriveID      dw ? ; 'hd'
			      C ;bsDriveNumber  db ? ; 80h
			      C ;bsReserved     db ? ; 0 = 512 bytes/sector CHS, 1 = LBA
			      C ;bsSecPerTrack  db ? ; 63,17
			      C ;bsHeads        db ? ; 8 to 255 (may be 2 to 255) 
			      C ;bsCylinders    dw ? ; 1 to 1024 (bsTracks)
			      C ;bs_BF_I_number dw 0 ; startup (boot) file inode number
			      C ;bsMagic	db 0 ; '@' ; magic byte !
			      C ;bsPartitionID: db 0 ; 71h ; Retro UNIX 386 partition/volume ; 19/12/2019
			      C ;bsHiddenSects: dd 0 ; Hidden sectors (Boot Sector LBA)	; 19/12/2019
			      C ;;@@:
			      C ;RUFS ends
			      C 
			      C ; UNIX v1 I-node Flags: 
			      C ; 1000000000000000b 	i-node is allocated (8000h)
			      C ; 0100000000000000b	directory (4000h)
			      C ; 0010000000000000b	file has been modified (2000h)		 	
			      C ; 0001000000000000b	large file (1000h)
			      C ; 0000000000100000b	set user id on execution (20h)
			      C ; 0000000000010000b	executable (10h)
			      C ; 0000000000001000b	read, owner (8)
			      C ; 0000000000000100b	write, owner (4)
			      C ; 0000000000000010b	read, non-owner (2)
			      C ; 0000000000000001b	write, non-owner (1)
			      C 
			      C ; UNIX v7 I-node Flags: 
			      C ; 1000000000000000b 	IFREG - regular file (8000h)
			      C ; 0100000000000000b	IFDIR - directory (4000h)
			      C ; 0010000000000000b	IFCHR - character special (2000h)
			      C ; 0001000000000000b	reserved (1000h)
			      C ; 0000100000000000b	ISUID - set user id on exec (800h)		 	
			      C ; 0000010000000000b	ISGID - set group id on exec (400h)
			      C ; 0000001000000000b	ISVTX - save swapped text (200h)
			      C ; 0000000100000000b	IREAD - read, owner (100h)
			      C ; 0000000010000000b	IWRITE - write,owner (80h)
			      C ; 0000000001000000b	IEXEC - execute, owner (40h)
			      C ; 0000000000100000b	read, group (20h)
			      C ; 0000000000010000b	write, group (10h)
			      C ; 0000000000001000b	execute, group (08h)
			      C ; 0000000000000100b	read, others (04h)
			      C ; 0000000000000010b	write, others (02h)
			      C ; 0000000000000001b	execute, others (01h)
			      C 
			      C ; UNIX SysV I-node Flags: (di_mode)
			      C ; 1000000000000000b 	IFREG - regular file (8000h)
			      C ; 0100000000000000b	IFDIR - directory (4000h)
			      C ; 0010000000000000b	IFCHR - character special (2000h)
			      C ; 0001000000000000b	IFIFO - fifo special (1000h)
			      C ; 0000100000000000b	ISUID - set user id on exec (800h)		 	
			      C ; 0000010000000000b	ISGID - set group id on exec (400h)
			      C ; 0000001000000000b	ISVTX - save swapped text (200h)
			      C ; 0000000100000000b	IREAD - read, owner (100h)
			      C ; 0000000010000000b	IWRITE - write,owner (80h)
			      C ; 0000000001000000b	IEXEC - execute, owner (40h)
			      C ; 0000000000100000b	read, group (20h)
			      C ; 0000000000010000b	write, group (10h)
			      C ; 0000000000001000b	execute, group (08h)
			      C ; 0000000000000100b	read, others (04h)
			      C ; 0000000000000010b	write, others (02h)
			      C ; 0000000000000001b	execute, others (01h)
			      C 
			      C ; IFREG	equ 8000h	; /* regular */
			      C ; IFMPB	equ 7000h	; /* multiplexed block special */
			      C ; IFBLK	equ 6000h	; /* block special */
			      C ; IFNAM	equ 5000h	; /* special named file - subtype in r_dev *
			      C ; IFDIR	equ 4000h	; /* directory */
			      C ; IFMPC	equ 3000h	; /* multiplexed char special */
			      C ; IFCHR	equ 2000h	; /* character special */
			      C ; IFIFO	equ 1000h	; /* fifo special */
			      C ; ISUID	equ 0800h	; /* set user id on execution */
			      C ; ISGID	equ 0400h	; /* set group id on execution */
			      C ; ISVTX	equ 0200h	; /* save swapped text even after use */
			      C ; IREAD equ 0100h	; /* read permission */
			      C ; IWRITE equ 0080h	; /* write permission */
			      C ; IEXEC	equ 0040h	; /* execute permission */
			      C 
			      C ; Retro UNIX 386 v2 I-node Flags: (di_mode) ;; FIRST DRAFT - 01/09/2019
			      C ; 1000000000000000b 	IFREG - regular file (8000h)
			      C ; 0100000000000000b	IFDIR - directory (4000h)
			      C ; 0010000000000000b	IFCHR - character special (2000h)
			      C ; 0001000000000000b	IFIFO - fifo special (1000h)
			      C ; 0000100000000000b	ISUID - set user id on exec (800h)		 	
			      C ; 0000010000000000b	ISGID - set group id on exec (400h)
			      C ; 0000001000000000b	IEXTD - use extents (200h)
			      C ; 0000000100000000b	IREAD - read, owner (100h)
			      C ; 0000000010000000b	IWRITE - write,owner (80h)
			      C ; 0000000001000000b	IEXEC - execute, owner (40h)
			      C ; 0000000000100000b	read, group (20h)
			      C ; 0000000000010000b	write, group (10h)
			      C ; 0000000000001000b	execute, group (08h)
			      C ; 0000000000000100b	read, others (04hq	)
			      C ; 0000000000000010b	write, others (02h)
			      C ; 0000000000000001b	execute, others (01h)
			      C 
			      C ;; SECOND DRAFT - 03/09/2019
			      C 
			      C ; Retro UNIX 386 v2 I-node Flags: (di_mode) for files
			      C ; 1000000000000000b 	IFREG - 1 = regular file (8000h)
			      C ; 0100000000000000b	IFDIR - 1 = directory (4000h)
			      C ; 0010000000000000b	ISIZ2 - sizing higher bit (2000h)
			      C ; 0001000000000000b	ISIZ1 - sizing lower bit (1000h)
			      C ; 0000100000000000b	ISUID - set user id on exec (800h)		 	
			      C ; 0000010000000000b	ISGID - set group id on exec (400h)
			      C ; 0000001000000000b	IEXTT - 1 = use extents (200h)
			      C ; 0000000100000000b	IREAD - read, owner (100h)
			      C ; 0000000010000000b	IWRITE - write,owner (80h)
			      C ; 0000000001000000b	IEXEC - execute, owner (40h)
			      C ; 0000000000100000b	read, group (20h)
			      C ; 0000000000010000b	write, group (10h)
			      C ; 0000000000001000b	execute, group (08h)
			      C ; 0000000000000100b	read, others (04h)
			      C ; 0000000000000010b	write, others (02h)
			      C ; 0000000000000001b	execute, others (01h)
			      C 
			      C ;; THIRD DRAFT - 15/09/2019
			      C ; 18/12/2019 - Mounted flag - IFMNT (2000h) ; RUFSHDI.ASM
			      C 
			      C ; Retro UNIX 386 v2 I-node Flags: (di_mode) for files
			      C ; 1000000000000000b 	IFREG - 1 = regular file (8000h)
			      C ; 0100000000000000b	IFDIR - 1 = directory (4000h)
			      C ; 0010000000000000b	IRSVD - 0 = reserved bit (2000h)  ; Mounted flag
			      C ; 0001000000000000b	ILARG - Large file addressing bit (1000h)
			      C ; 0000100000000000b	ISUID - set user id on exec (800h)		 	
			      C ; 0000010000000000b	ISGID - set group id on exec (400h)
			      C ; 0000001000000000b	IEXTT - 1 = use extents (200h)
			      C ; 0000000100000000b	IREAD - read, owner (100h)
			      C ; 0000000010000000b	IWRITE - write,owner (80h)
			      C ; 0000000001000000b	IEXEC - execute, owner (40h)
			      C ; 0000000000100000b	read, group (20h)
			      C ; 0000000000010000b	write, group (10h)
			      C ; 0000000000001000b	execute, group (08h)
			      C ; 0000000000000100b	read, others (04h)
			      C ; 0000000000000010b	write, others (02h)
			      C ; 0000000000000001b	execute, others (01h)
			      C 
			      C ; Retro UNIX 386 v2 I-node Flags: (di_mode) for devices
			      C ; 1000000000000000b 	IFREG - 0 = device file (8000h)
			      C ; 0100000000000000b	IFBLK - 1 = block device (4000h)
			      C ; 0010000000000000b	IFCHR - character special (2000h) -always 1-
			      C ; 0001000000000000b	IFIFO - fifo special (1000h)
			      C ; 0000100000000000b	ISUID - set user id on exec (800h)		 	
			      C ; 0000010000000000b	ISGID - set group id on exec (400h)
			      C ; 0000001000000000b	IEXTR - 1 = external device driver (200h)
			      C ; 0000000100000000b	IREAD - read, owner (100h)
			      C ; 0000000010000000b	IWRITE - write,owner (80h)
			      C ; 0000000001000000b	IEXEC - execute, owner (40h) 
			      C ; 0000000000100000b	read, group (20h)
			      C ; 0000000000010000b	write, group (10h)
			      C ; 0000000000001000b	execute, group (08h)
			      C ; 0000000000000100b	read, others (04h)
			      C ; 0000000000000010b	write, others (02h)
			      C ; 0000000000000001b	execute, others (01h)
			      C 
			      C ; 15/09/2019
			      C ; Flag bit 12 - 0 small file addressing
			      C ; -------------------------------------
			      C ; Disk Block Pointers
			      C ;
			      C ; di_addr[0] = direct block 0 address
			      C ; di_addr[4] = direct block 1 address
			      C ; di_addr[8] = direct block 2 address
			      C ; di_addr[12] = direct block 3 address
			      C ; di_addr[16] = direct block 4 address
			      C ; di_addr[20] = direct block 5 address
			      C ; di_addr[24] = direct block 6 address
			      C ; di_addr[28] = direct block 7 address
			      C ; di_addr[32] = direct block 8 address
			      C ; di_addr[36] = direct block 9 address
			      C 
			      C ; Flag bit 12 - 1 large file addresdsing
			      C ; -------------------------------------
			      C ; Disk Block Pointers
			      C ;
			      C ; di_addr[0] = indirect block 0 address
			      C ; di_addr[4] = indirect block 1 address
			      C ; di_addr[8] = indirect block 2 address
			      C ; di_addr[12] = indirect block 3 address
			      C ; di_addr[16] = indirect block 4 address
			      C ; di_addr[20] = indirect block 5 address
			      C ; di_addr[24] = indirect block 6 address
			      C ; di_addr[28] = indirect block 7 address
			      C ; di_addr[32] = double indirect block (0) address
			      C ; di_addr[36] = triple indirect block (0) address
			      C 
			      C ; 15/09/2019
			      C ; Flag bit 8 (if it is set)
			      C ; -----------------------------------
			      C ; Use extents (contiguous blocks)
			      C ;
			      C ; di_addr[0] = extent 0 start address (or indirect 0)
			      C ; di_addr[4] = extent 0 block count (or indirect 0 bc)
			      C ; di_addr[8] = extent 1 start address (or indirect 1)
			      C ; di_addr[12] = extent 1 block count (or indirect 1 bc)
			      C ; di_addr[16] = extent 2 start address (or indirect 2)
			      C ; di_addr[20] = extent 2 block count (or indirect 2 bc)
			      C ; di_addr[24] = extent 3 start address (or double indirect)
			      C ; di_addr[28] = extent 3 block count (or double indirect bc)
			      C ; di_addr[32] = extent 4 start address (or triple indirect)
			      C ; di_addr[36] = extent 4 block count (or triple indirect bc)
			      C 
			      C ; UNIX v7 I-node (on disk) : 
			      C ;
			      C ;struc dinode
			      C ;  .di_mode:  resw 1	; /* mode and type of file */
			      C ;  .di_nlink: resw 1	; /* number of links to file */
			      C ;  .di_uid:   resw 1 	; /* owner's user id */
			      C ;  .di_gid:   resw 1	; /* owner's group id */
			      C ;  .di_size:  resd 1	; /* number of bytes in file */
			      C ;  .di_addr:  resb 40 ; (3*13)+1 ; /* disk block addresses */
			      C ;  .di_atime: resd 1	; /* time last accessed */
			      C ;  .di_mtime: resd 1	; /* time last modified */
			      C ;  .di_ctime: resd 1	; /* time created */
			      C ;endstruc
			      C 
			      C ; (first draft)
			      C ; Retro UNIX 386 v2 I-node (on disk) : 
			      C ;
			      C ;struc dinode
			      C ;  .di_mode:  resw 1	; /* mode and type of file */
			      C ;  .di_nlink: resw 1	; /* number of links to file */
			      C ;  .di_uid:   resw 1	; /* owner's user id */
			      C ;  .di_gid:   resw 1	; /* owner's group id */
			      C ;  .di_size:  resd 1	; /* number of bytes in file */
			      C ;  .di_size_h: resw 1	; /* number of bytes in file */
			      C ;  .di_cssc: resb 1	; Cluster/Block size shift count - 1 ; 04/09/2019	
			      C ;  .di_bssc: resb 1	; Block/Sector size shift count - 1 ; 04/09/2019		
			      C ;  .di_addr:  resd 8 ; resb 32 ; /* disk block addresses */
			      C ;  .di_atime: resd 1	; /* time last accessed */
			      C ;  .di_mtime: resd 1	; /* time last modified */
			      C ;  .di_ctime: resd 1	; /* time created */
			      C ;  .di_reserved2: resd 1 ; reserved (zero)
			      C ;endstruc
			      C 
			      C ; 18/12/2019 ; RUFSHDI.ASM
			      C ; 15/09/2019 (second draft)
			      C ; Retro UNIX 386 v2 I-node (on disk) : 
			      C ;
			      C ;struc dinode
			      C ;  .di_mode:  resw 1	; /* mode and type of file */
			      C ;  .di_nlink: resw 1	; /* number of links to file */
			      C ;  .di_uid:   resw 1	; /* owner's user id */  - 0 to 655535 -
			      C ;  .di_gid:   resb 1	; /* owner's group id */ - o to 255 -
			      C ;  .di_size_h: resb 1	; /* number of bytes in file */ ; - byte 5 -
			      C ;  .di_size:  resd 1	; /* number of bytes in file */
			      C ;  .di_addr:  resd 10 ; resb 40 ; /* disk block addresses */
			      C ;  .di_atime: resd 1	; /* time last accessed */
			      C ;  .di_mtime: resd 1	; /* time last modified */
			      C ;  .di_ctime: resd 1	; /* time created */
			      C ;endstruc
			      C 
			      C ; 04/09/2019 - Retro UNIX 386 v2
			      C 
			      C ;BLOCK SIZE SHIFT COUNTS or STORAGE/DISK (SECTOR SIZE) TYPE
			      C ;----------------------------------------------------------
			      C ;0 = 512 bytes per sector floppy drive or hard disk
			      C ;1 = 1024 bytes per sector, tape drive
			      C ;2 = 2048 bytes per sector DVD, CDROM, new (2TB) hard disks
			      C 
			      C ;CLUSTER SIZE SHIFT COUNTS or FILE SYSTEM BLOCK SIZE
			      C ;----------------------------------------------------------
			      C ;0 = 1 block (1 sector)
			      C ;1 = 2 blocks
			      C ;2 = 4 blocks
			      C ;3 = 8 blocks
			      C ;4 = 16 blocks
			      C ;5 = 32 blocks
			      C ;6 = 64 blocks
			      C ;7 = 128 blocks
			      C ;8 = 256 blocks
			      C 
			      C ;SIZING LIMITS (as CLUSTER/BLOCK size) - cluster size = 1
			      C ;----------------------------------------------------------
			      C ; small - direct block addresses - 10 blocks (5120 bytes) 
			      C ; normal - indirect block addresses - 8*128 blocks (512KB) 
			      C ; large - double indirect blocks - 128*128 blks + norm (8MB+512KB)
			      C ; huge - triple indirect blocks - 128*128*128 blks (1GB+8MB+512KB)
			      C 
			      C ;SIZING LIMITS (as CLUSTER/BLOCK size) - cluster size = 8
			      C ;----------------------------------------------------------
			      C ; small - direct block addresses - 10*8 blocks (40960 bytes)  
			      C ; normal - indirect block addresses - 8*1024 blocks (4MB) 
			      C ; large - double indirect blocks - 1024*1024 blks + norm (512MB+4MB)
			      C ; huge - triple indirect blocks - 1024*1024*1024 blks (512GB+516MB)
			      C 
			      C ;15/09/2019
			      C ;NOTE: Addresses are in sector unit (512 bytes or 2048 bytes).
			      C ;      But, block (cluster) size is 1 or 8 sectors, default is 1 sector 	
			      C ;      (Cluster size for 2048 bytes/sector disks may be 2,4,8 sectors)
			      C  
			      C ;DISK ADDR AND FILE SIZE LIMITS FOR EXTENTS !!! LIMITS !!!
			      C ;----------------------------------------------------------
			      C ; (depending on free contiguous blocks/sectors on disk fs)
			      C ; direct - 5 extents - 2 tera bytes (avr. 400GB per extent)  
			      C ; indirect - 4*64 extents - 2TB (average 8GB per extent)
			      C ; double ind. - 4*64*64 extents - 2TB (avr. 128MB per ext.)
			      C ; triple ind. - 1048576 extents - 2TB (avr. 2MB per extent)
			      C 
			      C ; EXTENT SIZING FOR 8GB FILE !!! SAMPLE !!!
			      C ;----------------------------------------------------------
			      C ; direct - 4 extents - 8GB (average 2GB per extent)  
			      C ; indirect - 256 extents - 8GB (average 32MB per extent)
			      C ; double ind. - 16384 extents - 8GB (avr. 512KB per extent)
			      C ; triple ind. - 1048576 extents - 8GB (avr. 8KB per extent)
			      C 
 03C6			      C unix_fs_install proc near
			      C 	; 05/04/2022
			      C 	; 21/12/2019	
			      C 	; 04/09/2019
			      C 	; 01/09/2019 - Retro UNIX 386 v2
			      C 	; 8086 code by Erdogan Tan
			      C 	; 31/10/2012
			      C 	; 21/08/2012
			      C 	; 15/08/2012
			      C 	; 14/08/2012
			      C 	; 13/08/2012
			      C 	; 05/08/2012
			      C 	; 04/08/2012
			      C 	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/6/1972
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 	; NOTE: 
			      C 	; The "cold" unix (u0, PDP-11) code is modified for fd0 
			      C 	;  -> 1.44 MB floppy disk (Retro UNIX v1, 8086) fs
			      C 
			      C 	; 21/12/2019
			      C 	; 19/12/2019 ; RUFSHDI.ASM
 03C6  BE 1DD0 R	      C 	mov	si, offset boot_sector.bsFSystemID
 03C9  BF 05C0 R	      C 	mov	di, offset systm.sb_BootSecParms
			      C 	;mov	cx, 19
			      C 	;rep	movsb
			      C 	; 19/12/2019
 03CC  B9 000C		      C 	mov	cx, 12 
 03CF  F3/ A5		      C 	rep	movsw
			      C 
			      C 	; 06/09/2019
			      C 	;mov byte ptr [buff_d], dl ; 14/8/2012, drive number
			      C 
			      C 	;mov word ptr [systm.sb_FreemapSize], SIZE_FREE_MAP ; 360
			      C 	;mov word ptr [systm.sb_InodeMapSize], SIZE_INODE_MAP ; 32
			      C 
			      C 	; 01/09/2019
 03D1  C7 06 0580 R 0171      C 	mov word ptr [systm.sb_Header], 0171h
 03D7  C6 06 0582 R A1	      C 	mov byte ptr [systm.sb_Header+2], 0A1h
			      C 	;mov dword ptr [systm.sb_BootSectAddr], 0
 03DC  C7 06 0588 R 0B40      C 	mov word ptr [systm.sb_VolumeSize], DISK_SIZE ; 2880
 03E2  C6 06 058C R 01	      C 	mov byte ptr [systm.sb_Version], 1
			      C 	;mov dword ptr [systm.sb_BlockSize], 0
 03E7  C7 06 0594 R 0100      C 	mov word ptr [systm.sb_InodeCount], 256
 03ED  C6 06 0598 R 03	      C 	mov byte ptr [systm.sb_FreeMapAddr], 3	
 03F2  C7 06 059C R 0168      C 	mov word ptr [systm.sb_FreemapSize], SIZE_FREE_MAP ; 360
 03F8  C6 06 05A0 R 02	      C 	mov byte ptr [systm.sb_InodeMapAddr], 2
 03FD  C6 06 05A4 R 20	      C 	mov byte ptr [systm.sb_InodeMapSize], SIZE_INODE_MAP ; 32
 0402  C6 06 05A8 R 04	      C 	mov byte ptr [systm.sb_InodeTblAddr], 4
 0407  C6 06 05AC R 20	      C 	mov byte ptr [systm.sb_InodeTblSize], 32				
			      C 	;mov dword ptr [systm.sb_FreeInodes], 0
			      C 	;mov dword ptr [systm.sb_FirstFreeIno], 0FFFFFFFFh
			      C 	;mov dword ptr [systm.sb_FreeBlocks], 0FFFFFFFFh
			      C 	;mov dword ptr [systm.sb_FirstFreeBlock], 0FFFFFFFFh
			      C 	;mov byte ptr [systm.sb_Status], 0
			      C 	;mov dword ptr [systm.sb_ModifTime], 0FFFFFFFFh
			      C 	; 08/09/2019
 040C  C7 06 077C R A100      C 	mov word ptr [systm.sb_Footer], 0A100h
 0412  C7 06 077E R 7101      C 	mov word ptr [systm.sb_Footer+2], 7101h
			      C 
 0418  B8 0B40		      C 	mov ax, DISK_SIZE ; 2880 blocks/sectors
 041B			      C uinstall_1:
			      C ;set bit AX/R1 in free storage map in core/memory
 041B  48		      C 	dec ax ; R1
			      C 	;call free
			      C 
 041C  E8 153B		      C 	call free_3
 041F  09 17		      C 	or word ptr [BX], dx ; set bit for this block (available)
			      C 			     ; bis r3, (r2)	
			      C 
			      C 	;cmp ax, 32+4 ; 07/09/2019
 0421  83 F8 24		      C 	cmp ax, INODE_LIST_BLOCKS + 4 ; 15/8/2012
 0424  77 F5		      C         ja short uinstall_1
			      C 
			      C 	; 02/09/2019
			      C 	;mov word ptr [buff_c], 1 ; flag for clear procedure
 0426  C6 06 0578 R 01	      C 	mov byte ptr [buff_c], 1 ; 23/01/2020
			      C 
			      C ; zero i-list	
 042B  48		      C 	dec ax
			      C 
			      C ; 05/04/2022
			      C ;	; 01/09/2019
			      C ;	push ax
			      C ;uninstall_11:
			      C ;	call free_3
			      C ;
			      C ;	not dx ; masking bit is '0' and others are '1'
			      C ;	and word ptr [BX], dx	
			      C ;	; 0 -> allocated
			      C ;
			      C ;	dec ax
			      C ;	jnz short uninstall_11
			      C ;
			      C ;	pop ax 	
			      C 
			      C 	; 07/09/2019 - Retro UNIX 386 v2
 042C			      C uinstall_9:
			      C 	; AX (R1) = Block number
			      C 
 042C  E8 1548		      C 	call clear 	
 042F  72 07		      C         jc short uinstall_2 ; rw_error
			      C 
 0431  23 C0		      C 	and ax, ax
 0433  74 04		      C 	jz short uinstall_3
			      C 
 0435  48		      C 	dec ax
 0436  EB F4		      C 	jmp short uinstall_9
			      C 
 0438			      C uinstall_2:
 0438  C3		      C 	retn
			      C 
 0439			      C uinstall_3:
			      C 	; 15/09/2019
			      C 	; 02/09/2019 - Retro UNIX 386 v2
			      C 	; set superblock (m) and inode (a/m/c) times
			      C 
 0439  E8 1595		      C 	call epoch
 043C  A3 05DC R	      C 	mov word ptr [systm.sb_ModifTime], ax
 043F  89 16 05DE R	      C 	mov word ptr [systm.sb_ModifTime+2], dx
 0443  C6 06 1AFF R 01	      C 	mov byte ptr [smod], 1 ; super block modified flag 
			      C 
 0448  BF 0A9C R	      C 	mov di, offset inodes+52 ; 15/09/2019	
 044B  B9 001A		      C 	mov cx, 26
 044E			      C uinstall_12:
 044E  AB		      C 	stosw ; mov [di], ax   ; access (inode modification) time
 044F  92		      C 	xchg ax, dx
 0450  AB		      C 	stosw ; mov [di+2], dx
 0451  92		      C 	xchg ax, dx
 0452  AB		      C 	stosw ; mov [di+4], ax ; (file) modification time
 0453  92		      C 	xchg ax, dx
 0454  AB		      C 	stosw ; mov [di+6], dx
 0455  92		      C 	xchg ax, dx
 0456  AB		      C 	stosw ; mov [di+8], ax ; (file & inode) creation time
 0457  92		      C 	xchg ax, dx
 0458  AB		      C 	stosw ; mov [di+10], dx		
 0459  92		      C 	xchg ax, dx	
 045A  83 C7 34		      C 	add di, 64-12 ; next inode
 045D  E2 EF		      C 	loop uinstall_12
			      C 
			      C 	; 02/09/2019
			      C 	; write default/initial inodes - Retro UNIX 386 v2
 045F  C7 06 0572 R 0A68 R    C 	mov word ptr [buff_o], offset inodes
			      C 	;mov word ptr [buff_c], 32/8 ; 4 sectors for 32 inodes
 0465  C6 06 0578 R 04	      C 	mov byte ptr [buff_c], 32/8 ; 23/01/2020	
 046A  C7 06 0574 R 0004      C 	mov word ptr [buff_s], 4 ; Start sector of inode table
 0470			      C uinstall_13:	
 0470  C6 06 0576 R 01	      C 	mov byte ptr [buff_m], 1 ; modified
 0475  E8 1284		      C 	call dskwr
 0478  72 2C		      C 	jc short uinstall_10 ; rw_error
			      C 	;dec word ptr [buff_c]	
 047A  FE 0E 0578 R	      C 	dec byte ptr [buff_c] ; 23/01/2020
 047E  74 0C		      C 	jz short uinstall_5
 0480  FF 06 0574 R	      C 	inc word ptr [buff_s] ; next sector
 0484  81 06 0572 R 0200      C 	add word ptr [buff_o], 512 ; next 8 inodes
 048A  EB E4		      C 	jmp short uinstall_13 ; loop
			      C 	
			      C 	;; initialize inodes for special files (1 to 40)
			      C 	;mov bx, 40 ; BX = R1,  41 = root directory i-number
			      C ;uinstall_4:
			      C 	;call iget
			      C         ;jc short uinstall_10 ; rw_error
			      C 
			      C 	;mov word ptr [i_flgs], 800Fh ;  1000000000001111b
			      C 	;mov byte ptr [i_nlks], 1
			      C         ;call setimod
			      C 	;dec bx
			      C 	;jnz short uinstall_4
			      C 
 048C			      C uinstall_5:
			      C 	; 02/09/2019 - Retro UNIX 386 v2
 048C  C7 06 0572 R 1270 R    C 	mov word ptr [buff_o], offset Buffer ; reset buffer offset pointer
			      C 
 0492  BB 0001		      C 	mov bx, 1  ; start from root directory inode number
 0495			      C uinstall_14:
 0495  E8 132C		      C 	call imap
			      C 	
 0498  87 DA		      C 	xchg bx,dx
 049A  08 07		      C 	or byte ptr [BX], al ; set the bit to indicate the i-node
			      C 			     ; is not available/free
 049C  87 DA		      C 	xchg bx, dx
 049E  83 FB 1A		      C 	cmp bx, 26
 04A1  73 04		      C 	jnb short uinstall_6
 04A3  43		      C 	inc bx
 04A4  EB EF		      C 	jmp short uinstall_14
			      C 
 04A6			      C uinstall_10: ; 06/09/2019
 04A6  C3		      C 	retn
			      C 
 04A7			      C uinstall_6:
			      C 	; 02/09/2019 - Retro UNIX 386 v2
			      C 	; im_buffer = Buffer
			      C 	;mov word ptr [buff_o], offset im_buffer ; inode map buffer
			      C 
 04A7  C7 06 0574 R 0002      C 	mov word ptr [buff_s], 2 ; Inode map sector
 04AD  C6 06 0576 R 01	      C 	mov byte ptr [buff_m], 1 ; modified
 04B2  E8 1247		      C 	call dskwr
 04B5  72 EF		      C 	jc short uinstall_10 ; rw_error
			      C 
			      C 	;mov word ptr [buff_o], offset Buffer ; reset buffer offset
			      C 
			      C 	; clear buffer
 04B7  33 C0		      C 	xor ax, ax
 04B9  8B 3E 0572 R	      C 	mov di, word ptr [buff_o]
 04BD  B9 0100		      C 	mov cx, 256
 04C0  F3/ AB		      C 	rep stosw
			      C 
			      C 	; 02/09/2019 - Retro UNIX 386 v2
			      C 	; make & write directories
			      C 
 04C2  BF 0780 R	      C 	mov di, offset dirs
 04C5  BB 0001		      C 	mov bx, 1 ; start from inode number of root directory
			      C 	;mov si, offset inodes  ; root_inode
			      C 	;add si, 8 ; si points to directory size in root inode
			      C 	; 09/09/2019
 04C8  BE 0A5A R	      C 	mov si, offset i_dir_sizes
 04CB			      C uinstall_7:
			      C 	;mov ax, [si]
 04CB  AD		      C 	lodsw ; 09/09/2019
 04CC  A3 0A12 R	      C 	mov word ptr [u_count], ax
			      C 	
 04CF  89 3E 0A14 R	      C         mov word ptr [u_base], di
 04D3  03 F8		      C 	add di, ax
			      C 	
 04D5  C7 06 0A16 R 0A10 R    C 	mov word ptr [u_fofp], offset u_off ; 31/10/2012
			      C 	
 04DB  C7 06 0A10 R 0000      C         mov word ptr [u_off], 0
			      C 	
 04E1  E8 12FA		      C 	call writei
 04E4  72 C0		      C 	jc short uinstall_10 ; rw_error
			      C 
 04E6  83 FB 07		      C 	cmp bx, 7 ; inode number of mnt directory
 04E9  73 03		      C 	jnb short uinstall_8
			      C 
			      C 	;add si, 64 ; now, si points to dir size word of next inode
			      C 
 04EB  43		      C 	inc bx
 04EC  EB DD		      C 	jmp short uinstall_7
			      C 
			      C 	;;push di
			      C 	;;push si
			      C 	;mov si, offset idata ; base address of assembled dirs
			      C 	;mov di, offset dirs  ; directory data for assembled dirs
			      C 	;mov bx, 41
			      C ;uinstall_6:
			      C 	;call imap
			      C 	;xchg bx,dx ; 13/8/2012
			      C 	;; 21/8/2012 (AX -> AL, word ptr [BX] -> byte ptr [BX])
			      C 	;or byte ptr [BX], al ; BX/DX = R2, ax = mq
			      C 	;		     ; set the bit to indicate the i-node
			      C 	;		     ; is not available/free
			      C 	;xchg bx, dx ; 13/8/2012
			      C 	;call iget
			      C 	;;jnc short uinstall_7
			      C         ;jc short uinstall_10  ; rw_error
			      C ;@@:
			      C 	;;pop si
			      C 	;;pop di
			      C 	;;jmp short uinstall_10 ; rw_error
			      C 
			      C ;uinstall_7:
			      C 	;; SI, DI registers are not modifed 
			      C 	;; in imap, iget, setimod and writei procedures
			      C 	;lodsw
			      C         ;mov word ptr [i_flgs], ax
			      C 	;lodsb
			      C         ;mov byte ptr [i_nlks], al
			      C 	;lodsb
			      C         ;mov byte ptr [i_uid], al
			      C 	;call setimod
			      C 	;lodsw
			      C         ;mov word ptr [u_count], ax
			      C 	;
			      C 	;add si, 26 ; now, si points 1st word of next inode
			      C 	;
			      C         ;mov word ptr [u_base], di
			      C 	;add di, ax
			      C 	;
			      C 	;mov word ptr [u_fofp], offset u_off ; 31/10/2012
			      C 	;
			      C         ;mov word ptr [u_off], 0
			      C 	;
			      C 	;call writei
			      C 	;;jc short @b
			      C         ;jc short uinstall_10 ; rw_error
			      C 	;
			      C 	;cmp bx, 46
			      C 	;jnb short uinstall_8
			      C 	;
			      C 	;inc bx
			      C 	;jmp short uinstall_6
			      C 
 04EE			      C uinstall_8:	
			      C 	;pop si
			      C 	;pop di
			      C 
			      C 	; 06/09/2019
 04EE  C7 06 0572 R 1470 R    C 	mov word ptr [buff_o], offset fbm_buffer ; free blocks map buffer
 04F4  C7 06 0574 R 0003      C 	mov word ptr [buff_s], 3 ; Free blocks map sector
 04FA  C6 06 0576 R 01	      C 	mov byte ptr [buff_m], 1 ; modified
			      C 	;mov word ptr [buff_c], 1
 04FF  C6 06 0578 R 01	      C 	mov byte ptr [buff_c], 1 ; sector count = 1 
 0504  E8 11F5		      C 	call dskwr
 0507  72 9D		      C 	jc short uinstall_10 ; rw_error
			      C 
			      C ;uinstall_9:
			      C 	;call sync ; write modified super block and buffer to disk
			      C 	;;jc short rw_error
			      C 
			      C ;uinstall_10:
			      C 	;retn
			      C 
 0509			      C unix_fs_install endp
			      C 
 0509			      C sync 	proc near
			      C 	; 14/03/2022
			      C 	; 05/09/2019
			      C 	; 02/09/2019 - Retro UNIX 386 v2
			      C 	; 12/8/2012
			      C 	; updates super block and the last i-node on disk 
			      C 	; if modified
			      C 	; e.g. smod = 1, imod = 1, buffer_m = 1
			      C 	;
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 
			      C 	; 02/09/2019 - Retro UNIX 386 v2
 0509  C7 06 0572 R 1270 R    C 	mov word ptr [buff_o], offset Buffer ; reset buffer offset	
			      C 
 050F  33 DB		      C 	xor bx, bx ; mov bx, 0
 0511  E8 115C		      C 	call iget
 0514  72 55		      C 	jc short sync_2
			      C 
 0516  33 C0		      C 	xor ax, ax
 0518  38 06 1AFF R	      C 	cmp byte ptr [smod], al ; 0
 051C  76 50		      C 	jna short sync_3
			      C 
			      C 	; 05/09/2019
 051E			      C calc_free_blocks:
 051E  C6 06 05B0 R E6	      C 	mov byte ptr [systm.sb_FreeInodes], 256-26
 0523  C6 06 05B4 R 1B	      C 	mov byte ptr [systm.sb_FirstFreeIno], 27
 0528  BE 1470 R	      C 	mov si, offset fbm_buffer
 052B  B9 0168		      C 	mov cx, SIZE_FREE_MAP ; 360
 052E  33 D2		      C 	xor dx, dx
 0530  33 DB		      C 	xor bx, bx
 0532			      C sync_4:
 0532  51		      C 	push cx
 0533  AC		      C 	lodsb
			      C 	;mov cl, 8
 0534  B9 0008		      C 	mov cx, 8 ; 14/03/2022 (BugFix)
 0537			      C sync_5:
 0537  D0 E8		      C 	shr al, 1
 0539  73 09		      C 	jnc short sync_7
			      C 	; 07/09/2019
 053B  23 D2		      C 	and dx, dx
 053D  75 04		      C 	jnz short sync_6
 053F  89 1E 05BC R	      C 	mov word ptr [systm.sb_FirstFreeBlk], bx
 0543			      C sync_6:
 0543  42		      C 	inc dx
 0544			      C sync_7:
 0544  43		      C 	inc bx
 0545  E2 F0		      C 	loop sync_5
 0547  59		      C 	pop cx
 0548  E2 E8		      C 	loop sync_4
 054A			      C sync_8:
 054A  89 16 05B8 R	      C 	mov word ptr [systm.sb_FreeBlocks], dx
			      C 
			      C 	; 02/09/2019
 054E  E8 1480		      C 	call epoch
			      C 	;mov dword ptr [systm.sb_ModifTime], 0FFFFFFFFh
			      C 	; 04/09/2019
 0551  A3 05DC R	      C 	mov word ptr [systm.sb_ModifTime], ax
 0554  89 16 05DE R	      C 	mov word ptr [systm.sb_ModifTime+2], dx
 0558			      C sync_1:
 0558  2B C0		      C 	sub ax, ax ; 07/09/2019 
 055A  A2 1AFF R	      C 	mov byte ptr [smod], al ; 0
			      C 
			      C 	;mov cx, 256
			      C 	;mov si, offset Systm
			      C 	;mov di, offset Buffer
			      C 	;rep movsw
			      C 
			      C 	; 02/09/2019 - Retro UNIX 386 v2
 055D  C7 06 0572 R 0580 R    C 	mov word ptr [buff_o], offset Systm	
			      C 
 0563  FE C0		      C 	inc al
			      C 
 0565  A3 0574 R	      C         mov word ptr [buff_s], ax ; 1 ; superblock sector number
			      C 	;mov byte ptr [buff_w], al
			      C 	;call poke
			      C 	; 07/09/2019
 0568  E8 1191		      C 	call dskwr
 056B			      C sync_2:
 056B  A1 1AFD R	      C 	mov ax, word ptr [Error]
 056E			      C sync_3:
 056E  C3		      C 	retn	
			      C 
 056F			      C sync	endp
			      C 
			      C align 2
 0570  00		      C 	db 0
 0571 00		      C buff_d: db 0
 0572 1270 R		      C buff_o: dw offset Buffer ; 02/09/2019 - Retro UNIX 386 v2
 0574 FFFF		      C buff_s: dw 0FFFFh ; Buffer sector
 0576 00		      C buff_m:	db 0 ; buffer changed/modified (dirty) flag
 0577 00		      C buff_w: db 0 ; read/write flag (write=1, read=0)
			      C ;buff_c: dw 0 ; count ; 05/09/2019
 0578 00		      C buff_c:	db 0 ; count ; 23/01/2020
			      C 
			      C align 16
			      C 
 0580			      C systm: ; superblock
 0580  0200 [		      C db 512 dup(0)
        00
       ]
			      C 
			      C ; 01/09/2019 - Retro UNIX 386 v2
 0780			      C dirs:
 0780			      C root_dir: ; root directory
 0780  0001		      C 		dw 1
 0782  2E		      C 		db "."
 0783  000D [		      C 		db 13 dup(0)
        00
       ]
 0790  0001		      C 		dw 1
 0792  2E 2E		      C 		db ".."
 0794  000C [		      C 		db 12 dup(0)
        00
       ]
 07A0  0002		      C 		dw 2
 07A2  64 65 76		      C 		db "dev"
 07A5  000B [		      C 		db 11 dup(0)
        00
       ]
 07B0  0003		      C 		dw 3
 07B2  62 69 6E		      C 		db "bin"
 07B5  000B [		      C 		db 11 dup(0)
        00
       ]
 07C0  0004		      C 		dw 4
 07C2  65 74 63		      C 		db "etc"
 07C5  000B [		      C 		db 11 dup(0)
        00
       ]
 07D0  0005		      C 		dw 5
 07D2  75 73 72		      C 		db "usr"
 07D5  000B [		      C 		db 11 dup(0)
        00
       ]
 07E0  0006		      C 		dw 6
 07E2  74 6D 70		      C 		db "tmp"
 07E5  000B [		      C 		db 11 dup(0)
        00
       ]
 07F0  0007		      C 		dw 7
 07F2  6D 6E 74		      C 		db "mnt"
 07F5  000B [		      C 		db 11 dup(0)
        00
       ]
			      C 
			      C ; 04/12/2015 (14 byte file name modifications)
			      C ; 5/8/2012
			      C ; 14/7/2012
			      C ;dirs:
			      C ;root_dir: ; root directory
			      C ;		dw 41
			      C ;		db ".."
			      C ;		db 12 dup(0)
			      C ;		dw 41
			      C ;		db "."
			      C ;		db 13 dup(0)
			      C ;		dw 42
			      C ;		db "dev"
			      C ;		db 11 dup(0)
			      C ;		dw 43
			      C ;		db "bin"
			      C ;		db 11 dup(0)
			      C ;		dw 44
			      C ;		db "etc"
			      C ;		db 11 dup(0)
			      C ;		dw 45
			      C ;		db "usr"
			      C ;		db 11 dup(0)
			      C ;		dw 46
			      C ;		db "tmp"
			      C ;		db 11 dup(0)
			      C 
 0800 = 0080		      C size_root_dir equ $ - offset root_dir
			      C 
 0800			      C dev_dir: ; device directory
 0800  0002		      C 		dw 2
 0802  2E		      C 		db "."
 0803  000D [		      C 		db 13 dup(0)		
        00
       ]
 0810  0001		      C 		dw 1
 0812  2E 2E		      C 		db ".."
 0814  000C [		      C 		db 12 dup(0)		
        00
       ]
 0820  0008		      C 		dw 8
 0822  74 74 79		      C 		db "tty"
 0825  000B [		      C 		db 11 dup(0)		
        00
       ]
 0830  0009		      C 		dw 9
 0832  6D 65 6D		      C 		db "mem"
 0835  000B [		      C 		db 11 dup(0)		
        00
       ]
 0840  000A		      C 		dw 10
 0842  66 64 30		      C 		db "fd0"
 0845  000B [		      C 		db 11 dup(0)		
        00
       ]
 0850  000B		      C 		dw 11
 0852  66 64 31		      C 		db "fd1"
 0855  000B [		      C 		db 11 dup(0)		
        00
       ]
 0860  000C		      C 		dw 12
 0862  68 64 30		      C 		db "hd0"
 0865  000B [		      C 		db 11 dup(0)		
        00
       ]
 0870  000D		      C 		dw 13
 0872  68 64 31		      C 		db "hd1"
 0875  000B [		      C 		db 11 dup(0)		
        00
       ]
 0880  000E		      C 		dw 14
 0882  68 64 32		      C 		db "hd2"
 0885  000B [		      C 		db 11 dup(0)		
        00
       ]
 0890  000F		      C 		dw 15
 0892  68 64 33		      C 		db "hd3"
 0895  000B [		      C 		db 11 dup(0)		
        00
       ]
 08A0  0010		      C 		dw 16
 08A2  6C 70 72		      C 		db "lpr"
 08A5  000B [		      C 		db 11 dup(0)		
        00
       ]
 08B0  0011		      C 		dw 17
 08B2  74 74 79 30	      C                 db "tty0"
 08B6  000A [		      C 		db 10 dup(0)		
        00
       ]
 08C0  0012		      C 		dw 18
 08C2  74 74 79 31	      C                 db "tty1"
 08C6  000A [		      C 		db 10 dup(0)	
        00
       ]
 08D0  0013		      C 		dw 19
 08D2  74 74 79 32	      C                 db "tty2"
 08D6  000A [		      C 		db 10 dup(0)	
        00
       ]
 08E0  0014		      C 		dw 20
 08E2  74 74 79 33	      C                 db "tty3"
 08E6  000A [		      C 		db 10 dup(0)		
        00
       ]
 08F0  0015		      C 		dw 21
 08F2  74 74 79 34	      C                 db "tty4"
 08F6  000A [		      C 		db 10 dup(0)		
        00
       ]
 0900  0016		      C 		dw 22
 0902  74 74 79 35	      C                 db "tty5"
 0906  000A [		      C  		db 10 dup(0)		
        00
       ]
 0910  0017		      C 		dw 23
 0912  74 74 79 36	      C                 db "tty6"
 0916  000A [		      C 		db 10 dup(0)		
        00
       ]
 0920  0018		      C 		dw 24
 0922  74 74 79 37	      C                 db "tty7"
 0926  000A [		      C 		db 10 dup(0)		
        00
       ]
 0930  0019		      C 		dw 25
 0932  43 4F 4D 31	      C                 db "COM1" ; 09/07/2013
 0936  000A [		      C 		db 10 dup(0)		
        00
       ]
 0940  001A		      C 		dw 26
 0942  43 4F 4D 32	      C                 db "COM2" ; 09/07/2013
 0946  000A [		      C 		db 10 dup(0)		
        00
       ]
 0950  0019		      C 		dw 25
 0952  74 74 79 38	      C 		db "tty8" ; 21/04/2014
 0956  000A [		      C 		db 10 dup(0)		
        00
       ]
 0960  001A		      C 		dw 26
 0962  74 74 79 39	      C                 db "tty9" ; 21/04/2014  
 0966  000A [		      C 		db 10 dup(0)
        00
       ]
			      C 
			      C ;dev_dir: ; device directory
			      C ;		dw 41
			      C ;		db ".."
			      C ;		db 12 dup(0)		
			      C ;		dw 42
			      C ;		db "."
			      C ;		db 13 dup(0)		
			      C ;		dw 1
			      C ;		db "tty"
			      C ;		db 11 dup(0)		
			      C ;		dw 2
			      C ;		db "mem"
			      C ;		db 11 dup(0)		
			      C ;		dw 3
			      C ;		db "fd0"
			      C ;		db 11 dup(0)		
			      C ;		dw 4
			      C ;		db "fd1"
			      C ;		db 11 dup(0)		
			      C ;		dw 5
			      C ;		db "hd0"
			      C ;		db 11 dup(0)		
			      C ;		dw 6
			      C ;		db "hd1"
			      C ;		db 11 dup(0)		
			      C ;		dw 7
			      C ;		db "hd2"
			      C ;		db 11 dup(0)		
			      C ;		dw 8
			      C ;		db "hd3"
			      C ;		db 11 dup(0)		
			      C ;		dw 9
			      C ;		db "lpr"
			      C ;		db 11 dup(0)		
			      C ;		dw 10
			      C ;               db "tty0"
			      C ;		db 10 dup(0)		
			      C ;		dw 11
			      C ;               db "tty1"
			      C ;		db 10 dup(0)	
			      C ;		dw 12
			      C ;               db "tty2"
			      C ;		db 10 dup(0)	
			      C ;		dw 13
			      C ;               db "tty3"
			      C ;		db 10 dup(0)		
			      C ;		dw 14
			      C ;               db "tty4"
			      C ;		db 10 dup(0)		
			      C ;		dw 15
			      C ;               db "tty5"
			      C ; 		db 10 dup(0)		
			      C ;		dw 16
			      C ;               db "tty6"
			      C ;		db 10 dup(0)		
			      C ;		dw 17
			      C ;               db "tty7"
			      C ;		db 10 dup(0)		
			      C ;		dw 18
			      C ;               db "COM1" ; 09/07/2013
			      C ;		db 10 dup(0)		
			      C ;		dw 19
			      C ;               db "COM2" ; 09/07/2013
			      C ;		db 10 dup(0)		
			      C ;		dw 18
			      C ;		db "tty8" ; 21/04/2014
			      C ;		db 10 dup(0)		
			      C ;		dw 19
			      C ;               db "tty9" ; 21/04/2014  
			      C ;		db 10 dup(0)
			      C 
 0970 = 0170		      C size_dev_dir equ $ - offset dev_dir
			      C 
 0970			      C bin_dir:  ; binary directory
 0970  0003		      C 		dw 3
 0972  2E		      C 		db "."
 0973  000D [		      C 		db 13 dup(0)
        00
       ]
 0980  0001		      C 		dw 1
 0982  2E 2E		      C 		db ".."
 0984  000C [		      C 		db 12 dup(0)
        00
       ]
			      C 
			      C ;bin_dir:  ; binary directory
			      C ;		dw 41
			      C ;		db ".."
			      C ;		db 12 dup(0)
			      C ;		dw 43
			      C ;		db "."
			      C ;		db 13 dup(0)
			      C 		
 0990 = 0020		      C size_bin_dir equ $ - offset bin_dir
			      C 
 0990			      C etc_dir:  ; etcetra directory
 0990  0004		      C 		dw 4
 0992  2E		      C 		db "."
 0993  000D [		      C 		db 13 dup(0)	
        00
       ]
 09A0  0001		      C 		dw 1
 09A2  2E 2E		      C 		db ".."
 09A4  000C [		      C 		db 12 dup(0)
        00
       ]
			      C 
			      C ;etc_dir:  ; etcetra directory
			      C ;		dw 41
			      C ;		db ".."
			      C ;		db 12 dup(0)	
			      C ;		dw 44
			      C ;		db "."
			      C ;		db 13 dup(0)
			      C 			
 09B0 = 0020		      C size_etc_dir equ $ - offset etc_dir
			      C 
 09B0			      C usr_dir:  ; user directory
 09B0  0005		      C 		dw 5
 09B2  2E		      C 		db "."
 09B3  000D [		      C 		db 13 dup(0)	
        00
       ]
 09C0  0001		      C 		dw 1
 09C2  2E 2E		      C 		db ".."
 09C4  000C [		      C 		db 12 dup(0)
        00
       ]
			      C 
			      C ;usr_dir:  ; user directory
			      C ;		dw 41
			      C ;		db ".."
			      C ;		db 12 dup(0)	
			      C ;		dw 45
			      C ;		db "."
			      C ;		db 13 dup(0)
			      C 		
 09D0 = 0020		      C size_usr_dir equ $ - offset usr_dir
			      C 
 09D0			      C tmp_dir:  ; temporary directory
 09D0  0006		      C 		dw 6
 09D2  2E		      C 		db "."
 09D3  000D [		      C 		db 13 dup(0)	
        00
       ]
 09E0  0001		      C 		dw 1
 09E2  2E 2E		      C 		db ".."
 09E4  000C [		      C 		db 12 dup(0)
        00
       ]
			      C 
			      C ;tmp_dir:  ; temporary directory
			      C ;		dw 41
			      C ;		db ".."
			      C ;		db 12 dup(0)	
			      C ;		dw 46
			      C ;		db "."
			      C ;		db 13 dup(0)
			      C 		
 09F0 = 0020		      C size_tmp_dir equ $ - offset tmp_dir
			      C 
 09F0			      C mnt_dir:  ; temporary directory
 09F0  0007		      C 		dw 7
 09F2  2E		      C 		db "."
 09F3  000D [		      C 		db 13 dup(0)	
        00
       ]
 0A00  0001		      C 		dw 1
 0A02  2E 2E		      C 		db ".."
 0A04  000C [		      C 		db 12 dup(0)
        00
       ]
			      C 
 0A10 = 0020		      C size_mnt_dir equ $ - offset mnt_dir
			      C 
			      C align 2
			      C 
			      C ;dw 0
			      C 
			      C ; 31/10/2012
 0A10 0000		      C u_off: dw 0
			      C 
			      C ; 12/08/2012
 0A12 0000		      C u_count: dw 0
 0A14 0000		      C u_base: dw 0
 0A16 0000		      C u_fofp: dw 0
 0A18 0000		      C u_nread: dw 0
			      C 
			      C ; 01/09/2019
 = 61FF			      C BLOCKDEV equ 61FFh ; 0110000111111111b
 = 21FF			      C CHARDEV equ 21FFh  ; 0010000111111111b
			      C ; 02/09/2019
 = 81FF			      C REGULARDEF equ 81FFh ; 1000000111111111b
			      C 
			      C ; 15/09/2019	
			      C ; 01/09/2019 - Retro UNIX v2 inode model (64 bytes)
			      C ;	       (Modified UNIX v7 inode model)
			      C 
 0A1A			      C inode:
 0A1A 81FF		      C i_flgs: dw 81FFh ; default regular file flag ; 02/09/2019
 0A1C 0001		      C i_nlks: dw 1 ; Number of links
 0A1E 0000		      C i_uid:  dw 0 ; owner's user id 
 0A20 00		      C i_gid:	db 0 ; owner's group id
 0A21 00		      C i_size_h: db 0 ; high byte of 5 bytes file size
 0A22 00000000		      C i_size: dd 0 ; file size
 0A26  000A [		      C i_dskp: dd 10 dup(0)  ; direct or indirect blocks
        00000000
       ]
 0A4E 00000000		      C i_ltim: dd 0 ; last access time (or last inode modif. time)
 0A52 00000000		      C i_mtim: dd 0 ; last (file) modification time 
 0A56 00000000		      C i_ctim: dd 0 ; (file) creation time
			      C 
			      C ; 17/08/2012
			      C ; 05/08/2012
			      C ; 14/07/2012
			      C ;inode:
			      C ;i_flgs: dw 800Fh ; special (device) files flags
			      C ;i_nlks: db 1 ; Number of links
			      C ;i_uid: db 0  ; user id 
			      C ;i_size: dw 0 ; file size
			      C ;i_dskp: dw 8 dup(0)  ; direct or indirect blocks
			      C ;i_ctim: dd 0 ; creation time
			      C ;i_mtim: dd 0 ; last modification time 
			      C ;i_reserved: dw 0 ; reserved (not in use)
			      C 
			      C ; 09/09/2019
			      C ; size table fopr directory inodes (1 to 7)
 0A5A			      C i_dir_sizes:
 0A5A  0080		      C 	dw size_root_dir ; 128	; 1
 0A5C  0170		      C 	dw size_dev_dir	; 368	; 2
 0A5E  0020		      C 	dw size_bin_dir	; 32	; 3
 0A60  0020		      C 	dw size_etc_dir	; 32	; 4
 0A62  0020		      C 	dw size_usr_dir	; 32	; 5
 0A64  0020		      C 	dw size_tmp_dir	; 32	; 6
 0A66  0020		      C 	dw size_mnt_dir	; 32	; 7
			      C 
			      C ; 05/08/2012
			      C ; 14/07/2012
 0A68			      C idata:
 0A68			      C inodes:
			      C 
			      C ; 13/04/2022
			      C ; 25/09/2019
			      C ; 15/09/2019
			      C ; 01/09/2019 - Retro UNIX 386 v2 (UNIX v7 modified) inodes
			      C 
 0A68			      C root_inode: ; 1
 0A68  C1FF		      C 		dw 0C1FFh ; Flags (1100000111111111b)
 0A6A  0008		      C 		dw 8	; number of links ; 13/04/2022
 0A6C  0000		      C 		dw 0	; user ID (0 = root)
 0A6E  00		      C 		db 0	; group ID (0 = root)
 0A6F  00		      C 		db 0	; size_h (5th byte of file size)
			      C 		;dd size_root_dir ; initial size = 128 bytes
 0A70  00000000		      C 		dd 0
 0A74  000A [		      C 		dd 10 dup (0) ; indirect or contents blocks
        00000000
       ]
 0A9C  00000000		      C 		dd 0	; last access date & time
 0AA0  00000000		      C 		dd 0	; modification date & time
 0AA4  00000000		      C 		dd 0	; creation date & time
 0AA8			      C dev_inode: ; 2
 0AA8  C1FF		      C 		dw 0C1FFh ; Flags (1100000111111111b)
 0AAA  0002		      C 		dw 2	; number of links
 0AAC  0000		      C 		dw 0	; user ID (0 = root)
 0AAE  00		      C 		db 0	; group ID (0 = root)
 0AAF  00		      C 		db 0	; size_h (5th byte of file size)
			      C 		;dd size_dev_dir ; initial size = 128 bytes
 0AB0  00000000		      C 		dd 0
 0AB4  000A [		      C 		dd 10 dup (0) ; indirect or contents blocks
        00000000
       ]
 0ADC  00000000		      C 		dd 0	; last access date & time
 0AE0  00000000		      C 		dd 0	; modification date & time
 0AE4  00000000		      C 		dd 0	; creation date & time
 0AE8			      C bin_inode: ; 3
 0AE8  C1ED		      C 		dw 0C1EDh ; Flags  (1100000111101101b)
 0AEA  0002		      C 		dw 2	; number of links
 0AEC  0000		      C 		dw 0	; user ID (0 = root)
 0AEE  00		      C 		db 0	; group ID (0 = root)
 0AEF  00		      C 		db 0	; size_h (5th byte of file size)
			      C 		;dd size_bin_dir ; 32 bytes
 0AF0  00000000		      C 		dd 0
 0AF4  000A [		      C 		dd 10 dup (0) ; indirect or contents blocks
        00000000
       ]
 0B1C  00000000		      C 		dd 0	; last access date & time
 0B20  00000000		      C 		dd 0	; modification date & time
 0B24  00000000		      C 		dd 0	; creation date & time
 0B28			      C etc_inode: ; 4
 0B28  C1ED		      C 		dw 0C1EDh ; Flags  (1100000111101101b)
 0B2A  0002		      C 		dw 2	; number of links
 0B2C  0000		      C 		dw 0	; user ID (0 = root)
 0B2E  00		      C 		db 0	; group ID (0 = root)
 0B2F  00		      C 		db 0	; size_h (5th byte of file size)
			      C 		;dd size_etc_dir ; 32 bytes
 0B30  00000000		      C 		dd 0
 0B34  000A [		      C 		dd 10 dup (0) ; indirect or contents blocks
        00000000
       ]
 0B5C  00000000		      C 		dd 0	; last access date & time
 0B60  00000000		      C 		dd 0	; modification date & time
 0B64  00000000		      C 		dd 0	; creation date & time
 0B68			      C usr_inode: ; 5
 0B68  C1ED		      C 		dw 0C1EDh ; Flags  (1100000111101101b)
 0B6A  0002		      C 		dw 2	; number of links ; 13/04/2022
 0B6C  0000		      C 		dw 0	; user ID (0 = root)
 0B6E  00		      C 		db 0	; group ID (0 = root)
 0B6F  00		      C 		db 0	; size_h (5th byte of file size)
			      C 		;dd size_usr_dir ; 32 bytes
 0B70  00000000		      C 		dd 0
 0B74  000A [		      C 		dd 10 dup (0) ; indirect or contents blocks
        00000000
       ]
 0B9C  00000000		      C 		dd 0	; last access date & time
 0BA0  00000000		      C 		dd 0	; modification date & time
 0BA4  00000000		      C 		dd 0	; creation date & time
 0BA8			      C tmp_inode: ; 6
 0BA8  C1FF		      C 		dw 0C1FFh ; Flags (1100000111111111b)
 0BAA  0002		      C 		dw 2	; number of links
 0BAC  0000		      C 		dw 0	; user ID (0 = root)
 0BAE  00		      C 		db 0	; group ID (0 = root)
 0BAF  00		      C 		db 0	; size_h (5th byte of file size)
			      C 		;dd size_tmp_dir ; 32 bytes
 0BB0  00000000		      C 		dd 0
 0BB4  000A [		      C 		dd 10 dup (0) ; indirect or contents blocks
        00000000
       ]
 0BDC  00000000		      C 		dd 0	; last access date & time
 0BE0  00000000		      C 		dd 0	; modification date & time
 0BE4  00000000		      C 		dd 0	; creation date & time
 0BE8			      C mnt_inode: ; 7
 0BE8  C1FF		      C 		dw 0C1FFh ; Flags (1100000111111111b)
 0BEA  0002		      C 		dw 2	; number of links
 0BEC  0000		      C 		dw 0	; user ID (0 = root)
 0BEE  00		      C 		db 0	; group ID (0 = root)
 0BEF  00		      C 		db 0	; size_h (5th byte of file size)
			      C 		;dd size_mnt_dir ; 32 bytes
 0BF0  00000000		      C 		dd 0
 0BF4  000A [		      C 		dd 10 dup (0) ; indirect or contents blocks
        00000000
       ]
 0C1C  00000000		      C 		dd 0	; last access date & time
 0C20  00000000		      C 		dd 0	; modification date & time
 0C24  00000000		      C 		dd 0	; creation date & time
 0C28			      C tty_inode: ; 8
 0C28  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 0C2A  0001		      C 		dw 1	; number of links
 0C2C  0003		      C 		dw 3	; user ID (3 = bin)
 0C2E  03		      C 		db 3	; group ID (3 = bin)
 0C2F  00		      C 		db 0	; size_h = 0
 0C30  00000000		      C 		dd 0	; size = 0
 0C34  0200		      C 		dw 0200h ; major = 2, minor = 0 
 0C36  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0C5C  00000000		      C 		dd 0	; last access date & time
 0C60  00000000		      C 		dd 0	; modification date & time
 0C64  00000000		      C 		dd 0	; creation date & time
 0C68			      C mem_inode: ; 9
 0C68  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 0C6A  0001		      C 		dw 1	; number of links
 0C6C  0003		      C 		dw 3	; user ID (3 = bin)
 0C6E  03		      C 		db 3	; group ID (3 = bin)
 0C6F  00		      C 		db 0	; size_h = 0
 0C70  00000000		      C 		dd 0	; size = 0
 0C74  0100		      C 		dw 0100h ; major = 1, minor = 0 	
 0C76  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0C9C  00000000		      C 		dd 0	; last access date & time
 0CA0  00000000		      C 		dd 0	; modification date & time
 0CA4  00000000		      C 		dd 0	; creation date & time
 0CA8			      C fd0_inode: ; 10
 0CA8  61FF		      C 		dw 61FFh ; Flags (0110000111111111b) ; BLOCKDEV
 0CAA  0001		      C 		dw 1	; number of links
 0CAC  0003		      C 		dw 3	; user ID (3 = bin)
 0CAE  03		      C 		db 3	; group ID (3 = bin)
 0CAF  00		      C 		db 0	; size_h = 0
 0CB0  00000000		      C 		dd 0	; size = 0
 0CB4  0100		      C 		dw 0100h ; major = 1, minor = 0 	
 0CB6  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0CDC  00000000		      C 		dd 0	; last access date & time
 0CE0  00000000		      C 		dd 0	; modification date & time
 0CE4  00000000		      C 		dd 0	; creation date & time
 0CE8			      C fd1_inode: ; 11
 0CE8  61FF		      C 		dw 61FFh ; Flags (0110000111111111b) ; BLOCKDEV
 0CEA  0001		      C 		dw 1	; number of links
 0CEC  0003		      C 		dw 3	; user ID (3 = bin)
 0CEE  03		      C 		db 3	; group ID (3 = bin)
 0CEF  00		      C 		db 0	; size_h = 0
 0CF0  00000000		      C 		dd 0	; size = 0
 0CF4  0101		      C 		dw 0101h ; major = 1, minor = 1 	
 0CF6  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0D1C  00000000		      C 		dd 0	; last access date & time
 0D20  00000000		      C 		dd 0	; modification date & time
 0D24  00000000		      C 		dd 0	; creation date & time
 0D28			      C hd0_inode: ; 12
 0D28  61FF		      C 		dw 61FFh ; Flags (0110000111111111b) ; BLOCKDEV
 0D2A  0001		      C 		dw 1	; number of links
 0D2C  0003		      C 		dw 3	; user ID (3 = bin)
 0D2E  03		      C 		db 3	; group ID (3 = bin)
 0D2F  00		      C 		db 0	; size_h = 0
 0D30  00000000		      C 		dd 0	; size = 0
 0D34  0000		      C 		dw 0000h ; major = 0, minor = 0 	
 0D36  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0D5C  00000000		      C 		dd 0	; last access date & time
 0D60  00000000		      C 		dd 0	; modification date & time
 0D64  00000000		      C 		dd 0	; creation date & time
 0D68			      C hd1_inode: ; 13
 0D68  61FF		      C 		dw 61FFh ; Flags (0110000111111111b) ; BLOCKDEV
 0D6A  0001		      C 		dw 1	; number of links
 0D6C  0003		      C 		dw 3	; user ID (3 = bin)
 0D6E  03		      C 		db 3	; group ID (3 = bin)
 0D6F  00		      C 		db 0	; size_h = 0
 0D70  00000000		      C 		dd 0	; size = 0
 0D74  0001		      C 		dw 0001h ; major = 0, minor = 1 	
 0D76  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0D9C  00000000		      C 		dd 0	; last access date & time
 0DA0  00000000		      C 		dd 0	; modification date & time
 0DA4  00000000		      C 		dd 0	; creation date & time
 0DA8			      C hd2_inode: ; 14
 0DA8  61FF		      C 		dw 61FFh ; Flags (0110000111111111b) ; BLOCKDEV
 0DAA  0001		      C 		dw 1	; number of links
 0DAC  0003		      C 		dw 3	; user ID (3 = bin)
 0DAE  03		      C 		db 3	; group ID (3 = bin)
 0DAF  00		      C 		db 0	; size_h = 0
 0DB0  00000000		      C 		dd 0	; size = 0
 0DB4  0002		      C 		dw 0002h ; major = 0, minor = 2 	
 0DB6  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0DDC  00000000		      C 		dd 0	; last access date & time
 0DE0  00000000		      C 		dd 0	; modification date & time
 0DE4  00000000		      C 		dd 0	; creation date & time
 0DE8			      C hd3_inode: ; 15
 0DE8  61FF		      C 		dw 61FFh ; Flags (0110000111111111b) ; BLOCKDEV
 0DEA  0001		      C 		dw 1	; number of links
 0DEC  0003		      C 		dw 3	; user ID (3 = bin)
 0DEE  03		      C 		db 3	; group ID (3 = bin)
 0DEF  00		      C 		db 0	; size_h = 0
 0DF0  00000000		      C 		dd 0	; size = 0
 0DF4  0003		      C 		dw 0003h ; major = 0, minor = 3 	
 0DF6  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0E1C  00000000		      C 		dd 0	; last access date & time
 0E20  00000000		      C 		dd 0	; modification date & time
 0E24  00000000		      C 		dd 0	; creation date & time
 0E28			      C lpr_inode: ; 16
 0E28  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 0E2A  0001		      C 		dw 1	; number of links
 0E2C  0003		      C 		dw 3	; user ID (3 = bin)
 0E2E  03		      C 		db 3	; group ID (3 = bin)
 0E2F  00		      C 		db 0	; size_h = 0
 0E30  00000000		      C 		dd 0	; size = 0
 0E34  0400		      C 		dw 0400h ; major = 4, minor = 0 	
 0E36  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0E5C  00000000		      C 		dd 0	; last access date & time
 0E60  00000000		      C 		dd 0	; modification date & time
 0E64  00000000		      C 		dd 0	; creation date & time	
 0E68			      C tty0_inode: ; 17
 0E68  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 0E6A  0001		      C 		dw 1	; number of links
 0E6C  0003		      C 		dw 3	; user ID (3 = bin)
 0E6E  03		      C 		db 3	; group ID (3 = bin)
 0E6F  00		      C 		db 0	; size_h = 0
 0E70  00000000		      C 		dd 0	; size = 0
 0E74  0201		      C 		dw 0201h ; major = 2, minor = 1
 0E76  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0E9C  00000000		      C 		dd 0	; last access date & time
 0EA0  00000000		      C 		dd 0	; modification date & time
 0EA4  00000000		      C 		dd 0	; creation date & time
 0EA8			      C tty1_inode: ; 18
 0EA8  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 0EAA  0001		      C 		dw 1	; number of links
 0EAC  0003		      C 		dw 3	; user ID (3 = bin)
 0EAE  03		      C 		db 3	; group ID (3 = bin)
 0EAF  00		      C 		db 0	; size_h = 0
 0EB0  00000000		      C 		dd 0	; size = 0
 0EB4  0202		      C 		dw 0202h ; major = 2, minor = 2
 0EB6  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0EDC  00000000		      C 		dd 0	; last access date & time
 0EE0  00000000		      C 		dd 0	; modification date & time
 0EE4  00000000		      C 		dd 0	; creation date & time
 0EE8			      C tty2_inode: ; 19
 0EE8  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 0EEA  0001		      C 		dw 1	; number of links
 0EEC  0003		      C 		dw 3	; user ID (3 = bin)
 0EEE  03		      C 		db 3	; group ID (3 = bin)
 0EEF  00		      C 		db 0	; size_h = 0
 0EF0  00000000		      C 		dd 0	; size = 0
 0EF4  0203		      C 		dw 0203h ; major = 2, minor = 3
 0EF6  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0F1C  00000000		      C 		dd 0	; last access date & time
 0F20  00000000		      C 		dd 0	; modification date & time
 0F24  00000000		      C 		dd 0	; creation date & time
 0F28			      C tty3_inode: ; 20
 0F28  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 0F2A  0001		      C 		dw 1	; number of links
 0F2C  0003		      C 		dw 3	; user ID (3 = bin)
 0F2E  03		      C 		db 3	; group ID (3 = bin)
 0F2F  00		      C 		db 0	; size_h = 0
 0F30  00000000		      C 		dd 0	; size = 0
 0F34  0204		      C 		dw 0204h ; major = 2, minor = 4
 0F36  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0F5C  00000000		      C 		dd 0	; last access date & time
 0F60  00000000		      C 		dd 0	; modification date & time
 0F64  00000000		      C 		dd 0	; creation date & time
 0F68			      C tty4_inode: ; 21
 0F68  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 0F6A  0001		      C 		dw 1	; number of links
 0F6C  0003		      C 		dw 3	; user ID (3 = bin)
 0F6E  03		      C 		db 3	; group ID (3 = bin)
 0F6F  00		      C 		db 0	; size_h = 0
 0F70  00000000		      C 		dd 0	; size = 0
 0F74  0205		      C 		dw 0205h ; major = 2, minor = 5
 0F76  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0F9C  00000000		      C 		dd 0	; last access date & time
 0FA0  00000000		      C 		dd 0	; modification date & time
 0FA4  00000000		      C 		dd 0	; creation date & time
 0FA8			      C tty5_inode: ; 22
 0FA8  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 0FAA  0001		      C 		dw 1	; number of links
 0FAC  0003		      C 		dw 3	; user ID (3 = bin)
 0FAE  03		      C 		db 3	; group ID (3 = bin)
 0FAF  00		      C 		db 0	; size_h = 0
 0FB0  00000000		      C 		dd 0	; size = 0
 0FB4  0206		      C 		dw 0206h ; major = 2, minor = 6
 0FB6  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 0FDC  00000000		      C 		dd 0	; last access date & time
 0FE0  00000000		      C 		dd 0	; modification date & time
 0FE4  00000000		      C 		dd 0	; creation date & time
 0FE8			      C tty6_inode: ; 23
 0FE8  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 0FEA  0001		      C 		dw 1	; number of links
 0FEC  0003		      C 		dw 3	; user ID (3 = bin)
 0FEE  03		      C 		db 3	; group ID (3 = bin)
 0FEF  00		      C 		db 0	; size_h = 0
 0FF0  00000000		      C 		dd 0	; size = 0
 0FF4  0207		      C 		dw 0207h ; major = 2, minor = 7
 0FF6  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 101C  00000000		      C 		dd 0	; last access date & time
 1020  00000000		      C 		dd 0	; modification date & time
 1024  00000000		      C 		dd 0	; creation date & time
 1028			      C tty7_inode: ; 24
 1028  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
 102A  0001		      C 		dw 1	; number of links
 102C  0003		      C 		dw 3	; user ID (3 = bin)
 102E  03		      C 		db 3	; group ID (3 = bin)
 102F  00		      C 		db 0	; size = 0
 1030  00000000		      C 		dd 0	; size_h = 0
 1034  0208		      C 		dw 0208h ; major = 2, minor = 8
 1036  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 105C  00000000		      C 		dd 0	; last access date & time
 1060  00000000		      C 		dd 0	; modification date & time
 1064  00000000		      C 		dd 0	; creation date & time
 1068			      C com1_inode: ; 25
 1068  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
			      C 		;dw 1	; number of links
 106A  0002		      C 		dw 2	; 30/09/2019
 106C  0003		      C 		dw 3	; user ID (3 = bin)
 106E  03		      C 		db 3	; group ID (3 = bin)
 106F  00		      C 		db 0	; size_h = 0
 1070  00000000		      C 		dd 0	; size = 0
 1074  0300		      C 		dw 0300h ; major = 3, minor = 0
 1076  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 109C  00000000		      C 		dd 0	; last access date & time
 10A0  00000000		      C 		dd 0	; modification date & time
 10A4  00000000		      C 		dd 0	; creation date & time
 10A8			      C com2_inode: ; 26
 10A8  21FF		      C 		dw 21FFh ; Flags (0010000111111111b) ; CHARDEV
			      C 		;dw 1	; number of links
 10AA  0002		      C 		dw 2	; 30/09/2019
 10AC  0003		      C 		dw 3	; user ID (3 = bin)
 10AE  03		      C 		db 3	; group ID (3 = bin)
 10AF  00		      C 		db 0	; size_h = 0
 10B0  00000000		      C 		dd 0	; size = 0
 10B4  0301		      C 		dw 0301h ; major = 3, minor = 1
 10B6  0013 [		      C 		dw 19 dup (0) ; not used, must be 0
        0000
       ]
 10DC  00000000		      C 		dd 0	; last access date & time
 10E0  00000000		      C 		dd 0	; modification date & time
 10E4  00000000		      C 		dd 0	; creation date & time
			      C 
			      C 		; 21/12/2019
			      C 		; 02/09/2019
 10E8			      C unused_inodes: ; 27 to 32
 10E8  0180 [		      C 		db (32-26)*64 dup(0)	
        00
       ]
			      C 	
			      C ; Retro UNIX v1 (UNIX v1) inodes
			      C ;
			      C ;root_inode: ; 41
			      C ;		dw 0C00Eh ; Flags (1100000000001110b)
			      C ;		db 7	; number of links 
			      C ;		db 0	; user ID (0 = root)
			      C ;		dw size_root_dir ; initial size = 70 bytes 
			      C ;		dw 8 dup (0) ; indirect or contents blocks
			      C ;		dd 0	; creation date & time
			      C ;		dd 0	; modification date & time
			      C ;		dw 0	; unused
			      C ;dev_inode: ; 42
			      C ;		dw 0C00Eh ; Flags (1100000000001110b)
			      C ;		db 2	; number of links 
			      C ;		db 0	; user ID (0 = root)
			      C ;		dw size_dev_dir ; 200
			      C ;		dw 8 dup (0) ; indirect or contents blocks
			      C ;		dd 0	; creation date & time
			      C ;		dd 0	; modification date & time
			      C ;		dw 0	; unused	
			      C ;bin_inode: ; 43
			      C ;		dw 0C00Eh ; Flags (1100000000001110b)
			      C ;		db 2	; number of links 
			      C ;		db 0	; user ID (0 = root)
			      C ;		dw size_bin_dir ; 20
			      C ;		dw 8 dup (0) ; indirect or contents blocks
			      C ;		dd 0	; creation date & time
			      C ;		dd 0	; modification date & time
			      C ;		dw 0	; unused
			      C ;etc_inode: ; 44
			      C ;		dw 0C00Eh ; Flags (1100000000001110b)
			      C ;		db 2	; number of links 
			      C ;		db 0	; user ID (0 = root)
			      C ;		dw size_etc_dir ; 20
			      C ;		dw 8 dup (0) ; indirect or contents blocks
			      C ;		dd 0	; creation date & time
			      C ;		dd 0	; modification date & time
			      C ;		dw 0	; unused				
			      C ;usr_inode: ; 45
			      C ;		dw 0C00Eh ; Flags (1100000000001110b)
			      C ;		db 2	; number of links 
			      C ;		db 0	; user ID (0 = root)
			      C ;		dw size_usr_dir ; 20
			      C ;		dw 8 dup (0) ; indirect or contents blocks
			      C ;		dd 0	; creation date & time
			      C ;		dd 0	; modification date & time
			      C ;		dw 0	; unused
			      C ;tmp_inode: ; 46
			      C ;		dw 0C00Fh ; Flags (1100000000001111b)
			      C ;		db 2	; number of links 
			      C ;		db 0	; user ID (0 = root)
			      C ;		dw size_tmp_dir ; 20
			      C ;		dw 8 dup (0) ; indirect or contents blocks
			      C ;		dd 0	; creation date & time
			      C ;		dd 0	; modification date & time
			      C ;		dw 0	; unused
			      C 
			      C align 16
			      C 
 1270			      C im_buffer: ; 02/09/2019 - Retro UNIX386 v2 (inode map buffer)
 1270			      C Buffer:
 1270			      C sector_buffer:
 1270  0200 [		      C db 512 dup (0)
        00
       ]
			      C 
			      C ; 01/09/2019
 1470			      C fbm_buffer:  ; Free Blocks Map buffer
 1470  0200 [		      C db 512 dup (0)
        00
       ]
			      C 
				include         unixproc.asm
			      C ; UNIXPROC.ASM
			      C ;----------------------------------------------------------------
			      C ; RETRO UNIX v0.3 - Modified UNIX v7 inode & devices - 01/09/2019
			      C ; RETRO UNIX v0.1 'fd0' formatting procedures
			      C ; Last Update: 05/04/2022
			      C ; 23/01/2020 - Retro UNIX 386 v2 
			      C ; 09/07/2013 - Retro UNIX v1
			      C ; ERDOGAN TAN
			      C ; 01/03/2013, 03/03/2013, 05/03/2013
			      C ; 16/12/2012 -> sioreg (bugfix)
			      C ; [ 14-27/7/2012, 4-21/8/2012, 16/9/2012, 20/10/2012, 31/10/2012 ]
			      C ; These procedures will be located in UNIXFDFS.ASM file 
			      C ; when they are completed.
			      C ; (NOTE: only for (R)UFS initialization of FD0 1.44MB floppy disk
			      C 
 = 0100			      C err_INVALIDDATA equ 100h
 = 0200			      C err_NOFREEBLOCK equ 200h
			      C 
 1670			      C iget 	proc near
			      C 	; 16/09/2012
			      C      	; 14/07/2012
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	;; AX=R0, BX=R1 
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 	; (cdev, idev,mnt, mntd are excluded)
			      C 	;; return => if cf=1 error number in [Error]  
			      C 
 1670  3B 1E 1B01 R	      C 	cmp bx, word ptr [ii] ; BX (R1) = i-number of current file
 1674  74 2E		      C 	je short iget_5
 1676			      C iget_1:
 1676  50		      C 	push ax
 1677  32 E4		      C 	xor ah, ah ; mov ah, 0
 1679  A0 1B00 R	      C 	mov al, byte ptr [imod]
 167C  22 C0		      C 	and al, al ; has i-node of current file been modified ?	
 167E  74 14		      C 	jz short iget_2
 1680  32 C0		      C 	xor al, al ; mov al, 0
 1682  A2 1B00 R	      C 	mov byte ptr [imod], al 
 1685  53		      C 	push bx
 1686  8B 1E 1B01 R	      C 	mov bx, word ptr [ii]	
 168A  FE C0		      C 	inc al ; mov al, 1
			      C 	; ax = 1 = write
 168C  E8 0016		      C 	call icalc
 168F  5B		      C 	pop bx
 1690  72 11		      C 	jc short iget_4
			      C 	; 16/9/2012
 1692  32 C0		      C 	xor al, al ; xor ax, ax
 1694			      C iget_2:
 1694  23 DB		      C 	and bx, bx
 1696  74 07		      C 	jz short iget_3
 1698  89 1E 1B01 R	      C 	mov word ptr [ii], bx		
			      C 	; ax = 0 = read
 169C  E8 0006		      C 	call icalc
 169F			      C iget_3:
 169F  8B 1E 1B01 R	      C 	mov bx, word ptr [ii]
 16A3			      C iget_4:
 16A3  58		      C 	pop ax
 16A4			      C iget_5:
 16A4  C3		      C 	retn
			      C 
 16A5			      C iget	endp
			      C 
 16A5			      C icalc 	proc near
			      C 	; 05/04/2022
			      C 	; 07/09/2019
			      C 	; 02/09/2019
			      C 	; 01/09/2019 - Retro UNIX 386 v2
			      C 	; 17/08/2012
			      C 	; 16/08/2012
			      C 	; 15/08/2012
			      C 	; 14/08/2012
			      C 	; 13/08/2012
			      C         ; 15/07/2012
			      C      	; 14/07/2012
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	;; AX=R0, BX=R1, CX=R3, DX=R5 
			      C 	; 0 = read, 1 = write
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 	;
			      C         ; i-node is located in block (i+47)/16 and
			      C 	; begins 32*(i+47) mod 16 bytes from its start
			      C 	;; return => if cf=1 error number in [Error]
			      C 
			      C 	; input -> ax = 0 -> read, 1 = write
			      C 
			      C 	;add bx, 47 ; add 47 to inode number, 15/8/2012
			      C 	;push bx ; R1 -> -(SP)
			      C 	;shr bx, 1 ; divide by 16
			      C 	;shr bx, 1
			      C 	;shr bx, 1
			      C 	;shr bx, 1
			      C 
			      C 	;; 01/09/2019
			      C 	;; inode 1 (1st inode) is on sector 3 
			      C 	;; sector 0 : boot sector
			      C 	;; sector 1 : super block
			      C 	;; sector 2 : free blocks map and inodes map
			      C 	;; sector 3 to 10 : inodes
			      C 
			      C 	; 05/04/2022
			      C 	; inode 1 (1st inode, root dir inode) is on sector 4 
			      C 	; sector 0 : boot sector
			      C 	; sector 1 : super block
			      C 	; sector 2 : inode(s) map
			      C 	; sector 3 : free block(s) map
			      C 	; sector 4 to 35 : inodes
			      C 
			      C 	; 08/09/2019
 16A5  83 C3 1F		      C 	add bx, 31 ; add 31 to inode number
 16A8  53		      C 	push bx
 16A9  D1 EB		      C 	shr bx, 1  ; divide by 8	
 16AB  D1 EB		      C 	shr bx, 1
 16AD  D1 EB		      C 	shr bx, 1
			      C 		; bx contains block number of block in which
			      C 		; inode exists
 16AF  E8 002C		      C 	call dskrd
 16B2  5A		      C 	pop dx ; 14/8/2012
 16B3  72 28		      C 	jc short icalc_5
 16B5			      C icalc_1:
			      C 	;and dx, 0Fh	; (i+47) mod 16
			      C 	;shl dx, 1
			      C 	;shl dx, 1
			      C 	;shl dx, 1
			      C 	;shl dx, 1
			      C 	;shl dx, 1
			      C 		; DX = 32 * ((i+47) mod 16)	
			      C 		; DX (R5) points to first word in i-node i.
			      C 
 16B5  83 E2 07		      C 	and dx, 07h	; (i+31) mod 8
 16B8  74 04		      C 	jz short @f ; 29/09/2019 
			      C 	;shl dx, 1
			      C 	;shl dx, 1
			      C 	;shl dx, 1
			      C 	;shl dx, 1	
			      C 	;shl dx, 1
			      C 	;shl dx, 1
 16BA  B1 06		      C 	mov cl, 6
 16BC  D3 E2		      C 	shl dx, cl	
			      C 		; DX = 64 * ((i+31) mod 8)
			      C 		; DX points to first word in i-node i.	
 16BE			      C @@:
			      C 	; 14/8/2012
 16BE  57		      C 	push di
 16BF  56		      C 	push si
			      C 	
 16C0  BE 0A1A R	      C 	mov si, offset inode ; 14/8/2012
			      C 		; inode is address of first word of current inode
			      C 	;mov cx, 16 ; CX = R3
			      C 	; 02/09/2019
 16C3  B9 0020		      C 	mov cx, 32 ; inode size/2 for Retro UNIX 386 v2 (& UNIX v7)	
			      C 
			      C 	; 09/09/2019
			      C 	;push ax
			      C 
			      C 	;mov di, offset Buffer ; 16/8/2012
 16C6  8B 3E 0572 R	      C 	mov di, word ptr [buff_o] ; 02/09/2019 - Retro UNIX 386 v2
			      C 
 16CA  03 FA		      C 	add di, dx ; 13/8/2012
			      C 
 16CC  23 C0		      C  	and ax, ax
 16CE  74 07		      C 	jz short icalc_3 ; 0 = read (and copy i-node to memory) 
 16D0			      C icalc_2:
			      C 	; 14/8/2012
			      C 	; over write old i-node (in buffer to be written)
 16D0  F3/ A5		      C 	rep movsw
			      C 
			      C 	; 31/10/2012
 16D2  E8 0027		      C 	call dskwr
 16D5  EB 04		      C 	jmp short icalc_4
			      C 
 16D7			      C icalc_3:
 16D7  87 F7		      C 	xchg si, di ; 14/8/2012		
			      C 	; copy new i-node into inode area of (core) memory
 16D9  F3/ A5		      C 	rep movsw
 16DB			      C icalc_4:
			      C 	;pop ax ; 09/09/2019
			      C 	; 14/8/2012
 16DB  5E		      C 	pop si
 16DC  5F		      C 	pop di
			      C 
			      C 	; OUTPUTS ->
			      C 	; inode 
			      C 	; DX/R5 (internal), BX/R1 (internal), CX/R3 (internal) 
 16DD			      C icalc_5:	
 16DD  C3		      C 	retn		 
			      C 
 16DE			      C icalc 	endp
			      C 	
 16DE			      C dskrd	proc near
			      C 	; 23/01/2020
			      C 	; 21/12/2019
			      C 	; 07/09/2019 - Retro UNIX 386 v2
			      C 	; 31/10/2012
			      C 	; 19/08/2012
			      C 	; 15/07/2012
			      C     	; 14/07/2012
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	;; AX=R0, BX=R1, CX=R3, DX=R5 
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 	; 
			      C 	; BX = R1 = block/sector number
			      C 	;
			      C 	; call bufaloc ; get a free I/O buffer
			      C         ; R5 = pointer to buffer
			      C 	;; return => if cf=1 error number in [Error]
			      C 
 16DE  3B 1E 0574 R	      C 	cmp bx, word ptr [buff_s] ; buffer sector
 16E2  74 17		      C 	je short dskrd_4
 16E4			      C dskrd_1:
 16E4  80 3E 0576 R 00	      C 	cmp byte ptr [buff_m], 0 ; is buffer data changed ?
 16E9  76 05		      C 	jna short dskrd_3
			      C 	
			      C 	;mov byte ptr [buff_w], 1 ; r/w flag = write
			      C 	;call poke
			      C 	; 07/09/2019
 16EB  E8 000E		      C 	call dskwr
 16EE  72 0B		      C 	jc short dskrd_4
 16F0			      C dskrd_3:
 16F0  89 1E 0574 R	      C 	mov word ptr [buff_s], bx 
 16F4  C6 06 0577 R 00	      C 	mov byte ptr [buff_w], 0 ; r/w flag = read
			      C 	;call poke
			      C 	; 21/12/2019
 16F9  EB 06		      C 	jmp short poke
 16FB			      C dskrd_4:
			      C 	; 19/8/2012
 16FB  C3		      C         retn
			      C 
 16FC			      C dskrd 	endp
			      C 
 16FC			      C dskwr	proc near
			      C 	; 23/01/2020
			      C 	; 08/09/2019
			      C 	; 06/09/2019 - Retro UNIX 386 v2
			      C 	; 31/10/2012
			      C 	; 15/07/2012
			      C     	; 14/07/2012
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	;; AX=R0, BX=R1, CX=R3, DX=R5 
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 	; 
			      C 	;; return => if cf=1 error number in [Error]
			      C 	;; cf = 1 => dx = 0
			      C 	; input:
			      C 	; [buff_s] = Block/Sector number
			      C 	; [buff_d] = Physical drive number (90h = image file)
			      C 	; [buff_o] = Buffer address
			      C 	; 	
			      C ;dskwr_1:
 16FC  C6 06 0577 R 01	      C 	mov byte ptr [buff_w], 1 ; r/w flag = write
			      C 	; 02/09/2019
			      C 	;call poke
			      C 	; cf = 1 -> Error code in [Error]	
			      C 	; cf = 0 -> Successful
			      C 	;retn
			      C 
			      C 	; fall down to poke..
			      C 
 1701			      C dskwr 	endp		
			      C 	
 1701			      C poke	proc near
			      C 	; 08/09/2019 - Retro UNIX 386 v2
			      C 	; 15/07/2012
			      C     	; Basic I/O functions for block structured devices
			      C 	;
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	;; AX=R0, BX=R1, CX=R3, DX=R5 
			      C 	; [SP] = Argument 1, 0 = read, 1 = write
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 	; 
			      C 	; [buff_d] = physical drive number (90h = image file)
			      C 	; [buff_s] = block/sector number
			      C 	; [buff_w] = read/write flag (1=write, 0=read)
			      C 	; [buff_o] = buffer address
			      C 
			      C 	;; return => if cf=1 error number in [Error]
			      C 
 1701  C7 06 1AFD R 0000      C 	mov word ptr [Error], 0 ; Error code reset
			      C 
			      C 	; 07/09/2019
			      C 	;cmp byte ptr [buff_w], 1
			      C 	;jna short poke_1
			      C 
			      C 	;inc byte ptr [Error+1]  ; mov byte ptr [Error+1], 1 
			      C 	;; high byte 1 -> invalid data/parameter
			      C 
			      C 	;stc
			      C 	;retn
 1707			      C poke_1:
			      C 	; Physical dik read/write for 8086 PC (via ROMBIOS) 
 1707  E8 0008		      C 	call fd_rw_sector
 170A  72 05		      C 	jc short poke_2
			      C 
 170C  C6 06 0576 R 00	      C 	mov byte ptr [buff_m], 0
 1711			      C poke_2:
 1711  C3		      C 	retn
			      C 	
 1712			      C poke	endp
			      C 
 1712			      C fd_rw_sector proc near
			      C 	; 23/01/2020
			      C 	; 21/12/2019
			      C 	; 05/09/2019	
			      C 	; 02/09/2019 - Retro UNIX 386 v2
			      C 	; 14/08/2012
			      C 	; 15/07/2012
			      C         ; Only for 1.44 MB Floppy Disks (18 sector/track)
			      C          
			      C 	; [buff_s] = sector number, [buff_o] = r/w buffer offset
			      C 	; [buff_d] = phy drv number, [buff_w] = 0/1 -> r/w
			      C        
			      C 	;push es
 1712  53		      C 	push bx
 1713  52		      C 	push dx
 1714  51		      C 	push cx
 1715  50		      C 	push ax
			      C 
			      C 	;;push ds
			      C 	;;pop es
			      C 	
			      C 	;mov bx, offset Buffer
 1716  8B 1E 0572 R	      C 	mov bx, word ptr [buff_o] ; 02/09/2019 - Retro UNIX 386 v2
			      C 
			      C 	; 05/09/2019
 171A  80 3E 0571 R 90	      C 	cmp byte ptr [buff_d], 90h ; fd image file sign
 171F  73 3A		      C 	jnb short image_file_rw 
			      C 
 1721  32 ED		      C 	xor ch, ch
			      C 	;mov cl, byte ptr [RetryCount]	; 4
			      C 	; 21/12/2019
 1723  B1 04		      C 	mov cl, 4 ; retry Count
 1725			      C fd_rw_sector_1:
 1725  51		      C 	push cx
 1726  A1 0574 R	      C 	mov ax, word ptr [buff_s]	; LOGICAL SECTOR NUMBER
 1729  BA 0012		      C 	mov dx, 18			; Sectors per track
 172C  F6 F2		      C 	div dl                      
 172E  8A CC		      C 	mov cl, ah			; Sector (zero based)
 1730  FE C1		      C 	inc cl				; To make it 1 based
 1732  D0 E8		      C 	shr al, 1			; Convert Track to Cylinder
 1734  80 D6 00		      C 	adc dh, 0			; Heads (0 or 1)
			      C 
 1737  8A 16 0571 R	      C 	mov dl, byte ptr [buff_d]	; Physical drive number 
 173B  8A E8		      C 	mov ch, al
			      C 
 173D  8A 26 0577 R	      C 	mov ah, byte ptr [buff_w]	; 0=read, 1=write (unix)
 1741  80 C4 02		      C 	add ah, 2			; 2=read, 3=write (bios) 	
 1744  B0 01		      C 	mov al, 01h
 1746  CD 13		      C 	int 13h				; BIOS Service func ( ah ) = 2
			      C 					; Read disk sectors
			      C 					; BIOS Service func ( ah ) = 3
			      C 					; Write disk sectors
			      C 					;AL-sec num CH-cyl CL-sec
			      C 					; DH-head DL-drive ES:BX-buffer
			      C 					;CF-flag AH-stat AL-sec read
 1748  88 26 1AFD R	      C 	mov byte ptr [Error], ah
 174C  59		      C 	pop cx
 174D  73 07		      C 	jnc short fd_rw_sector_2
			      C 
			      C 	; 21/12/2019
			      C 
			      C 	;;cmp ah,09h ; DMA crossed 64K segment boundary
			      C 	;;je short chs_err_retn
			      C 
 174F  32 E4		      C 	xor ah, ah ; reset
 1751  CD 13		      C 	int 13h
			      C 
 1753  E2 D0		      C 	loop fd_rw_sector_1
			      C 
 1755  F9		      C 	stc ; 23/01/2020
			      C 
 1756			      C fd_rw_sector_2:
 1756  58		      C 	pop ax
 1757  59		      C 	pop cx
 1758  5A		      C 	pop dx
 1759  5B		      C 	pop bx
			      C 	;pop es
 175A  C3		      C 	retn
			      C 
 175B			      C fd_rw_sector endp
			      C 
 175B			      C image_file_rw proc near
			      C 	; 09/09/2019
			      C 	; 06/09/2019
			      C 	; 05/09/2019 - Retro UNIX 386 v2
			      C 
			      C 	; 14/07/2015 (UNIXCOPY.ASM, 'image_file_rd','image_file_wr')
			      C 	; 07/07/2015
			      C 	; reading/writing a block (sector) from/to floppy disk image file
			      C 	; INPUTS:
			      C 	; 	ax = sector/block number
			      C         ;	bx = buffer address
			      C 	;       [img_file_handle] = file handle
			      C 	;	number of bytes to be written = 512
			      C 
			      C 	; 09/09/2019
 175B  A1 0574 R	      C 	mov ax, word ptr [buff_s]
			      C 
 175E  53		      C 	push bx  ; 06/09/2019
 175F  BA 0200		      C 	mov dx, 512
 1762  F7 E2		      C 	mul dx
 1764  8B CA		      C 	mov cx, dx
 1766  8B D0		      C 	mov dx, ax
 1768  2A C0		      C 	sub al, al ; specified offset is from the beginning of the file
 176A  B4 42		      C 	mov ah, 42h ; seek (move file pointer)	
 176C  8B 1E 1FDC R	      C 	mov bx, word ptr [img_file_handle]
 1770  CD 21		      C 	int 21h
 1772  5A		      C 	pop dx
 1773  72 18		      C 	jc short image_file_rw_err
			      C 
			      C 	;mov bx, word ptr [img_file_handle]
 1775  B9 0200		      C 	mov cx, 512
			      C 	;mov dx, word ptr [buff_o]
 1778  B4 3F		      C 	mov ah, 3Fh ; read from file
			      C 	;mov ah, 40h ; write to file	
 177A  02 26 0577 R	      C 	add ah, byte ptr [buff_w] ; 1 = write, ah = 40h 
 177E  CD 21		      C 	int 21h
 1780  72 0B		      C 	jc short image_file_rw_err
 1782  80 3E 0577 R 00	      C 	cmp byte ptr [buff_w], 0
 1787  76 CD		      C 	jna short fd_rw_sector_2
			      C 	; 07/09/2019
 1789  3B C1		      C 	cmp ax, cx ; ax = actually written bytes
 178B  73 C9		      C 	jnb short fd_rw_sector_2
 178D			      C image_file_rw_err:
 178D  C6 06 1AFD R FF	      C 	mov byte ptr [Error], 0FFh
 1792  EB C2		      C 	jmp short fd_rw_sector_2
			      C 
 1794			      C image_file_rw endp
			      C 
 1794			      C setimod proc near
			      C 	; 21/12/2019
			      C 	; 18/12/2019 - Retro DOS 386 v2 ; RUFSHDP.ASM
			      C 	; 13/08/2012
			      C 	; 21/07/2012
			      C 	; 14/07/2012
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	;; AX=R0, BX=R1, CX=R3, DX=R5 
			      C 	; [SP] = Argument 1, 0 = read, 1 = write
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 
			      C 	; 21/7/2012
 1794  52		      C 	push dx
 1795  50		      C 	push ax
			      C 
 1796  C6 06 1B00 R 01	      C 	mov byte ptr [imod], 1
			      C 
			      C 	; Erdogan Tan 14-7-2012
 179B  E8 0233		      C 	call epoch
			      C 	
 179E  A3 0A52 R	      C 	mov word ptr [i_mtim], ax
 17A1  89 16 0A54 R	      C 	mov word ptr [i_mtim]+2, dx
			      C 
			      C 
			      C 	; 18/12/2019 - Last access (inode modif.) time 
 17A5  A3 0A4E R	      C 	mov word ptr [i_ltim], ax
 17A8  89 16 0A50 R	      C 	mov word ptr [i_ltim]+2, dx
			      C 
			      C 	; 21/7/2012
 17AC  83 3E 0A56 R 00	      C 	cmp word ptr [i_ctim], 0
 17B1  77 0E		      C 	ja short @f
 17B3  83 3E 0A58 R 00	      C 	cmp word ptr [i_ctim]+2, 0
 17B8  77 07		      C 	ja short @f
			      C 
 17BA  A3 0A56 R	      C 	mov word ptr [i_ctim], ax
 17BD  89 16 0A58 R	      C 	mov word ptr [i_ctim]+2, dx
 17C1			      C @@:
			      C 	; 21/7/2012
 17C1  58		      C 	pop ax
 17C2  5A		      C 	pop dx
			      C 
 17C3  C3		      C 	retn
			      C 
 17C4			      C setimod endp
			      C 
 17C4			      C imap	proc near
			      C 	; 02/09/2019 - Retro UNIX 386 v2
			      C 	; 21/08/2012
			      C 	; 05/08/2012
			      C      	; 16/07/2012
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 	;
			      C 	; get the byte that the allocation bit 
			      C 	; for the i-number contained in R1
			      C 		
 17C4  8B D3		      C 	mov dx, bx   ; DX = R2, BX = R1 (input, i-number)
			      C 	;sub dx, 41  ; DX has i-41
			      C 	; 02/09/2019 - Retro UNIX 386 v2
 17C6  4A		      C 	dec dx ; zero based inode number
 17C7  8A CA		      C 	mov cl, dl   ; CX = R3		
 17C9  B8 0001		      C 	mov ax, 1    ;	
			      C 	;and cl, 7   ; CX has (i-41) mod 8 to get the bit position 
 17CC  80 E1 07		      C 	and cl, 7    ; CX has zero based inode number mod 8
			      C 		     ;	  to get the bit position	 		 	
 17CF  74 02		      C 	jz short @f  ; 21/8/2012
 17D1  D3 E0		      C 	shl ax, cl   ; AX has 1 in the calculated bit position
 17D3			      C @@:
 17D3  D1 EA		      C 	shr dx, 1
 17D5  D1 EA		      C 	shr dx, 1
 17D7  D1 EA		      C 	shr dx, 1    ;; DX has (i-41) base 8 of byte number
			      C 		     ; DX has byte offset of zero based inode number
			      C 		     ; from the start of the (inode) map		
			      C 	;; 5/8/2012		
			      C 	;add dx, word ptr [systm] ; superblock free map size + 4
			      C 	;; 21/8/2012
			      C 	;add dx, offset systm+4 ; is inode map offset in superblock
			      C 
			      C 	; 02/09/2019 - Retro UNIX 386 v2
 17D9  81 C2 1270 R	      C 	add dx, offset im_buffer	
			      C 	
			      C 	; AX (MQ) has a 1 in the calculated bit position
			      C 	; CX (R3) used internally 
			      C 	; DX (R2) has byte address of the byte with allocation bit
 17DD			      C @@:
 17DD  C3		      C 	retn
			      C 
 17DE			      C imap	endp
			      C 		
 17DE			      C writei proc near
			      C 	; 03/09/2019 - Retro UNIX 386 v2
			      C 	; 31/10/2012
			      C 	; 18/08/2012
			      C 	; 17/07/2012
			      C 	; BX = R1, i-number
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	;; AX=R0, BX=R1, i-number 
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 	;
			      C 	; writei: write file
			      C 	;
			      C 	; 8086 CPU & IBM PC architecture modifications by Erdogan Tan 
			      C 	;; return => if cf=1 error number in [Error]
			      C 
			      C 	; input:
			      C 	; BX = R1 = I-Number
			      C 	; u.count = byte count
			      C 	; u.base = user buffer (offset)
			      C 	; u.fofp = (pointer to) current file offset
			      C  
 17DE  33 C0		      C 	xor ax, ax ; 0		   ; clr u.nread	
 17E0  A3 0A18 R	      C 	mov word ptr [u_nread], ax ; clear the number of bytes transmitted during
			      C 				   ; read or write calls 
			      C 				   ; tst u.count		
 17E3  39 06 0A12 R	      C 	cmp word ptr [u_count], ax ; test the byte count specified by the user
			      C 	;;ja short write_1 ; 1f	   ; bgt 1f / any bytes to output; yes, branch
			      C 	;;retn			   ; rts 0 / no, return - no writing to do
			      C 	;jna short @f
 17E7  76 F4		      C 	jna short @b ; 03/09/2019
			      C 
 17E9			      C write_1:
			      C 	;cmp bx, 40		; cmp r1,$40.
			      C 			        ; does the i-node number indicate a special file?
			      C 	;ja  short dskw_0	; bgt dskw / no, branch to standard file output
			      C ;@@:
			      C ;	retn
			      C 
			      C ;	shl	bx, 1           ; asl r1 
			      C 			        ; yes, calculate the index into the special file
			      C 
			      C ;	cmp bx, offset write_3 - offset writei_2 + 2
			      C ;	ja short writei_error
			      C 
			      C ;	jmp	 word ptr [write_2][BX]-2 ; *1f-2(r1)
			      C 		                ; jump table and jump to the appropriate routine
			      C ;write_2: ;1
			      C ;	dw offset wtty	; tty
			      C ;	dw offset wmem	; mem
			      C ;	dw offset wfd ; fd0
			      C ;	dw offset wfd ; fd1
			      C ;	dw offset whd ; hd0
			      C ;	dw offset whd ; hd1
			      C ;	dw offset whd ; hd2
			      C ;	dw offset whd ; hd3
			      C ;	dw offset xmtt ; tty0
			      C ;	dw offset xmtt ; tty1
			      C ;	dw offset xmtt ; tty2
			      C ;	dw offset xmtt ; tty3
			      C ;	dw offset xmtt ; tty4
			      C ;	dw offset xmtt ; tty5
			      C ;	dw offset xmtt ; tty6
			      C ;	dw offset xmtt ; tty7
			      C ;	dw offset w1pr ; lpr
			      C ; writei_3:	
			      C ;	dw offset writei_error
			      C 
			      C ;wtty: ; write to concole tty
			      C ;	retn
			      C ;wmem: ; transfer characters from a user area of core to memory
			      C ;	retn
			      C 
			      C ;wfd:  ; write to floppy disk (drive)	
			      C ;	retn
			      C 
			      C ;whd:  ; write to hard/fixed disk (drive)	
			      C ;	retn
			      C ;wlpr  ; write to printer
			      C ;	retn
			      C 	
			      C ;xmtt:
			      C ;	retn
			      C 
 17E9			      C writei 	endp
			      C 
 17E9			      C dskw	proc near
			      C 	; 03/09/2019 - Retro UNIX 386 v2
			      C 	; 01/03/2013
			      C 	; 31/10/2012
			      C 	; 19/08/2012
			      C 	; 30/07/2012
			      C      	; 17/07/2012
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	; dskw: write routine for non-special files
			      C 	;
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 	;
			      C 	; write data to a file
			      C 	;
			      C 	; BX (R1) = I-node number
			      C 
 17E9			      C dskw_0:
 17E9  57		      C 	push di
 17EA  56		      C 	push si
			      C 
 17EB  53		      C 	push bx	; save i-number on stack
			      C 
 17EC  C6 06 1AFD R FF	      C 	mov byte ptr [error], 0FFh ; 03/09/2019
			      C 
 17F1  E8 FE7C		      C 	call iget 	; jsr	r0,iget
			      C 		  	; write i-node out (if modified), read i-node 'r1'
			      C 		        ; into i-node area of core
 17F4  72 60		      C 	jc short dskw_5 ; 01/03/2013
			      C 
			      C 	; 03/09/2019 - Retro UNIX 386 v2
 17F6  A0 0A1B R	      C 	mov al, byte ptr [i_flgs+1]
 17F9  A8 80		      C 	test al, 80h		; regular file ?
 17FB  75 07		      C 	jnz short dskw_8	; yes
 17FD  A8 20		      C 	test al, 20h 		; device file ?
			      C 	;jnz short dskw_7	; yes
 17FF  74 03		      C 	jz short dskw_8 ; 07/09/2019
			      C 	;test al, 40h		; directory ?
			      C 	;jnz short dskw_8	; yes	
 1801			      C dskw_7:
 1801  F9		      C 	stc
 1802  EB 52		      C 	jmp short dskw_5		
 1804			      C dskw_8:
 1804  8B 36 0A16 R	      C 	mov si, word ptr [u_fofp]
 1808  8B 14		      C 	mov dx, word ptr [SI] 
			      C 			; mov *u.fofp,r2 
			      C 			; put the file offset [(u.off) or the offset in
			      C 		        ; the fsp entry for this file] in r2
 180A  03 16 0A12 R	      C 	add dx, word ptr [u_count]
			      C 			; add u.count,r2 
			      C 			; no. of bytes to be written + file offset is
			      C 		        ; put in r2
			      C 
 180E  3B 16 0A22 R	      C 	cmp dx, word ptr [i_size] ; cmp r2,i.size
			      C 			; is this greater than the present size of
			      C 			; the file?
 1812  76 07		      C 	jna short dskw_1 ; blos	 1f / no, branch
			      C 
 1814  89 16 0A22 R	      C 	mov word ptr [i_size], dx ; mov	r2,i.size 
			      C 			; yes, increase the file size to file offset +
			      C 			; no. of data bytes
 1818  E8 FF79		      C 	call setimod	; jsr r0,setimod 
			      C 			; set imod=1 (i.e., core inode has been
			      C 			; modified), stuff time of modification into
			      C 			; core image of i-node
 181B			      C dskw_1: ; 1 		
 181B  E8 004D		      C 	call mget 	; jsr r0,mget 
			      C 			; get the block no. in which to write the next data
			      C   		        ; byte
			      C 			; AX = R1 = Block Number
 181E  72 36		      C 	jc short dskw_5 ; 01/03/2013
 1820  8B 36 0A16 R	      C 	mov si, word ptr [u_fofp]
 1824  8B 1C		      C 	mov bx, word ptr [SI]
 1826  81 E3 01FF	      C 	and bx, 1FFh  	; bit	*u.fofp,$777
			      C 			; test the lower 9 bits of the file offset
 182A  75 08		      C 	jnz short dskw_2 ; bne 2f 
			      C 			; if its non-zero, branch; if zero, file offset = 0,
			      C 		   	; 512, 1024,...(i.e., start of new block)
 182C  81 3E 0A12 R 0200      C 	cmp word ptr [u_count], 512 ; cmp u.count,$512.
			      C 			; if zero, is there enough data to fill an
			      C 		        ; entire block? (i.e., no. of
 1832  73 26		      C 	jnb short dskw_6 ; bhis	3f / bytes to be written greater than 512.? 
			      C 			; Yes, branch. / Don't have to read block
			      C 
 1834			      C dskw_2: ; 2
			      C 	; in as no past info. is to be saved (the entire block will be
			      C         ; overwritten).
			      C 
 1834  8B D8		      C 	mov bx, ax	; R1 (block number)
 1836  E8 FEA5		      C 	call dskrd 	; jsr r0,dskrd 
			      C 			; no, must retain old info.. Hence, read block 'r1'
			      C 		        ; into an I/O buffer
 1839  72 1B		      C 	jc short dskw_5 ; 01/03/2013
 183B			      C dskw_3: ; 3
			      C 	;call wslot
			      C 	
 183B  E8 0160		      C 	call sioreg
			      C 
			      C 	; SI = user data offset (r1)
			      C 	; DI = sector (I/O) buffer offset (r2)
			      C 	; CX = byte count (r3)
			      C 
 183E			      C dskw_4: ; 2
 183E  F3/ A4		      C 	rep movsb
			      C 
 1840  C6 06 0576 R 01	      C 	mov byte ptr [buff_m], 1
			      C 
 1845  E8 FEB4		      C 	call dskwr ; jsr r0,dskwr / write the block and the i-node
 1848  72 0C		      C         jc short dskw_5
			      C 	
 184A  83 3E 0A12 R 00	      C         cmp word ptr [u_count], 0 ; any more data to write?
 184F  77 CA		      C 	ja short dskw_1 ; 1b   ; yes, branch
			      C 
 1851  C6 06 1AFD R 00	      C 	mov byte ptr [error], 0 ; 03/09/2019
 1856			      C dskw_5:
 1856  5B		      C 	pop bx
			      C 
 1857  5E		      C 	pop si
 1858  5F		      C 	pop di
			      C 
 1859  C3		      C 	retn
			      C 
 185A			      C dskw_6:
 185A  80 3E 0576 R 01	      C 	cmp byte ptr [buff_m], 1
 185F  72 DA		      C 	jb short dskw_3
 1861  E8 FE98		      C 	call dskwr
 1864  72 F0		      C 	jc short dskw_5
 1866  A3 0574 R	      C 	mov word ptr [buff_s], ax ; block number from mget procedure
 1869  EB D0		      C 	jmp short dskw_3
			      C 
 186B			      C dskw 	endp
			      C 
			      C ; 04/09/2019 - Retro UNIX 386 v2
			      C ;sizing: db 0FFh ; (inital value is not important!)
			      C 
 186B			      C mget 	proc near
			      C 	; 15/09/2019
			      C 	; 04/09/2019 (simplified for initialization floppy disk)
			      C 	; 03/09/2019 - Retro UNIX 386 v2
			      C 	; 05/03/2013
			      C 	; 01/03/2013
			      C 	; 31/10/2012
			      C 	; 20/10/2012
			      C 	; 19/08/2012
			      C 	; 13/08/2012
			      C 	; 27/07/2012
			      C      	; 21/07/2012
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	;; return -> AX=R1
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 	; cf -> 1 = error (no free block)
			      C 
			      C 	;push bx
			      C 	;push cx
			      C 	;push dx
			      C 	 ;; contents of bx, cx, dx will be destroyed 
 186B			      C mget_0:
 186B  8B 1E 0A16 R	      C 	mov bx, word ptr [u_fofp]
 186F  8B 17		      C 	mov dx, word ptr [BX]
			      C 
 1871  8A DE		      C 	mov bl, dh
 1873  32 FF		      C 	xor bh, bh	
			      C 				
			      C 	; 31/10/2012
			      C 	;mov bx, word ptr [u_fofp]
			      C 	;mov ax, word ptr [BX]
			      C 
			      C 	;mov bl, ah  ; div ax by 256
			      C 	;xor bh, bh
			      C 
			      C 	; BX = R2
			      C         ;test word ptr [i_flgs], 4096 ; 1000h
			      C 			  	     ; is this a large or small file
			      C 	;jnz short mget_5 ; 4f ; large file
			      C 
 1875  F6 06 0A1B R 10	      C 	test byte ptr [i_flgs+1], 16 ; 10h
 187A  75 6B		      C 	jnz short mget_5 ; not small file
			      C 	
			      C         ;test bl, 0F0h ; !0Fh  ; branch if BX (R2) >= 16                    
			      C 	;jnz short mget_2 ; 3f
			      C 
			      C 	; 15/09/2019
 187C  80 FB 14		      C 	cmp bl, 14h
 187F  73 22		      C 	jnb short mget_2 ; 3f
			      C 	
			      C 	;and bl, 0Eh  ; clear all bits but bits 1,2,3
 1881  80 E3 1E		      C 	and bl, 1Eh ; 15/09/2019 ; clear all bits but bits 1,2,3,4
			      C 
 1884  D0 E3		      C 	shl bl, 1 ; 03/09/2019 - Retro UNIX 386 v2
 1886  8B 87 0A26 R	      C 	mov ax, word ptr i_dskp[BX] ; AX = R1, physical block number
 188A  0B C0		      C 	or ax, ax
 188C  75 14		      C 	jnz short mget_1 ; if physical block number is zero
			      C 			 ; then need a new block for file
 188E  E8 0098		      C 	call alloc	 ; allocate a new block for this file	
			      C 			 ; AX (R1) = Block number
 1891  72 4D		      C 	jc short mget_8	 ; cf -> 1 & ax = 0 -> no free block
			      C 	
 1893  89 87 0A26 R	      C 	mov word ptr i_dskp[BX], ax
			      C 
 1897  E8 FEFA		      C 	call setimod
			      C 
			      C 	; 09/09/2019
 189A  C6 06 0578 R 01	      C 	mov byte ptr [buff_c], 1
			      C 
 189F  E8 00D5		      C 	call clear
			      C 	
 18A2			      C mget_1: ; 2
			      C 	; AX (R1) = Physical block number
			      C 
			      C 	;pop dx
			      C 	;pop cx
			      C 	;pop bx
			      C 
 18A2  C3		      C 	retn
			      C 
 18A3			      C mget_2: ; 3
			      C 	; adding on block which changes small file to large file
 18A3  E8 0083		      C 	call alloc
 18A6  72 38		      C 	jc short mget_8 ; 01/03/2013 
			      C 	; call wslot ; setup I/O buffer for write
			      C 	;	     ; R5 points to the first data word in buffer
			      C 
			      C 	; push ds
			      C 	; pop es
			      C 
 18A8  A3 0574 R	      C 	mov word ptr [buff_s], ax  ; Block/Sector number
			      C 
 18AB  56		      C 	push si
 18AC  57		      C 	push di
 18AD  50		      C 	push ax
			      C 
			      C 	;mov cx, 8 ; R3, transfer old physical block pointers
			      C 		   ; into new indirect block area for the new
			      C 		   ; large file	
 18AE  B9 000A		      C 	mov cx, 10 ; 15/09/2019	
			      C 	;mov di, offset Buffer ; BX = R5
 18B1  8B 3E 0572 R	      C 	mov di, word ptr [buff_o]  ; 03/09/2019
 18B5  BE 0A26 R	      C 	mov si, offset i_dskp 
			      C 
 18B8  33 C0		      C 	xor ax, ax ; mov ax, 0
 18BA			      C mget_3: ; 1
 18BA  A5		      C 	movsw
 18BB  A5		      C 	movsw ; 07/09/2019
			      C 	;mov word ptr [SI-2], ax
 18BC  89 44 FC		      C 	mov word ptr [SI-4], ax ; 07/09/2019
 18BF  E2 F9		      C 	loop mget_3
			      C 	
			      C 	;;mov cl, 256-8 ; clear rest of data buffer
			      C 	;mov cl, 256-16 ; 07/09/2019
 18C1  B1 EC		      C 	mov cl, 256-20 ; 15/09/2019	
			      C 
 18C3			      C mget_4:	; 1
 18C3  F3/ AB		      C 	rep stosw
			      C 
 18C5  58		      C 	pop ax
 18C6  5F		      C 	pop di
 18C7  5E		      C 	pop si
			      C 
 18C8  C6 06 0576 R 01	      C 	mov byte ptr [buff_m], 1 ; modified
			      C 
 18CD  E8 FE2C		      C 	call dskwr
 18D0  72 56		      C 	jc short mget_7 ; 01/03/2013	
			      C 
 18D2  A3 0A26 R	      C 	mov word ptr [i_dskp], ax
			      C 	
			      C 	;or word ptr [i_flgs], 4096 ; 1000h
			      C 
 18D5  80 0E 0A1B R 10	      C 	or byte ptr [i_flgs+1], 10000b ; 10h ; 16
			      C 
 18DA  E8 FEB7		      C 	call setimod
			      C 
			      C 	; 15/09/2019
 18DD  EB 8C		      C 	jmp short mget_0
			      C 
 18DF			      C mget_9: ; 01/03/2013
 18DF  58		      C 	pop ax
 18E0			      C mget_8: 
 18E0  C7 06 1AFD R 0200      C 	mov word ptr [Error], err_NOFREEBLOCK
			      C 	
			      C 	;pop dx
			      C 	;pop cx
			      C 	;pop bx
			      C 
 18E6  C3		      C 	retn
			      C 
 18E7			      C mget_5: ; 4 ; large file
			      C 	; 15/09/2019
			      C 	; 05/03/2013
			      C 	; 03/03/2013
			      C 	; 27/07/2012
			      C 	;mov ax, bx
			      C 	;mov cx, 256
			      C 	;xor dx, dx
			      C 	;div cx
			      C 	;and bx, 1FEh	; zero all bit but 1,2,3,4,5,6,7,8
			      C 			; gives offset in indirect block
			      C 	;push bx	; R2	
			      C 	;mov bx, ax	; calculate offset in i-node for pointer
			      C 			; to proper indirect block
			      C 	;and bx, 0Eh
			      C 	;mov ax, word ptr i_dskp[BX] ; R1
 18E7  80 E3 FE		      C 	and bl, 0FEh ; 05/03/2013
			      C 	;shl bl, 1 ; 07/09/2019
			      C 	; bh = 0
 18EA  D1 E3		      C 	shl bx, 1 ; 15/09/2019
 18EC  53		      C 	push bx
 18ED  A1 0A26 R	      C 	mov ax, word ptr [i_dskp] ; 03/03/2013
 18F0  0B C0		      C 	or ax, ax  ; 20/10/2012
 18F2  75 0E		      C 	jnz short mget_6 ; 2f
			      C 	
 18F4  E8 0032		      C 	call alloc
 18F7  72 E6		      C 	jc short mget_9 ; 01/03/2013 
			      C 
			      C 	;mov word ptr i_dskp[BX], ax ; R1, block number
 18F9  A3 0A26 R	      C 	mov word ptr [i_dskp], ax
			      C 
 18FC  E8 FE95		      C 	call setimod
			      C 
 18FF  E8 0075		      C 	call clear		
			      C 
 1902			      C mget_6: ;2
			      C         ; 27/7/2012 
 1902  8B D8		      C 	mov bx, ax ; R1
 1904  E8 FDD7		      C 	call dskrd ; read indirect block
 1907  5B		      C 	pop bx  ; R2, get offset
			      C         ; 19/8/2012
 1908  72 1E		      C 	jc short mget_7
			      C 	;add bx, offset Buffer ; R5, first word of indirect block
 190A  03 1E 0572 R	      C 	add bx, word ptr [buff_o] ; 04/09/2019	
 190E  8B 07		      C 	mov ax, word ptr [bx] ; put physical block no of block
			      C 			      ; in file sought in R1 (AX)
 1910  0B C0		      C 	or ax, ax
 1912  75 14		      C         jnz short mget_7 ; 2f 
			      C 
 1914  E8 0012		      C 	call alloc
 1917  72 C7		      C 	jc short mget_8 ; 01/03/2013
			      C 
 1919  89 07		      C 	mov word ptr [bx], ax ; R1
			      C 
 191B  C6 06 0576 R 01	      C 	mov byte ptr [buff_m], 1 ; modified
			      C 
			      C 	;call wslot
 1920  E8 FDD9		      C 	call dskwr
 1923  72 03		      C 	jc short mget_7 ; 01/03/2013
			      C 
			      C 	; ax = R1, block number of new block
			      C 
 1925  E8 004F		      C 	call clear	
			      C 
 1928			      C mget_7: ; 2
			      C 	; ax = R1, block number of new block
			      C 	;pop dx
			      C 	;pop cx
			      C 	;pop bx 
			      C 	
 1928  C3		      C 	retn
			      C 
 1929			      C mget endp
			      C 
 1929			      C alloc 	proc near
			      C 	; 04/09/2019 - Retro UNIX 386 v2
			      C 	; 21/08/2012
			      C 	; 18/08/2012
			      C 	; 17/08/2012
			      C 	; 05/08/2012		
			      C  	; 21/07/2012
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	;; input -> AX=R1 
			      C 	;; output -> AX=R1
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 
 1929  51		      C 	push cx
 192A  53		      C 	push bx ; R2
 192B  52		      C 	push dx ; R3
			      C 
			      C 	;mov bx, offset systm ; SuperBlock 
			      C 		; start of inode and free storage map for disk
 192C			      C alloc_1: ; 1
			      C 	;mov ax, word ptr [BX] ; first word contains # of bytes 
			      C 	                ; in free storage map
			      C 	;shl ax, 1	; multiply AX (R1) by 8 gives # of blocks
			      C 	;shl ax, 1
			      C 	;shl ax, 1
			      C 	;mov cx, ax ; R1, bit count of free storage map
			      C 	; 04/09/2019
 192C  B9 0B40		      C 	mov cx, 2880 ; bit count of free storage map
 192F  BB 146E R	      C 	mov bx,	offset fbm_buffer-2
			      C 	
 1932  33 C0		      C 	xor ax, ax ; 0
 1934			      C alloc_2: ; 1
 1934  43		      C 	inc bx ; 18/8/2012
 1935  43		      C 	inc bx ; 
 1936  8B 17		      C 	mov dx, word ptr [BX]  ; mov (R2)+, R3
 1938  0B D2		      C 	or dx, dx
 193A  75 0C		      C 	jnz short alloc_3 ; 1f
			      C 			; branch if any free blocks in this word	
 193C  83 C0 10		      C 	add ax, 16
 193F  3B C1		      C 	cmp ax, cx    
 1941  72 F1		      C 	jb short alloc_2 ; 1b
			      C 
			      C 	;jmp short panic  ; no free storage 
			      C 
 1943  33 C0		      C 	xor ax, ax
 1945  F9		      C 	stc		 ; cf=1 --> error: no free block
			      C 
 1946  EB 0E		      C 	jmp short alloc_7	
			      C 
 1948			      C alloc_3: ; 1
 1948  D1 EA		      C         shr dx, 1  ; R3  ; Branch when free block found,
			      C 			 ; bit for block k is in byte k/8 
			      C 			 ; in bit k (mod 8) 	
 194A  72 03		      C 	jc short alloc_4 ; 1f
 194C  40		      C 	inc ax  ; R1     ; increment bit count in bit k (mod 8)    
 194D  EB F9		      C 	jmp short alloc_3 ; 1b
			      C 	
 194F			      C alloc_4:
			      C 	; 5/8/2012
 194F  E8 0008		      C 	call free_3
			      C 
 1952			      C alloc_5: ; 1 
			      C 	; 21/8/2012
 1952  F7 D2		      C 	not dx ; masking bit is '0' and others are '1'
 1954  21 17		      C 	and word ptr [BX], dx    ; bic r3, (r2) 	
			      C 	; 0 -> allocated	retn
 1956			      C alloc_6:
			      C 	; inc byte ptr [smod] ; super block modified sign
			      C 	;mov byte ptr [smod], 1
 1956			      C alloc_7:
 1956  5A		      C 	pop dx ; R3
 1957  5B		      C 	pop bx ; R2
 1958  59		      C 	pop cx 
			      C 	; AX (R1) = Block number
 1959  C3		      C 	retn
			      C 
 195A			      C alloc   endp
			      C 
			      C ; 04/09/2019 - Retro UNIX 386 v2 (UNIXFDFS.COM for v2, initial workings)
			      C 
			      C ;free	proc near
			      C ;	; 04/09/2019
			      C ;	; 01/09/2019 - Retro UNIX 386 v2 
			      C ;	;	      ('Free Block Map' sector) 
			      C ;	; 17/08/2012
			      C ;	; 14/08/2012
			      C ;	; 05/08/2012		
			      C ;    	; Derived from (original) UNIX v1 source code
			      C ;	; PRELIMINARY release of Unix Implementation Document, 
			      C ;	; 20/06/1972
			      C ;	;; input -> AX=R1 
			      C ;	;; output -> free map (superblock) will be updated
			      C ;	; RETRO UNIX v1 FS
			      C ;	; initialization/format version
			      C ;
			      C ;	push cx
			      C ;	push dx ; R3
			      C ;	push bx ; R2
			      C ;	
			      C ;	call free_3
			      C ;	; 21/8/2012
			      C ;	or word ptr [BX], dx ; set bit for this block (available)
			      C ;			     ; bis r3, (r2)	
			      C ;free_1: ; 2
			      C ;	;inc byte ptr [smod] ; super block modified sign
			      C ;	;mov byte ptr [smod], 1
			      C ;
			      C ;	pop bx ; R2
			      C ;	pop dx ; R1
			      C ;	pop cx
			      C ;
			      C ;free_2: ; 1		
			      C ;	retn
			      C 
			      C ;;free_3:
			      C ;;	mov cx, ax ; BX = R2, AX =  R1 
			      C ;; 	;and cx, 7  ; clear all bit but 0,1,2  
			      C ;;				; CX = (k) mod 8
			      C ;;; bit masking
			      C ;;	mov dx, 1
			      C ;;	dec cl
			      C ;;	jz short @f
			      C ;,	shl dx, cl  ; mask bit at required bit position 	
			      C ;;@@:
			      C ;;	mov bx, ax  ; mov R1, R2
			      C ;;		    ; divide block number (R2/BX) by 16	
			      C ;;	shr bx, 1
			      C ;;	shr bx, 1
			      C ;;	shr bx, 1
			      C ;;	shr bx, 1
			      C ;;	jnc short free_4 ; 1f, branch if bit 3 in Bx (R1) was 0
			      C ;;		  ; i.e. bit for block is in lower half of word
			      C ;;	xchg dh, dl ; swap bytes in DX (R3),
			      C ;;		    ; bit in upper half word in free storage map
			      C ;;	
			      C ;;
			      C ;;free_4: ; 1
			      C ;;	shl bx, 1 , multiply block number by 2, BX (R2) = k/8
			      C ;;	add bx, offset systm+2 ; SuperBlock+2
			      C 
 195A			      C free_3	proc near ; 05/09/2019
			      C 	
			      C ;free_3:
 195A  BA 0001		      C 	mov dx, 1  ; 21/8/2012	
 195D  8B C8		      C 	mov cx, ax
 195F  83 E1 0F		      C 	and cx, 0Fh
 1962  74 02		      C 	jz short @f
 1964  D3 E2		      C 	shl dx, cl ; 21/8/2012
 1966			      C @@:
 1966  8B D8		      C 	mov bx, ax
 1968  D1 EB		      C 	shr bx, 1
 196A  D1 EB		      C 	shr bx, 1
 196C  D1 EB		      C 	shr bx, 1
 196E  D1 EB		      C 	shr bx, 1
 1970			      C free_4: ; 1
 1970  D1 E3		      C 	shl bx, 1 ; 21/8/2012
			      C 	; BX (R2) = k/8	
			      C 	;add bx, offset systm+2 ; SuperBlock+2
 1972  81 C3 1470 R	      C 	add bx, offset fbm_buffer ; 04/09/2019
			      C 
 1976  C3		      C 	retn
			      C 
 1977			      C free_3	endp
			      C 
			      C ;free  	endp
			      C 
 1977			      C clear	proc near
			      C 	; 05/08/2012
			      C  	; 21/07/2012
			      C      	; Derived from (original) UNIX v1 source code
			      C 	; PRELIMINARY release of Unix Implementation Document, 
			      C 	; 20/06/1972
			      C 	;; input -> AX=R1 (block number)
			      C 	;; output -> AX=R1
			      C 	; RETRO UNIX v1 FS
			      C 	; initialization/format version
			      C 
			      C 	;call wslot ; setup I/O buffer for write
			      C 	;	   ; R5 points to the first data word in buffer
			      C 	; BX = R5
			      C 
 1977  A3 0574 R	      C 	mov word ptr [buff_s], ax 
			      C 	
			      C 	;push ds
			      C 	;pop es
			      C 	
 197A  57		      C 	push di
 197B  51		      C 	push cx
 197C  50		      C 	push ax
			      C 
			      C 	; 02/09/2019
 197D  80 3E 0578 R 00	      C 	cmp byte ptr [buff_c], 0
 1982  76 0E		      C 	jna short clr_ok 
			      C 
 1984  33 C0		      C  	xor ax, ax
			      C 	
 1986  A2 0578 R	      C 	mov byte ptr [buff_c], al ; 0 ; 02/09/2019
			      C 	
			      C 	;;mov di, bx
			      C 	;mov di, offset Buffer
 1989  8B 3E 0572 R	      C 	mov di, word ptr [buff_o] ; 02/09/2019
 198D  B9 0100		      C 	mov cx, 256 
 1990  F3/ AB		      C 	rep stosw
 1992			      C clr_ok:	
 1992  C6 06 0576 R 01	      C 	mov byte ptr [buff_m], 1 ; modified
			      C 
 1997  E8 FD62		      C 	call dskwr ; 5/8/2012
			      C 
 199A  58		      C 	pop ax
 199B  59		      C 	pop cx
 199C  5F		      C 	pop di	
			      C 	
 199D  C3		      C 	retn
			      C 
 199E			      C clear	endp
			      C 
 199E			      C sioreg proc near
			      C 	; 02/01/2020
			      C 	; 04/09/2019 - RETRO UNIX v0.3 (Retro UNIX 386 v2)
			      C 	; 16/12/2012
			      C 	; 31/10/2012
			      C 	; 19/08/2012
			      C 	; 04/08/2012
			      C 	; Erdogan Tan - RETRO UNIX v0.1
			      C 	; input -> R5 (DX) = sector buffer (data) address
			      C 	;	   *u.fofp = file offset, to start writing
			      C 	;	   u.base = address of 1st byte of user data
			      C 	;	   u.count = byte count to be transferred
			      C 	;	   u.nread = number of bytes written out
			      C 	;		     previously.
			      C 	; output -> *u.fofp = last (written) byte + 1
			      C 	;	   u.count = number of bytes of data left
			      C 	;		     to be transferred.			
			      C 	;	   u.nread = updated to include the count
			      C 	;		    of bytes to be transferred.
			      C 	;	   R1 (SI) = address of 1st byte of data
			      C 	;	   R2 (DI) = specifies the byte in IO 
			      C 	;	            sector (I/O) buffer. (Offset)	
			      C 	;	   R3 (CX) = number of bytes of data to be
			      C 	;		    transferred to/from sector (I/O)
			      C 	;		    buffer.		
			      C 
			      C 	;mov dx, offset Buffer  ; R5
			      C 	; 31/10/2012	
 199E  8B 36 0A16 R	      C         mov si, word ptr [u_fofp] ; mov	*u.fofp,r2 
 19A2  8B 3C		      C 	mov di, word ptr [SI]	  ; file offset (in bytes) is moved to r2
 19A4  8B CF		      C 	mov cx, di 		  ; mov	r2,r3 / and also to r3
			      C 
 19A6  81 C9 FE00	      C 	or cx, 0FE00h ; set bits 9...15 of file offset in R3
 19AA  81 E7 01FF	      C 	and di, 1FFh ; calculate file offset mod 512
			      C 
			      C 	; 19/08/2012
			      C 	;add di, offset Buffer ; DI/r2 now points to 1st byte in buffer
 19AE  03 3E 0572 R	      C 	add di, word ptr [buff_o] ; 04/09/2019
			      C 			; where data is to be placed
			      C         
			      C 	;mov si, word ptr [u_base] ; address of data is in r1
 19B2  F7 D9		      C 	neg cx ; 512- file offset(mod512) in R3 (cx)
			      C 			; the number of free bytes in the file block
 19B4  3B 0E 0A12 R	      C         cmp cx, word ptr [u_count] ;compare this with the number of data bytes
			      C 				   ; to be written to the file
 19B8  76 04		      C 	jna short @f ; 2f
			      C 			   ; if less than branch. Use the number of free bytes
			      C 		           ; in the file block as the number to be written
 19BA  8B 0E 0A12 R	      C         mov cx, word ptr [u_count]
			      C 			   ; if greater than, use the number of data bytes
			      C 		           ; as the number to be written
 19BE			      C @@:	; 2
			      C ;sioreg_1:		
 19BE  01 0E 0A18 R	      C 	add word ptr [u_nread], cx ; r3 + number of bytes
			      C 			; xmitted during write is put into
			      C                         ; u.nread
 19C2  29 0E 0A12 R	      C         sub word ptr [u_count], cx
			      C 			; u.count = no. of bytes that still must be
			      C 		        ; written or read
			      C 	;mov si, word ptr [u_fofp] ; 02/01/2020
 19C6  01 0C		      C         add word ptr [SI], cx ; new file offset = number 
			      C 			; of bytes done + old file offset
			      C 
			      C 	; 16/12/2012 BugFix
 19C8  8B 36 0A14 R	      C         mov si, word ptr [u_base] ; address of data is in SI/r1
			      C 
 19CC  01 0E 0A14 R	      C         add word ptr [u_base], cx ; u.base points to 1st of remaining
			      C 			; data bytes
 19D0  C3		      C 	retn
			      C 
 19D1			      C sioreg endp
			      C 
 19D1			      C epoch proc near
			      C 	; 21/07/2012
			      C 	; 15/07/2012
			      C 	; 14/07/2012		
			      C 	; Erdogan Tan - RETRO UNIX v0.1
			      C 	; compute current date and time as UNIX Epoch/Time
			      C 	; UNIX Epoch: seconds since 1/1/1970 00:00:00
			      C 
			      C 	; 21/7/2012
 19D1  53		      C 	push bx
 19D2  51		      C 	push cx
			      C 
 19D3  B4 02		      C 	mov ah, 02h		; Return Current Time
 19D5  CD 1A		      C         int 1Ah
 19D7  86 E9		      C         xchg ch,cl
 19D9  89 0E 1ADE R	      C         mov word ptr [hour], cx
 19DD  86 F2		      C         xchg dh,dl
 19DF  89 16 1AE2 R	      C         mov word ptr [second], dx
			      C 
 19E3  B4 04		      C         mov ah, 04h		; Return Current Date
 19E5  CD 1A		      C         int 1Ah
 19E7  86 E9		      C         xchg ch,cl
 19E9  89 0E 1AD8 R	      C         mov word ptr [year], cx
 19ED  86 F2		      C         xchg dh,dl
 19EF  89 16 1ADA R	      C         mov word ptr [month], dx
			      C 
 19F3  B9 3030		      C 	mov cx, 3030h
			      C 
 19F6  A0 1ADE R	      C 	mov al, byte ptr [hour] ; Hour
			      C             ; AL <= BCD number)
 19F9  D4 10		      C         db 0D4h,10h		; Undocumented inst. AAM
			      C 				; AH = AL / 10h
			      C 				; AL = AL MOD 10h
 19FB  D5 0A		      C         aad ; AX= AH*10+AL
			      C 		
 19FD  A2 1ADE R	      C 	mov byte ptr [hour], al
			      C 
 1A00  A0 1ADF R	      C 	mov al, byte ptr [hour]+1 ; Minute
			      C             ; AL <= BCD number)
 1A03  D4 10		      C         db 0D4h,10h		; Undocumented inst. AAM
			      C 				; AH = AL / 10h
			      C 				; AL = AL MOD 10h
 1A05  D5 0A		      C         aad ; AX= AH*10+AL
			      C 		
 1A07  A2 1AE0 R	      C 	mov byte ptr [minute], al
			      C 
 1A0A  A0 1AE2 R	      C 	mov al, byte ptr [second] ; Second
			      C             ; AL <= BCD number)
 1A0D  D4 10		      C         db 0D4h,10h		; Undocumented inst. AAM
			      C 				; AH = AL / 10h
			      C 				; AL = AL MOD 10h
 1A0F  D5 0A		      C         aad ; AX= AH*10+AL
			      C 		
 1A11  A2 1AE2 R	      C 	mov byte ptr [second], al
			      C 
			      C 	
 1A14  A1 1AD8 R	      C 	mov ax, word ptr [year] ; Year (century)
 1A17  50		      C         push ax
			      C 	    ; AL <= BCD number)
 1A18  D4 10		      C         db 0D4h,10h		; Undocumented inst. AAM
			      C 				; AH = AL / 10h
			      C 				; AL = AL MOD 10h
 1A1A  D5 0A		      C         aad ; AX= AH*10+AL
			      C 		
 1A1C  B4 64		      C 	mov ah, 100
 1A1E  F6 E4		      C 	mul ah
 1A20  A3 1AD8 R	      C 	mov word ptr [year], ax
			      C 
 1A23  58		      C 	pop ax
 1A24  8A C4		      C 	mov al, ah
			      C             ; AL <= BCD number)
 1A26  D4 10		      C         db 0D4h,10h		; Undocumented inst. AAM
			      C 				; AH = AL / 10h
			      C 				; AL = AL MOD 10h
 1A28  D5 0A		      C         aad ; AX= AH*10+AL
			      C 		
 1A2A  01 06 1AD8 R	      C 	add word ptr [year], ax
			      C 
			      C 
 1A2E  A0 1ADA R	      C 	mov al, byte ptr [month] ; Month
			      C             ; AL <= BCD number)
 1A31  D4 10		      C         db 0D4h,10h		; Undocumented inst. AAM
			      C 				; AH = AL / 10h
			      C 				; AL = AL MOD 10h
 1A33  D5 0A		      C         aad ; AX= AH*10+AL
			      C 	
 1A35  A2 1ADA R	      C 	mov byte ptr [month], al	
			      C 
			      C 
 1A38  A0 1ADB R	      C 	mov al, byte ptr [month]+1 ; Day
			      C             ; AL <= BCD number)
 1A3B  D4 10		      C         db 0D4h,10h		; Undocumented inst. AAM
			      C 				; AH = AL / 10h
			      C 				; AL = AL MOD 10h
 1A3D  D5 0A		      C         aad ; AX= AH*10+AL
			      C 
 1A3F  A2 1ADC R	      C 	mov byte ptr [Day], al
			      C 	
 1A42			      C convert_to_epoch:
			      C 
 1A42  8B 16 1AD8 R	      C 	mov dx, word ptr [year]
 1A46  81 EA 07B2	      C 	sub dx, 1970
 1A4A  B8 016D		      C 	mov ax, 365
 1A4D  F7 E2		      C 	mul dx
 1A4F  32 FF		      C 	xor bh, bh
 1A51  8A 1E 1ADA R	      C 	mov bl, byte ptr [month]
 1A55  FE CB		      C 	dec bl
 1A57  D0 E3		      C 	shl bl, 1
 1A59  8B 8F 1AE4 R	      C 	mov cx, word ptr DMonth[BX]
 1A5D  8A 1E 1ADC R	      C 	mov bl, byte ptr [Day]
 1A61  FE CB		      C 	dec bl
			      C 	
 1A63  03 C1		      C 	add ax, cx
 1A65  83 D2 00		      C 	adc dx, 0
 1A68  03 C3		      C 	add ax, bx
 1A6A  83 D2 00		      C 	adc dx, 0
			      C 				; DX:AX = days since 1/1/1970
 1A6D  8B 0E 1AD8 R	      C 	mov cx, word ptr [year]
 1A71  81 E9 07B1	      C 	sub cx, 1969
 1A75  D1 E9		      C 	shr cx, 1
 1A77  D1 E9		      C 	shr cx, 1		
			      C 		; (year-1969)/4
 1A79  03 C1		      C 	add ax, cx
 1A7B  83 D2 00		      C 	adc dx, 0
			      C 				; + leap days since 1/1/1970
			      C 
 1A7E  80 3E 1ADA R 02	      C 	cmp byte ptr [month], 2	; if past february
 1A83  76 0F		      C 	jna short @f
 1A85  8B 0E 1AD8 R	      C 	mov cx, word ptr [year]
 1A89  83 E1 03		      C 	and cx, 3 ; year mod 4
 1A8C  75 06		      C 	jnz short @f		
			      C 				; and if leap year
 1A8E  83 C0 01		      C 	add ax, 1		; add this year's leap day (february 29)
 1A91  83 D2 00		      C 	adc dx, 0
 1A94			      C @@:				; compute seconds since 1/1/1970
 1A94  BB 0018		      C 	mov bx, 24
 1A97  E8 002A		      C 	call proc_mul32
			      C 
 1A9A  8A 1E 1ADE R	      C 	mov bl, byte ptr [hour]
 1A9E  03 C3		      C 	add ax, bx
 1AA0  83 D2 00		      C 	adc dx, 0
			      C 	
 1AA3  BB 003C		      C 	mov bx, 60
 1AA6  E8 001B		      C 	call proc_mul32
			      C 
 1AA9  8A 1E 1AE0 R	      C 	mov bl, byte ptr [minute]
 1AAD  03 C3		      C 	add ax, bx
 1AAF  83 D2 00		      C 	adc dx, 0
			      C 	
 1AB2  BB 003C		      C 	mov bx, 60
 1AB5  E8 000C		      C 	call proc_mul32
			      C 
 1AB8  8A 1E 1AE2 R	      C 	mov bl, byte ptr [second]
 1ABC  03 C3		      C 	add ax, bx
 1ABE  83 D2 00		      C  	adc dx, 0
			      C 
			      C 	; DX:AX -> seconds since 1/1/1970 00:00:00
			      C 
			      C 	; 21/7/2012
 1AC1  59		      C 	pop cx
 1AC2  5B		      C 	pop bx
			      C 	
 1AC3  C3		      C 	retn
			      C 
 1AC4			      C epoch endp
			      C 
			      C ;'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''';
			      C ; 32 bit Multiply by (c) Erdogan TAN - 1999                  ;
			      C ;- - - - - - - - - - - - - - - - - - - - - - - - - -- - - - -;
			      C ;                                                            ;
			      C ; input -> DX_AX = 32 bit multiplier                         ;
			      C ; input -> BX = 16 bit number to be multiplied by DX_AX      ;
			      C ; output -> BX_DX_AX = 48 bit (16+32 bit) result number      ;
			      C ;                                                            ;
			      C ;............................................................;
			      C 
 1AC4			      C proc_mul32 proc near
			      C 
			      C 	;push cx
			      C 
 1AC4  8B CB		      C 	mov cx, bx
 1AC6  8B DA		      C 	mov bx, dx
			      C 
 1AC8  F7 E1		      C 	mul cx
			      C 
 1ACA  93		      C 	xchg ax, bx
			      C 
 1ACB  52		      C 	push dx
			      C 
 1ACC  F7 E1		      C 	mul cx 
			      C 
 1ACE  59		      C 	pop cx 
			      C 
 1ACF  03 C1		      C 	add ax, cx 
 1AD1  83 D2 00		      C 	adc dx, 0
			      C 
 1AD4  93		      C 	xchg bx, ax
 1AD5  87 D3		      C 	xchg dx, bx
			      C 
			      C 	;pop cx
			      C 
 1AD7  C3		      C 	retn
			      C 
 1AD8			      C proc_mul32 endp
			      C 
 1AD8 07B2		      C year:   dw 1970
 1ADA 0001		      C month:  dw 1
 1ADC 0001		      C day:    dw 1
 1ADE 0000		      C hour:   dw 0
 1AE0 0000		      C minute: dw 0
 1AE2 0000		      C second: dw 0
			      C 
 1AE4			      C DMonth:
 1AE4  0000		      C dw 0
 1AE6  001F		      C dw 31
 1AE8  003B		      C dw 59
 1AEA  005A		      C dw 90
 1AEC  0078		      C dw 120
 1AEE  0097		      C dw 151
 1AF0  00B5		      C dw 181
 1AF2  00D4		      C dw 212
 1AF4  00F3		      C dw 243
 1AF6  0111		      C dw 273
 1AF8  0130		      C dw 304
 1AFA  014E		      C dw 334
			      C ;dw 365
			      C 
 1AFC  00		      C db 0
			      C 
 1AFD 00		      C Error: db 0 ; Hardware error
 1AFE  00		      C        db 0 ; Software error	  
			      C 
 1AFF 00		      C smod: db 0
 1B00 00		      C imod: db 0
			      C 
 1B01 0000		      C ii: dw 0
			      C 
 1B03			      C dotodot:
 1B03  3030		      C dw 3030h
 1B05  68		      C db "h"
 1B06  0D 0A 00		      C db 0Dh, 0Ah, 0
			      C 
				;;;;;   

				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				;  messages
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 1B09				UNIX_Welcome:
 1B09  0D 0A					db 0Dh,0Ah
 1B0B  52 45 54 52 4F 20			db 'RETRO UNIX 386 v2 1.44 MB Floppy Disk (RUFS) Format Utility'
       55 4E 49 58 20 33
       38 36 20 76 32 20
       31 2E 34 34 20 4D
       42 20 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 28 52 55 46
       53 29 20 46 6F 72
       6D 61 74 20 55 74
       69 6C 69 74 79
 1B46  0D 0A					db 0Dh, 0Ah
 1B48  62 79 20 45 72 64			db 'by Erdogan TAN [13/04/2022]'
       6F 67 61 6E 20 54
       41 4E 20 5B 31 33
       2F 30 34 2F 32 30
       32 32 5D
 1B63  0D 0A					db 0Dh,0Ah
 1B65  0D 0A					db 0Dh,0Ah
 1B67  55 73 61 67 65 3A			db 'Usage: unixfdfs [Drive] ', 0Dh,0Ah
       20 75 6E 69 78 66
       64 66 73 20 5B 44
       72 69 76 65 5D 20
       0D 0A
 1B81  20 20 20 20 20 20			db '       unixfdfs -i [floppy disk image file name] '
       20 75 6E 69 78 66
       64 66 73 20 2D 69
       20 5B 66 6C 6F 70
       70 79 20 64 69 73
       6B 20 69 6D 61 67
       65 20 66 69 6C 65
       20 6E 61 6D 65 5D
       20
 1BB2  0D 0A					db 0Dh,0Ah
 1BB4  0D 0A					db 0Dh,0Ah
 1BB6  44 72 69 76 65 20			db "Drive names:"
       6E 61 6D 65 73 3A
 1BC2  0D 0A					db 0Dh,0Ah
 1BC4  0D 0A					db 0Dh,0Ah
 1BC6  66 64 30 20 20 20			db "fd0    (Floppy Disk 1)", 0Dh, 0Ah
       20 28 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 31 29 0D 0A
 1BDE  66 64 31 20 20 20			db "fd1    (Floppy Disk 2)", 0Dh, 0Ah
       20 28 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 32 29 0D 0A
 1BF6  2E 2E 2E 0D 0A				db "...", 0Dh, 0Ah
 1BFB  41 3A 20 20 20 20			db "A:     (Floppy Disk 1)", 0Dh, 0Ah
       20 28 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 31 29 0D 0A
 1C13  42 3A 20 20 20 20			db "B:     (Floppy Disk 2)", 0Dh, 0Ah
       20 28 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 32 29 0D 0A
 1C2B  0D 0A					db 0Dh,0Ah
 1C2D  0D 0A					db 0Dh,0Ah
 1C2F  45 78 61 6D 70 6C			db 'Example 1: unixfdfs A: ', 0Dh,0Ah
       65 20 31 3A 20 75
       6E 69 78 66 64 66
       73 20 41 3A 20 0D
       0A
 1C48  45 78 61 6D 70 6C			db 'Example 2: unixfdfs -i a.img '
       65 20 32 3A 20 75
       6E 69 78 66 64 66
       73 20 2D 69 20 61
       2E 69 6D 67 20
 1C65  0D 0A					db 0Dh,0Ah
 1C67  00					db 0

 1C68				Msg_DoYouWantToFormat:
 1C68  07					db 07h
 1C69  0D 0A					db 0Dh, 0Ah
 1C6B  57 41 52 4E 49 4E			db 'WARNING!'
       47 21
 1C73  0D 0A					db 0Dh, 0Ah
 1C75  41 6C 6C 20 64 61			db 'All data on the drive will be erased.'
       74 61 20 6F 6E 20
       74 68 65 20 64 72
       69 76 65 20 77 69
       6C 6C 20 62 65 20
       65 72 61 73 65 64
       2E
 1C9A  0D 0A					db 0Dh, 0Ah
 1C9C  0D 0A					db 0Dh, 0Ah
 1C9E  44 6F 20 79 6F 75			db 'Do you want to format drive '
       20 77 61 6E 74 20
       74 6F 20 66 6F 72
       6D 61 74 20 64 72
       69 76 65 20
 1CBA				RUFS_DRIVE:
 1CBA  41 3A 20 28 59 65			db 'A: (Yes/No)? ', 0
       73 2F 4E 6F 29 3F
       20 00

 1CC8				Msg_Installing_File_System:
 1CC8  0D 0A					db 0Dh, 0Ah
 1CCA  49 6E 73 74 61 6C			db "Installing Retro UNIX v2 File Sytem...", 0
       6C 69 6E 67 20 52
       65 74 72 6F 20 55
       4E 49 58 20 76 32
       20 46 69 6C 65 20
       53 79 74 65 6D 2E
       2E 2E 00

 1CF1				Msg_Writing_Boot_Sector:
 1CF1  0D 0A					db 0Dh, 0Ah
						;db "Writing UNIX boot sector...", 0
						; 05/04/2022
 1CF3  57 72 69 74 69 6E			db "Writing Retro UNIX v2 boot sector...", 0
       67 20 52 65 74 72
       6F 20 55 4E 49 58
       20 76 32 20 62 6F
       6F 74 20 73 65 63
       74 6F 72 2E 2E 2E
       00

 1D18 0000			Cursor_Pos:     dw 0

 1D1A				Msg_Volume_Name:
 1D1A  0D 0A					db 0Dh, 0Ah
 1D1C  56 6F 6C 75 6D 65			db "Volume Name: ", 0
       20 4E 61 6D 65 3A
       20 00
 1D2A				Msg_OK:
 1D2A  20 4F 4B 2E 00				db ' OK.', 0

 1D2F 20 59 45 53		msg_YES:        db ' YES'
 1D33  00					db 0
 1D34 20 4E 4F			msg_NO:         db ' NO'
 1D37  00					db 0   

				; 12/8/2012
 1D38				msg_disk_rw_error:
 1D38  0D 0A					db 0Dh, 0Ah
 1D3A  44 69 73 6B 20 72			db 'Disk r/w error!'
       2F 77 20 65 72 72
       6F 72 21
 1D49  00					db 0

				; 09/09/2019
 1D4A				msg_drive_not_ready:
 1D4A  0D 0A					db 0Dh, 0Ah
 1D4C  44 72 69 76 65 20			db 'Drive not ready!'
       6E 6F 74 20 72 65
       61 64 79 21
 1D5C  00					db 0

 1D5D				msg_error_Number:
 1D5D  0D 0A					db 0Dh, 0Ah
 1D5F  45 72 72 6F 72 20			db 'Error No: '
       4E 6F 3A 20
 1D69 3030			str_err:        dw 3030h
 1D6B  68					db 'h'
 1D6C				UNIX_CRLF:
 1D6C  0D 0A 00					db 0Dh, 0Ah, 0

				;Error_Code:	db 0

 1D6F 04			RetryCount:     db 4 ; 09/09/2019

 1D70  000F [			str_volume_name: db 15 dup (0)
        00
       ]

 1D7F  54 75 72 6B 69 73			db  'Turkish Rational UNIX', 0
       68 20 52 61 74 69
       6F 6E 61 6C 20 55
       4E 49 58 00
 1D95  52 45 54 52 4F 20			db  'RETRO UNIX 386 v2.0 by Erdogan TAN', 0
       55 4E 49 58 20 33
       38 36 20 76 32 2E
       30 20 62 79 20 45
       72 64 6F 67 61 6E
       20 54 41 4E 00
 1DB8  31 31 2F 30 37 2F			db  '11/07/2012', 0, '13/04/2022', 0 
       32 30 31 32 00 31
       33 2F 30 34 2F 32
       30 32 32 00
				even
 1DCE				boot_sector:
				; Retro UNIX 8086 v1 (+ 386 v1) Boot Sector Image
				;include	rufsbs.txt ; rufsbs.bin (bin2db) file
				; 29/09/2019
				; Retro UNIX 386 v2 Boot Sector Image
				;include	rufsbs2.txt ; rufsbs2.bin (bin2db) file
				; 09/01/2020 (Boot Sector BugFix, bsDriveNumber segment bug)
				; 22/12/2019
				; Retro UNIX 386 v2 Boot Sector Image
				include		rufsbs3.txt ; rufsbs3.bin (bin2db) file
			      C ; C:\runix2\rufsbs3.bin (file size is 512 bytes)
			      C ; Retro UNIX 386 v2 boot sector for 1.44MB floppy disks
			      C ; 22/12/2019
			      C ; 09/01/2020 (BugFix)
			      C 
 1DCE  EB 18 52 55 46 53      C db 0EBh, 018h, 052h, 055h, 046h, 053h, 000h, 000h, 000h, 000h, 066h, 064h, 000h, 000h, 012h, 002h
       00 00 00 00 66 64
       00 00 12 02
 1DDE  50 00 00 00 40 00      C db 050h, 000h, 000h, 000h, 040h, 000h, 000h, 000h, 000h, 000h, 08Ch, 0C8h, 08Eh, 0D8h, 08Eh, 0C0h
       00 00 00 00 8C C8
       8E D8 8E C0
 1DEE  FA 8E D0 BC FE FF      C db 0FAh, 08Eh, 0D0h, 0BCh, 0FEh, 0FFh, 0FBh, 039h, 006h, 012h, 07Ch, 077h, 00Ch, 0BEh, 099h, 07Dh
       FB 39 06 12 7C 77
       0C BE 99 7D
 1DFE  E8 41 01 33 C0 CD      C db 0E8h, 041h, 001h, 033h, 0C0h, 0CDh, 016h, 0CDh, 019h, 088h, 016h, 00Ch, 07Ch, 0A1h, 012h, 07Ch
       16 CD 19 88 16 0C
       7C A1 12 7C
 1E0E  83 C0 1F 50 D1 E8      C db 083h, 0C0h, 01Fh, 050h, 0D1h, 0E8h, 0D1h, 0E8h, 0D1h, 0E8h, 0BBh, 000h, 009h, 0E8h, 0F5h, 000h
       D1 E8 D1 E8 BB 00
       09 E8 F5 00
 1E1E  58 72 5C 24 07 B1      C db 058h, 072h, 05Ch, 024h, 007h, 0B1h, 040h, 0F6h, 0E1h, 08Bh, 0F3h, 003h, 0F0h, 0BFh, 000h, 006h
       40 F6 E1 8B F3 03
       F0 BF 00 06
 1E2E  F3 A4 BB 00 06 8B      C db 0F3h, 0A4h, 0BBh, 000h, 006h, 08Bh, 007h, 025h, 040h, 0E0h, 03Dh, 040h, 080h, 075h, 040h, 0BBh
       07 25 40 E0 3D 40
       80 75 40 BB
 1E3E  08 06 8B 07 8B 57      C db 008h, 006h, 08Bh, 007h, 08Bh, 057h, 002h, 023h, 0C0h, 074h, 034h, 00Bh, 0D2h, 075h, 030h, 02Bh
       02 23 C0 74 34 0B
       D2 75 30 2B
 1E4E  06 BA 7D 77 03 E9      C db 006h, 0BAh, 07Dh, 077h, 003h, 0E9h, 09Dh, 000h, 03Bh, 006h, 0BCh, 07Dh, 073h, 003h, 0A3h, 0BCh
       9D 00 3B 06 BC 7D
       73 03 A3 BC
 1E5E  7D 8A 1E BB 7D 32      C db 07Dh, 08Ah, 01Eh, 0BBh, 07Dh, 032h, 0FFh, 0BEh, 001h, 006h, 0F6h, 004h, 010h, 075h, 013h, 080h
       FF BE 01 06 F6 04
       10 75 13 80
 1E6E  FB 14 73 0E 80 E3      C db 0FBh, 014h, 073h, 00Eh, 080h, 0E3h, 01Eh, 0D0h, 0E3h, 08Bh, 087h, 00Ch, 006h, 0EBh, 02Ah, 0E9h
       1E D0 E3 8B 87 0C
       06 EB 2A E9
 1E7E  8B 00 80 E3 FE D1      C db 08Bh, 000h, 080h, 0E3h, 0FEh, 0D1h, 0E3h, 08Bh, 0FBh, 0BBh, 000h, 009h, 080h, 03Eh, 0B7h, 07Dh
       E3 8B FB BB 00 09
       80 3E B7 7D
 1E8E  00 77 12 BE 0C 06      C db 000h, 077h, 012h, 0BEh, 00Ch, 006h, 08Bh, 004h, 00Bh, 0C0h, 074h, 071h, 0E8h, 076h, 000h, 072h
       8B 04 0B C0 74 71
       E8 76 00 72
 1E9E  6C FE 06 B7 7D 03      C db 06Ch, 0FEh, 006h, 0B7h, 07Dh, 003h, 0DFh, 08Bh, 007h, 00Bh, 0C0h, 074h, 060h, 0BBh, 000h, 007h
       DF 8B 07 0B C0 74
       60 BB 00 07
 1EAE  E8 62 00 72 58 8B      C db 0E8h, 062h, 000h, 072h, 058h, 08Bh, 036h, 0BAh, 07Dh, 08Bh, 0CEh, 081h, 0C9h, 000h, 0FEh, 081h
       36 BA 7D 8B CE 81
       C9 00 FE 81
 1EBE  E6 FF 01 03 F3 8B      C db 0E6h, 0FFh, 001h, 003h, 0F3h, 08Bh, 03Eh, 0B8h, 07Dh, 0F7h, 0D9h, 03Bh, 00Eh, 0BCh, 07Dh, 076h
       3E B8 7D F7 D9 3B
       0E BC 7D 76
 1ECE  04 8B 0E BC 7D 01      C db 004h, 08Bh, 00Eh, 0BCh, 07Dh, 001h, 00Eh, 0BEh, 07Dh, 029h, 00Eh, 0BCh, 07Dh, 001h, 00Eh, 0B8h
       0E BE 7D 29 0E BC
       7D 01 0E B8
 1EDE  7D 01 0E BA 7D F3      C db 07Dh, 001h, 00Eh, 0BAh, 07Dh, 0F3h, 0A4h, 039h, 00Eh, 0BCh, 07Dh, 076h, 008h, 0BBh, 008h, 006h
       A4 39 0E BC 7D 76
       08 BB 08 06
 1EEE  8B 07 E9 5A FF BE      C db 08Bh, 007h, 0E9h, 05Ah, 0FFh, 0BEh, 096h, 07Dh, 0E8h, 049h, 000h, 08Ah, 016h, 00Ch, 07Ch, 0B8h
       96 7D E8 49 00 8A
       16 0C 7C B8
 1EFE  00 08 8E D8 8E C0      C db 000h, 008h, 08Eh, 0D8h, 08Eh, 0C0h, 0FAh, 08Eh, 0D0h, 0FBh, 006h, 051h, 0CBh, 0BEh, 084h, 07Dh
       FA 8E D0 FB 06 51
       CB BE 84 7D
 1F0E  E8 31 00 EB FE 32      C db 0E8h, 031h, 000h, 0EBh, 0FEh, 032h, 0EDh, 0B1h, 004h, 051h, 0BAh, 012h, 000h, 0F6h, 0F2h, 08Ah
       ED B1 04 51 BA 12
       00 F6 F2 8A
 1F1E  CC FE C1 D0 E8 80      C db 0CCh, 0FEh, 0C1h, 0D0h, 0E8h, 080h, 0D6h, 000h, 08Ah, 016h, 00Ch, 07Ch, 08Ah, 0E8h, 0B4h, 002h
       D6 00 8A 16 0C 7C
       8A E8 B4 02
 1F2E  B0 01 CD 13 59 73      C db 0B0h, 001h, 0CDh, 013h, 059h, 073h, 00Ch, 0FEh, 0C9h, 074h, 008h, 050h, 032h, 0E4h, 0CDh, 013h
       0C FE C9 74 08 50
       32 E4 CD 13
 1F3E  58 EB D6 C3 BB 07      C db 058h, 0EBh, 0D6h, 0C3h, 0BBh, 007h, 000h, 0B4h, 00Eh, 0ACh, 022h, 0C0h, 074h, 004h, 0CDh, 010h
       00 B4 0E AC 22 C0
       74 04 CD 10
 1F4E  EB F7 C3 00 07 52      C db 0EBh, 0F7h, 0C3h, 000h, 007h, 052h, 055h, 04Eh, 049h, 058h, 020h, 062h, 06Fh, 06Fh, 074h, 020h
       55 4E 49 58 20 62
       6F 6F 74 20
 1F5E  65 72 72 6F 72 21      C db 065h, 072h, 072h, 06Fh, 072h, 021h, 00Dh, 00Ah, 000h, 007h, 04Eh, 06Fh, 074h, 020h, 061h, 020h
       0D 0A 00 07 4E 6F
       74 20 61 20
 1F6E  62 6F 6F 74 61 62      C db 062h, 06Fh, 06Fh, 074h, 061h, 062h, 06Ch, 065h, 020h, 066h, 06Ch, 06Fh, 070h, 070h, 079h, 020h
       6C 65 20 66 6C 6F
       70 70 79 20
 1F7E  64 69 73 6B 21 0D      C db 064h, 069h, 073h, 06Bh, 021h, 00Dh, 00Ah, 000h, 000h, 080h, 000h, 000h, 0C0h, 07Fh, 000h, 000h
       0A 00 00 80 00 00
       C0 7F 00 00
 1F8E  72 75 6E 69 78 20      C db 072h, 075h, 06Eh, 069h, 078h, 020h, 076h, 032h, 000h, 0E3h, 007h, 000h, 00Ch, 000h, 016h, 000h
       76 32 00 E3 07 00
       0C 00 16 00
 1F9E  00 00 00 00 00 00      C db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
       00 00 00 00 00 00
       00 00 00 00
 1FAE  00 00 00 00 00 00      C db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
       00 00 00 00 00 00
       00 00 00 00
 1FBE  00 00 00 00 00 00      C db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 055h, 0AAh
       00 00 00 00 00 00
       00 00 55 AA
			      C 
			      C 

				; 05/09/2019

 1FCE  000D [			img_file_name:  db 13 dup(0)
        00
       ]
 1FDB  00				        db 0
 1FDC				img_file_handle:
 1FDC  0000					dw 0
 1FDE 00			new_file:	db 0

 1FDF				msg_inv_file_name: ; 07/07/2015
 1FDF  0D 0A					db 0Dh, 0Ah
 1FE1  49 6E 76 61 6C 69			db "Invalid file name !", 0Dh, 0Ah
       64 20 66 69 6C 65
       20 6E 61 6D 65 20
       21 0D 0A
 1FF6  28 46 69 6C 65 20			db "(File name must fit for 8.3 DOS format) !"
       6E 61 6D 65 20 6D
       75 73 74 20 66 69
       74 20 66 6F 72 20
       38 2E 33 20 44 4F
       53 20 66 6F 72 6D
       61 74 29 20 21
 201F  0D 0A 00					db 0Dh, 0Ah, 0  

 2022				msg_inv_image_file: ; 07/07/2015
 2022  0D 0A					db 0Dh, 0Ah
 2024  49 6E 76 61 6C 69			db "Invalid floppy disk image file !", 0Dh, 0Ah
       64 20 66 6C 6F 70
       70 79 20 64 69 73
       6B 20 69 6D 61 67
       65 20 66 69 6C 65
       20 21 0D 0A
 2046  28 46 69 6C 65 20			db "(File size must be 1474560 bytes) !"
       73 69 7A 65 20 6D
       75 73 74 20 62 65
       20 31 34 37 34 35
       36 30 20 62 79 74
       65 73 29 20 21
 2069  0D 0A 00					db 0Dh, 0Ah, 0

 206C				msg_init_img_file:
 206C  0D 0A					db 0Dh, 0Ah
 206E  49 6E 69 74 69 61			db "Initializing disk image file sectors...", 0
       6C 69 7A 69 6E 67
       20 64 69 73 6B 20
       69 6D 61 67 65 20
       66 69 6C 65 20 73
       65 63 74 6F 72 73
       2E 2E 2E 00

 2096 = 00012032		SizeOfFile      equ $-100

 2096				RUFS_INSTL      ends

						end  INSTALL
Microsoft (R) Macro Assembler Version 6.14.8444		    04/13/22 15:00:53
unixfdfs.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

SuperBlock . . . . . . . . . . .	 0200
  sb_Header  . . . . . . . . . .	 0000	     DWord
  sb_BootSectAddr  . . . . . . .	 0004	     DWord
  sb_VolumeSize  . . . . . . . .	 0008	     DWord
  sb_Version . . . . . . . . . .	 000C	     DWord
  sb_BlockSize . . . . . . . . .	 0010	     DWord
  sb_InodeCount  . . . . . . . .	 0014	     DWord
  sb_FreeMapAddr . . . . . . . .	 0018	     DWord
  sb_FreeMapSize . . . . . . . .	 001C	     DWord
  sb_InodeMapAddr  . . . . . . .	 0020	     DWord
  sb_InodeMapSize  . . . . . . .	 0024	     DWord
  sb_InodeTblAddr  . . . . . . .	 0028	     DWord
  sb_InodeTblSize  . . . . . . .	 002C	     DWord
  sb_FreeInodes  . . . . . . . .	 0030	     DWord
  sb_FirstFreeIno  . . . . . . .	 0034	     DWord
  sb_FreeBlocks  . . . . . . . .	 0038	     DWord
  sb_FirstFreeBlk  . . . . . . .	 003C	     DWord
  sb_BootSecParms  . . . . . . .	 0040	     Byte
  sb_BSExtension . . . . . . . .	 0053	     Byte
  sb_Status  . . . . . . . . . .	 0058	     DWord
  sb_ModifTime . . . . . . . . .	 005C	     DWord
  sb_ExtdVolTbl  . . . . . . . .	 0060	     DWord
  sb_ExtdVolSize . . . . . . . .	 0064	     DWord
  sb_LBA_rw  . . . . . . . . . .	 0068	     Byte
  sb_ClusterSize . . . . . . . .	 0069	     Byte
  sb_ReadOnly  . . . . . . . . .	 006A	     Byte
  sb_Mounted . . . . . . . . . .	 006B	     Byte
  sb_MountInode  . . . . . . . .	 006C	     DWord
  sb_DevMajor  . . . . . . . . .	 0070	     Byte
  sb_DevMinor  . . . . . . . . .	 0071	     Byte
  sb_LongName  . . . . . . . . .	 0072	     Byte
  sb_Direntry32  . . . . . . . .	 0073	     Byte
  sb_Reserved  . . . . . . . . .	 0074	     Byte
  sb_Footer  . . . . . . . . . .	 01FC	     DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

RUFS_INSTL . . . . . . . . . . .	16 Bit	 2096	  Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

PRINT_MSG  . . . . . . . . . . .	P Near	 034E	  RUFS_INSTL	Length= 000F Private
alloc  . . . . . . . . . . . . .	P Near	 1929	  RUFS_INSTL	Length= 0031 Private
check_invalid_filename_chars . .	P Near	 0373	  RUFS_INSTL	Length= 0030 Private
clear  . . . . . . . . . . . . .	P Near	 1977	  RUFS_INSTL	Length= 0027 Private
dskrd  . . . . . . . . . . . . .	P Near	 16DE	  RUFS_INSTL	Length= 001E Private
dskwr  . . . . . . . . . . . . .	P Near	 16FC	  RUFS_INSTL	Length= 0005 Private
dskw . . . . . . . . . . . . . .	P Near	 17E9	  RUFS_INSTL	Length= 0082 Private
epoch  . . . . . . . . . . . . .	P Near	 19D1	  RUFS_INSTL	Length= 00F3 Private
fd_rw_sector . . . . . . . . . .	P Near	 1712	  RUFS_INSTL	Length= 0049 Private
free_3 . . . . . . . . . . . . .	P Near	 195A	  RUFS_INSTL	Length= 001D Private
icalc  . . . . . . . . . . . . .	P Near	 16A5	  RUFS_INSTL	Length= 0039 Private
iget . . . . . . . . . . . . . .	P Near	 1670	  RUFS_INSTL	Length= 0035 Private
image_file_rw  . . . . . . . . .	P Near	 175B	  RUFS_INSTL	Length= 0039 Private
imap . . . . . . . . . . . . . .	P Near	 17C4	  RUFS_INSTL	Length= 001A Private
mget . . . . . . . . . . . . . .	P Near	 186B	  RUFS_INSTL	Length= 00BE Private
poke . . . . . . . . . . . . . .	P Near	 1701	  RUFS_INSTL	Length= 0011 Private
proc_hex . . . . . . . . . . . .	P Near	 035D	  RUFS_INSTL	Length= 0016 Private
proc_mul32 . . . . . . . . . . .	P Near	 1AC4	  RUFS_INSTL	Length= 0014 Private
rufs_fd_format . . . . . . . . .	P Near	 0000	  RUFS_INSTL	Length= 034E Private
setimod  . . . . . . . . . . . .	P Near	 1794	  RUFS_INSTL	Length= 0030 Private
sioreg . . . . . . . . . . . . .	P Near	 199E	  RUFS_INSTL	Length= 0033 Private
sync . . . . . . . . . . . . . .	P Near	 0509	  RUFS_INSTL	Length= 0066 Private
unix_fs_install  . . . . . . . .	P Near	 03C6	  RUFS_INSTL	Length= 0143 Private
writei . . . . . . . . . . . . .	P Near	 17DE	  RUFS_INSTL	Length= 000B Private


Symbols:

                N a m e                 Type     Value    Attr

BLOCKDEV . . . . . . . . . . . .	Number	 61FFh	 
Buffer . . . . . . . . . . . . .	L Near	 1270	  RUFS_INSTL	
CHARDEV  . . . . . . . . . . . .	Number	 21FFh	 
CRLF . . . . . . . . . . . . . .	L Near	 03C3	  RUFS_INSTL	
Cursor_Pos . . . . . . . . . . .	L Near	 1D18	  RUFS_INSTL	
DISK_SIZE  . . . . . . . . . . .	Number	 0B40h	 
DMonth . . . . . . . . . . . . .	L Near	 1AE4	  RUFS_INSTL	
DTA_Attrib . . . . . . . . . . .	Number	 0095h	 
DTA_Date . . . . . . . . . . . .	Number	 0098h	 
DTA_FileName . . . . . . . . . .	Number	 009Eh	 
DTA_FileSize . . . . . . . . . .	Number	 009Ah	 
DTA_Time . . . . . . . . . . . .	Number	 0096h	 
Error  . . . . . . . . . . . . .	L Near	 1AFD	  RUFS_INSTL	
INODE_COUNT  . . . . . . . . . .	Number	 0100h	 
INODE_LIST_BLOCKS  . . . . . . .	Number	 0020h	 
INSTALL  . . . . . . . . . . . .	L Near	 0100	  RUFS_INSTL	
Msg_DoYouWantToFormat  . . . . .	L Near	 1C68	  RUFS_INSTL	
Msg_Installing_File_System . . .	L Near	 1CC8	  RUFS_INSTL	
Msg_OK . . . . . . . . . . . . .	L Near	 1D2A	  RUFS_INSTL	
Msg_Volume_Name  . . . . . . . .	L Near	 1D1A	  RUFS_INSTL	
Msg_Writing_Boot_Sector  . . . .	L Near	 1CF1	  RUFS_INSTL	
PRINT_MSG_LOOP . . . . . . . . .	L Near	 0353	  RUFS_INSTL	
PRINT_MSG_OK . . . . . . . . . .	L Near	 035C	  RUFS_INSTL	
REGULARDEF . . . . . . . . . . .	Number	 81FFh	 
RUFS_DRIVE . . . . . . . . . . .	L Near	 1CBA	  RUFS_INSTL	
RetryCount . . . . . . . . . . .	L Near	 1D6F	  RUFS_INSTL	
SIZE_FREE_MAP  . . . . . . . . .	Number	 0168h	 
SIZE_INODE_MAP . . . . . . . . .	Number	 0020h	 
SizeOfFile . . . . . . . . . . .	Number	 00012032h   
UNIX_CRLF  . . . . . . . . . . .	L Near	 1D6C	  RUFS_INSTL	
UNIX_Welcome . . . . . . . . . .	L Near	 1B09	  RUFS_INSTL	
alloc_1  . . . . . . . . . . . .	L Near	 192C	  RUFS_INSTL	
alloc_2  . . . . . . . . . . . .	L Near	 1934	  RUFS_INSTL	
alloc_3  . . . . . . . . . . . .	L Near	 1948	  RUFS_INSTL	
alloc_4  . . . . . . . . . . . .	L Near	 194F	  RUFS_INSTL	
alloc_5  . . . . . . . . . . . .	L Near	 1952	  RUFS_INSTL	
alloc_6  . . . . . . . . . . . .	L Near	 1956	  RUFS_INSTL	
alloc_7  . . . . . . . . . . . .	L Near	 1956	  RUFS_INSTL	
bin_dir  . . . . . . . . . . . .	L Near	 0970	  RUFS_INSTL	
bin_inode  . . . . . . . . . . .	L Near	 0AE8	  RUFS_INSTL	
boot_sector  . . . . . . . . . .	L Near	 1DCE	  RUFS_INSTL	
bsDriveNumber  . . . . . . . . .	Number	 000Ch	 
bsFSystemID  . . . . . . . . . .	Number	 0002h	 
bsHeads  . . . . . . . . . . . .	Number	 000Fh	 
bsHiddenSects  . . . . . . . . .	Number	 0016h	 
bsMagic  . . . . . . . . . . . .	Number	 0014h	 
bsPartitionID  . . . . . . . . .	Number	 0015h	 
bsReserved . . . . . . . . . . .	Number	 000Dh	 
bsSecPerTrack  . . . . . . . . .	Number	 000Eh	 
bsTracks . . . . . . . . . . . .	Number	 0010h	 
bsVolumeSerial . . . . . . . . .	Number	 0006h	 
bs_BF_I_number . . . . . . . . .	Number	 0012h	 
buff_c . . . . . . . . . . . . .	L Near	 0578	  RUFS_INSTL	
buff_d . . . . . . . . . . . . .	L Near	 0571	  RUFS_INSTL	
buff_m . . . . . . . . . . . . .	L Near	 0576	  RUFS_INSTL	
buff_o . . . . . . . . . . . . .	L Near	 0572	  RUFS_INSTL	
buff_s . . . . . . . . . . . . .	L Near	 0574	  RUFS_INSTL	
buff_w . . . . . . . . . . . . .	L Near	 0577	  RUFS_INSTL	
calc_free_blocks . . . . . . . .	L Near	 051E	  RUFS_INSTL	
cap_file_name0 . . . . . . . . .	L Near	 026F	  RUFS_INSTL	
cap_file_name1 . . . . . . . . .	L Near	 027E	  RUFS_INSTL	
cap_file_name2 . . . . . . . . .	L Near	 0281	  RUFS_INSTL	
cap_file_name3 . . . . . . . . .	L Near	 028A	  RUFS_INSTL	
cap_file_name4 . . . . . . . . .	L Near	 02A7	  RUFS_INSTL	
cap_file_name  . . . . . . . . .	L Near	 0268	  RUFS_INSTL	
check_fdi_opt_loop . . . . . . .	L Near	 01C6	  RUFS_INSTL	
check_fdi_option . . . . . . . .	L Near	 01B4	  RUFS_INSTL	
check_file_name_chars  . . . . .	L Near	 01F3	  RUFS_INSTL	
check_filename_next_char . . . .	L Near	 0378	  RUFS_INSTL	
chk_image_file_features  . . . .	L Near	 032E	  RUFS_INSTL	
close_file_then_terminate  . . .	L Near	 022F	  RUFS_INSTL	
close_img_file . . . . . . . . .	L Near	 0237	  RUFS_INSTL	
clr_ok . . . . . . . . . . . . .	L Near	 1992	  RUFS_INSTL	
com1_inode . . . . . . . . . . .	L Near	 1068	  RUFS_INSTL	
com2_inode . . . . . . . . . . .	L Near	 10A8	  RUFS_INSTL	
convert_to_epoch . . . . . . . .	L Near	 1A42	  RUFS_INSTL	
create_image_file  . . . . . . .	L Near	 02C0	  RUFS_INSTL	
day  . . . . . . . . . . . . . .	L Near	 1ADC	  RUFS_INSTL	
dev_dir  . . . . . . . . . . . .	L Near	 0800	  RUFS_INSTL	
dev_inode  . . . . . . . . . . .	L Near	 0AA8	  RUFS_INSTL	
dirs . . . . . . . . . . . . . .	L Near	 0780	  RUFS_INSTL	
dotodot  . . . . . . . . . . . .	L Near	 1B03	  RUFS_INSTL	
drive_check_ok . . . . . . . . .	L Near	 03B4	  RUFS_INSTL	
drive_check  . . . . . . . . . .	L Near	 03A3	  RUFS_INSTL	
drive_not_ready  . . . . . . . .	L Near	 03AA	  RUFS_INSTL	
dskrd_1  . . . . . . . . . . . .	L Near	 16E4	  RUFS_INSTL	
dskrd_3  . . . . . . . . . . . .	L Near	 16F0	  RUFS_INSTL	
dskrd_4  . . . . . . . . . . . .	L Near	 16FB	  RUFS_INSTL	
dskw_0 . . . . . . . . . . . . .	L Near	 17E9	  RUFS_INSTL	
dskw_1 . . . . . . . . . . . . .	L Near	 181B	  RUFS_INSTL	
dskw_2 . . . . . . . . . . . . .	L Near	 1834	  RUFS_INSTL	
dskw_3 . . . . . . . . . . . . .	L Near	 183B	  RUFS_INSTL	
dskw_4 . . . . . . . . . . . . .	L Near	 183E	  RUFS_INSTL	
dskw_5 . . . . . . . . . . . . .	L Near	 1856	  RUFS_INSTL	
dskw_6 . . . . . . . . . . . . .	L Near	 185A	  RUFS_INSTL	
dskw_7 . . . . . . . . . . . . .	L Near	 1801	  RUFS_INSTL	
dskw_8 . . . . . . . . . . . . .	L Near	 1804	  RUFS_INSTL	
err_INVALIDDATA  . . . . . . . .	Number	 0100h	 
err_NOFREEBLOCK  . . . . . . . .	Number	 0200h	 
etc_dir  . . . . . . . . . . . .	L Near	 0990	  RUFS_INSTL	
etc_inode  . . . . . . . . . . .	L Near	 0B28	  RUFS_INSTL	
fbm_buffer . . . . . . . . . . .	L Near	 1470	  RUFS_INSTL	
fd0_inode  . . . . . . . . . . .	L Near	 0CA8	  RUFS_INSTL	
fd1_inode  . . . . . . . . . . .	L Near	 0CE8	  RUFS_INSTL	
fd_rw_sector_1 . . . . . . . . .	L Near	 1725	  RUFS_INSTL	
fd_rw_sector_2 . . . . . . . . .	L Near	 1756	  RUFS_INSTL	
file_error_msg . . . . . . . . .	L Near	 03B5	  RUFS_INSTL	
file_error . . . . . . . . . . .	L Near	 02A2	  RUFS_INSTL	
find_image_file  . . . . . . . .	L Near	 02AC	  RUFS_INSTL	
free_4 . . . . . . . . . . . . .	L Near	 1970	  RUFS_INSTL	
get_args . . . . . . . . . . . .	L Near	 011F	  RUFS_INSTL	
get_fdi_name_nxt_chr . . . . . .	L Near	 01DE	  RUFS_INSTL	
get_fdi_name_ok  . . . . . . . .	L Near	 01F0	  RUFS_INSTL	
get_fdi_name . . . . . . . . . .	L Near	 01DB	  RUFS_INSTL	
hd0_inode  . . . . . . . . . . .	L Near	 0D28	  RUFS_INSTL	
hd1_inode  . . . . . . . . . . .	L Near	 0D68	  RUFS_INSTL	
hd2_inode  . . . . . . . . . . .	L Near	 0DA8	  RUFS_INSTL	
hd3_inode  . . . . . . . . . . .	L Near	 0DE8	  RUFS_INSTL	
hour . . . . . . . . . . . . . .	L Near	 1ADE	  RUFS_INSTL	
i_ctim . . . . . . . . . . . . .	L Near	 0A56	  RUFS_INSTL	
i_dir_sizes  . . . . . . . . . .	L Near	 0A5A	  RUFS_INSTL	
i_dskp . . . . . . . . . . . . .	L Near	 0A26	  RUFS_INSTL	
i_flgs . . . . . . . . . . . . .	L Near	 0A1A	  RUFS_INSTL	
i_gid  . . . . . . . . . . . . .	L Near	 0A20	  RUFS_INSTL	
i_ltim . . . . . . . . . . . . .	L Near	 0A4E	  RUFS_INSTL	
i_mtim . . . . . . . . . . . . .	L Near	 0A52	  RUFS_INSTL	
i_nlks . . . . . . . . . . . . .	L Near	 0A1C	  RUFS_INSTL	
i_size_h . . . . . . . . . . . .	L Near	 0A21	  RUFS_INSTL	
i_size . . . . . . . . . . . . .	L Near	 0A22	  RUFS_INSTL	
i_uid  . . . . . . . . . . . . .	L Near	 0A1E	  RUFS_INSTL	
icalc_1  . . . . . . . . . . . .	L Near	 16B5	  RUFS_INSTL	
icalc_2  . . . . . . . . . . . .	L Near	 16D0	  RUFS_INSTL	
icalc_3  . . . . . . . . . . . .	L Near	 16D7	  RUFS_INSTL	
icalc_4  . . . . . . . . . . . .	L Near	 16DB	  RUFS_INSTL	
icalc_5  . . . . . . . . . . . .	L Near	 16DD	  RUFS_INSTL	
idata  . . . . . . . . . . . . .	L Near	 0A68	  RUFS_INSTL	
iget_1 . . . . . . . . . . . . .	L Near	 1676	  RUFS_INSTL	
iget_2 . . . . . . . . . . . . .	L Near	 1694	  RUFS_INSTL	
iget_3 . . . . . . . . . . . . .	L Near	 169F	  RUFS_INSTL	
iget_4 . . . . . . . . . . . . .	L Near	 16A3	  RUFS_INSTL	
iget_5 . . . . . . . . . . . . .	L Near	 16A4	  RUFS_INSTL	
ii . . . . . . . . . . . . . . .	L Near	 1B01	  RUFS_INSTL	
im_buffer  . . . . . . . . . . .	L Near	 1270	  RUFS_INSTL	
image_file_rw_err  . . . . . . .	L Near	 178D	  RUFS_INSTL	
img_file_handle  . . . . . . . .	L Near	 1FDC	  RUFS_INSTL	
img_file_name  . . . . . . . . .	L Near	 1FCE	  RUFS_INSTL	
imod . . . . . . . . . . . . . .	L Near	 1B00	  RUFS_INSTL	
infinive_loop  . . . . . . . . .	L Near	 01B2	  RUFS_INSTL	
inodes . . . . . . . . . . . . .	L Near	 0A68	  RUFS_INSTL	
inode  . . . . . . . . . . . . .	L Near	 0A1A	  RUFS_INSTL	
invalid_file_name  . . . . . . .	L Near	 023E	  RUFS_INSTL	
invalid_fname_chars  . . . . . .	L Near	 038F	  RUFS_INSTL	
invalid_image_file . . . . . . .	L Near	 0348	  RUFS_INSTL	
loc_check_invalid_filename_retn 	L Near	 038C	  RUFS_INSTL	
loc_invalid_filename . . . . . .	L Near	 038D	  RUFS_INSTL	
loop_scan_invalid_filename_char 	L Near	 037E	  RUFS_INSTL	
lpr_inode  . . . . . . . . . . .	L Near	 0E28	  RUFS_INSTL	
mem_inode  . . . . . . . . . . .	L Near	 0C68	  RUFS_INSTL	
mget_0 . . . . . . . . . . . . .	L Near	 186B	  RUFS_INSTL	
mget_1 . . . . . . . . . . . . .	L Near	 18A2	  RUFS_INSTL	
mget_2 . . . . . . . . . . . . .	L Near	 18A3	  RUFS_INSTL	
mget_3 . . . . . . . . . . . . .	L Near	 18BA	  RUFS_INSTL	
mget_4 . . . . . . . . . . . . .	L Near	 18C3	  RUFS_INSTL	
mget_5 . . . . . . . . . . . . .	L Near	 18E7	  RUFS_INSTL	
mget_6 . . . . . . . . . . . . .	L Near	 1902	  RUFS_INSTL	
mget_7 . . . . . . . . . . . . .	L Near	 1928	  RUFS_INSTL	
mget_8 . . . . . . . . . . . . .	L Near	 18E0	  RUFS_INSTL	
mget_9 . . . . . . . . . . . . .	L Near	 18DF	  RUFS_INSTL	
minute . . . . . . . . . . . . .	L Near	 1AE0	  RUFS_INSTL	
mnt_dir  . . . . . . . . . . . .	L Near	 09F0	  RUFS_INSTL	
mnt_inode  . . . . . . . . . . .	L Near	 0BE8	  RUFS_INSTL	
month  . . . . . . . . . . . . .	L Near	 1ADA	  RUFS_INSTL	
msg_NO . . . . . . . . . . . . .	L Near	 1D34	  RUFS_INSTL	
msg_YES  . . . . . . . . . . . .	L Near	 1D2F	  RUFS_INSTL	
msg_disk_rw_error  . . . . . . .	L Near	 1D38	  RUFS_INSTL	
msg_drive_not_ready  . . . . . .	L Near	 1D4A	  RUFS_INSTL	
msg_error_Number . . . . . . . .	L Near	 1D5D	  RUFS_INSTL	
msg_init_img_file  . . . . . . .	L Near	 206C	  RUFS_INSTL	
msg_inv_file_name  . . . . . . .	L Near	 1FDF	  RUFS_INSTL	
msg_inv_image_file . . . . . . .	L Near	 2022	  RUFS_INSTL	
new_file . . . . . . . . . . . .	L Near	 1FDE	  RUFS_INSTL	
open_image_file  . . . . . . . .	L Near	 02D4	  RUFS_INSTL	
pass_cc_ah . . . . . . . . . . .	L Near	 0372	  RUFS_INSTL	
pass_cc_al . . . . . . . . . . .	L Near	 036A	  RUFS_INSTL	
poke_1 . . . . . . . . . . . . .	L Near	 1707	  RUFS_INSTL	
poke_2 . . . . . . . . . . . . .	L Near	 1711	  RUFS_INSTL	
root_dir . . . . . . . . . . . .	L Near	 0780	  RUFS_INSTL	
root_inode . . . . . . . . . . .	L Near	 0A68	  RUFS_INSTL	
rufs_fd_format_10  . . . . . . .	L Near	 01FA	  RUFS_INSTL	
rufs_fd_format_11  . . . . . . .	L Near	 0200	  RUFS_INSTL	
rufs_fd_format_12  . . . . . . .	L Near	 020C	  RUFS_INSTL	
rufs_fd_format_13  . . . . . . .	L Near	 021B	  RUFS_INSTL	
rufs_fd_format_14  . . . . . . .	L Near	 0243	  RUFS_INSTL	
rufs_fd_format_15  . . . . . . .	L Near	 0249	  RUFS_INSTL	
rufs_fd_format_16  . . . . . . .	L Near	 024F	  RUFS_INSTL	
rufs_fd_format_17  . . . . . . .	L Near	 0260	  RUFS_INSTL	
rufs_fd_format_1 . . . . . . . .	L Near	 012A	  RUFS_INSTL	
rufs_fd_format_2 . . . . . . . .	L Near	 0131	  RUFS_INSTL	
rufs_fd_format_3 . . . . . . . .	L Near	 014F	  RUFS_INSTL	
rufs_fd_format_4 . . . . . . . .	L Near	 016C	  RUFS_INSTL	
rufs_fd_format_5 . . . . . . . .	L Near	 0171	  RUFS_INSTL	
rufs_fd_format_6 . . . . . . . .	L Near	 018E	  RUFS_INSTL	
rufs_fd_format_7 . . . . . . . .	L Near	 01A4	  RUFS_INSTL	
rufs_fd_format_8 . . . . . . . .	L Near	 01AA	  RUFS_INSTL	
rufs_fd_format_9 . . . . . . . .	L Near	 01D3	  RUFS_INSTL	
sb_HiddenSects . . . . . . . . .	Text   	 sb_BootSecAddr
sb_TotalSects  . . . . . . . . .	Text   	 sb_VolumeSize
second . . . . . . . . . . . . .	L Near	 1AE2	  RUFS_INSTL	
sector_buffer  . . . . . . . . .	L Near	 1270	  RUFS_INSTL	
sizeInvFnChars . . . . . . . . .	Number	 0014h	 
size_bin_dir . . . . . . . . . .	Number	 0020h	 
size_dev_dir . . . . . . . . . .	Number	 0170h	 
size_etc_dir . . . . . . . . . .	Number	 0020h	 
size_mnt_dir . . . . . . . . . .	Number	 0020h	 
size_root_dir  . . . . . . . . .	Number	 0080h	 
size_tmp_dir . . . . . . . . . .	Number	 0020h	 
size_usr_dir . . . . . . . . . .	Number	 0020h	 
smod . . . . . . . . . . . . . .	L Near	 1AFF	  RUFS_INSTL	
str_err  . . . . . . . . . . . .	L Near	 1D69	  RUFS_INSTL	
str_volume_name  . . . . . . . .	L Near	 1D70	  RUFS_INSTL	
sync_1 . . . . . . . . . . . . .	L Near	 0558	  RUFS_INSTL	
sync_2 . . . . . . . . . . . . .	L Near	 056B	  RUFS_INSTL	
sync_3 . . . . . . . . . . . . .	L Near	 056E	  RUFS_INSTL	
sync_4 . . . . . . . . . . . . .	L Near	 0532	  RUFS_INSTL	
sync_5 . . . . . . . . . . . . .	L Near	 0537	  RUFS_INSTL	
sync_6 . . . . . . . . . . . . .	L Near	 0543	  RUFS_INSTL	
sync_7 . . . . . . . . . . . . .	L Near	 0544	  RUFS_INSTL	
sync_8 . . . . . . . . . . . . .	L Near	 054A	  RUFS_INSTL	
systm  . . . . . . . . . . . . .	L Near	 0580	  RUFS_INSTL	
terminate  . . . . . . . . . . .	L Near	 023B	  RUFS_INSTL	
tmp_dir  . . . . . . . . . . . .	L Near	 09D0	  RUFS_INSTL	
tmp_inode  . . . . . . . . . . .	L Near	 0BA8	  RUFS_INSTL	
tty0_inode . . . . . . . . . . .	L Near	 0E68	  RUFS_INSTL	
tty1_inode . . . . . . . . . . .	L Near	 0EA8	  RUFS_INSTL	
tty2_inode . . . . . . . . . . .	L Near	 0EE8	  RUFS_INSTL	
tty3_inode . . . . . . . . . . .	L Near	 0F28	  RUFS_INSTL	
tty4_inode . . . . . . . . . . .	L Near	 0F68	  RUFS_INSTL	
tty5_inode . . . . . . . . . . .	L Near	 0FA8	  RUFS_INSTL	
tty6_inode . . . . . . . . . . .	L Near	 0FE8	  RUFS_INSTL	
tty7_inode . . . . . . . . . . .	L Near	 1028	  RUFS_INSTL	
tty_inode  . . . . . . . . . . .	L Near	 0C28	  RUFS_INSTL	
u_base . . . . . . . . . . . . .	L Near	 0A14	  RUFS_INSTL	
u_count  . . . . . . . . . . . .	L Near	 0A12	  RUFS_INSTL	
u_fofp . . . . . . . . . . . . .	L Near	 0A16	  RUFS_INSTL	
u_nread  . . . . . . . . . . . .	L Near	 0A18	  RUFS_INSTL	
u_off  . . . . . . . . . . . . .	L Near	 0A10	  RUFS_INSTL	
uinstall_10  . . . . . . . . . .	L Near	 04A6	  RUFS_INSTL	
uinstall_12  . . . . . . . . . .	L Near	 044E	  RUFS_INSTL	
uinstall_13  . . . . . . . . . .	L Near	 0470	  RUFS_INSTL	
uinstall_14  . . . . . . . . . .	L Near	 0495	  RUFS_INSTL	
uinstall_1 . . . . . . . . . . .	L Near	 041B	  RUFS_INSTL	
uinstall_2 . . . . . . . . . . .	L Near	 0438	  RUFS_INSTL	
uinstall_3 . . . . . . . . . . .	L Near	 0439	  RUFS_INSTL	
uinstall_5 . . . . . . . . . . .	L Near	 048C	  RUFS_INSTL	
uinstall_6 . . . . . . . . . . .	L Near	 04A7	  RUFS_INSTL	
uinstall_7 . . . . . . . . . . .	L Near	 04CB	  RUFS_INSTL	
uinstall_8 . . . . . . . . . . .	L Near	 04EE	  RUFS_INSTL	
uinstall_9 . . . . . . . . . . .	L Near	 042C	  RUFS_INSTL	
unused_inodes  . . . . . . . . .	L Near	 10E8	  RUFS_INSTL	
usr_dir  . . . . . . . . . . . .	L Near	 09B0	  RUFS_INSTL	
usr_inode  . . . . . . . . . . .	L Near	 0B68	  RUFS_INSTL	
write_1  . . . . . . . . . . . .	L Near	 17E9	  RUFS_INSTL	
write_file_next_sector . . . . .	L Near	 0309	  RUFS_INSTL	
year . . . . . . . . . . . . . .	L Near	 1AD8	  RUFS_INSTL	

	   0 Warnings
	   0 Errors

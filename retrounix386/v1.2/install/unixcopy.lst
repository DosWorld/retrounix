Microsoft (R) Macro Assembler Version 6.14.8444		    04/15/22 18:10:23
unixcopy.asm						     Page 1 - 1


				; UNIXCOPY.ASM (Only for 1.44 MB floppy disks)
				; ----------------------------------------------------------------------------
				; Retro UNIX 386 v2.0 - Modified UNIX v7 inode model - 10/09/2019
				; Retro UNIX Operating System Project - Kernel v0.3 by ERDOGAN TAN 
				; ----------------------------------------------------------------------------
				; Retro UNIX 386 v1.1 - 14 byte file names (04/12/2015)
				;
				; RETRO UNIX 8086 (Retro Unix == Turkish Rational Unix)
				; Operating System Project (v0.1) by ERDOGAN TAN (Beginning: 11/07/2012) 
				; 1.44 MB Floppy Disk 
				; Bootable Unix (RUFS) File System - DOS & UNIX FS file export/import Utility
				; (08/12/2012)
				;
				; [ Last Modification: 15/04/2022 ] (Previous: 12/12/2021)
				;
				; Derivation from UNIX Operating System (v1.0 for PDP-11) 
				; (Original) Source Code by Ken Thompson (1971-1972)
				; <Bell Laboratories (17/3/1972)>
				; <Preliminary Release of UNIX Implementation Document>
				;
				; ****************************************************************************
				; 15/04/2022 - mkdir/rmdir link count bugfix
				; 28/03/2022 - Improved First Free Inode & First Free Block calculation
				; 27/03/2022 - Free Inode Count bugfix
				; 23/03/2022 - First Free Inode bugfix
				; (UNIXCOPY.COM for Retro UNIX 386 v1.2 & v2 file system)

				; 12/12/2021
				; UNIXCOPY.COM source code (Microsoft Macro Assembler syntax)
				; c:\masm614\> masm unixcopy.asm unixcopy.obj unixcopy.lst
				; c:\masm614\> link /t unixcopy.obj

				; 21/12/2019 (UNIXCOPY.COM, UNIXCOPY.ASM)
				; 19/12/2019 (UNIXHDFS.COM, RUFSHDI.ASM)
				; 01/09/2019 - Retro UNIX 386 v2 SuperBlock

				; 14/01/2020 - SuperBlock modification :
				;	    - Extended sections/divisions (consequental sectors)
				;	    - (for swapping, configuration, boot space etc.)	

 0200				SuperBlock struc

 0000  00000000			sb_Header	dd ?
 0004  00000000			sb_BootSectAddr dd ?  ; Hidden Sectors
 0008  00000000			sb_VolumeSize	dd ?  ; Entire Volume/Partition Size (includes ext. volume)	
 000C  00000000			sb_Version	dd ?
 0010  00000000			sb_BlockSize	dd ?
 0014  00000000			sb_InodeCount	dd ? 	
 0018  00000000			sb_FreeMapAddr	dd ?
 001C  00000000			sb_FreeMapSize  dd ?
 0020  00000000			sb_InodeMapAddr	dd ?
 0024  00000000			sb_InodeMapSize dd ?
 0028  00000000			sb_InodeTblAddr dd ?
 002C  00000000			sb_InodeTblSize dd ?
 0030  00000000			sb_FreeInodes	dd ?
 0034  00000000			sb_FirstFreeIno dd ?
 0038  00000000			sb_FreeBlocks	dd ?
 003C  00000000			sb_FirstFreeBlk dd ?
 0040  0013 [			sb_BootSecParms db 19 dup(?) ; v1 ; 19/12/2019
        00
       ]
 0053  0005 [			sb_BSExtension	db 5 dup(?) ; v2 HDFS ; 19/12/2019
        00
       ]
 0058  00000000			sb_Status	dd ? ; 19/12/2019
 005C  00000000			sb_ModifTime	dd ?
 0060  00000000			sb_ExtdVolTbl	dd 0 ; 14/01/2020 ; Extended Volume Start/Table Address
 0064  00000000			sb_ExtdVolSize	dd 0 ; 14/01/2020 ; Extended Volume (swap section etc.) Size	
 0068  00			sb_LBA_rw	db 0 ; 03/10/2019
 0069  00			sb_ClusterSize	db 0 ; 03/10/2019
 006A  00			sb_ReadOnly	db 0 ; 03/10/2019
 006B  00			sb_Mounted	db 0 ; 03/10/2019
 006C  00000000			sb_MountInode	dd 0 ; 03/10/2019
 0070  00			sb_DevMajor	db 0 ; 03/10/2019
 0071  00			sb_DevMinor	db 0 ; 03/10/2019
 0072  00			sb_LongName	db 0 ; 03/10/2019
 0073  00			sb_Direntry32	db 0 ; 03/10/2019
 0074  0188 [			sb_Reserved	db 508-116 dup(?) ; Must be 0 for current RUFS version
        00
       ]
 01FC  00000000			sb_Footer	dd ?

				SuperBlock ends

				; 14/01/2020
 = sb_BootSecAddr		sb_HiddenSects equ sb_BootSecAddr
 = sb_VolumeSize		sb_TotalSects  equ sb_VolumeSize

				; 21/12/2019
				; 19/12/2019 - Retro UNIX 386 v2 HD (071h) partition boot sector 
				;	      (UNIXHDFS.ASM)
				; 04/12/2015 (14 byte file names - Retro UNIX 386 v1.1)
				; 14/07/2015 (8 byte file names - Retro UNIX 8086 v1 & Retro UNIX 386 v1.0)

 = 0002				bsFSystemID 	equ 2  ; db 'RUFS'	
 = 0006				bsVolumeSerial 	equ 6  ; dd 0 ; (4 bytes)
 = 000A				bsFDSign	equ 10 ; db 'fd'
 = 000C				bsDriveNumber 	equ 12 ; db 0 ; fd0 or fd1 (0 or 1)
 = 000D				bsReserved 	equ 13 ; db 0 ; (512 bytes per sector)	
 = 000E				bsSecPerTrack	equ 14 ; db 18 ; (9 or 15)	
 = 000F				bsHeads	equ 15 ; db  ; 2
 = 0010				bsTracks	equ 16 ; dw 80 ; bsCylinders
 = 0012				bs_bf_inode_num equ 18 ; dw 0 ; 0 or Boot/Startup File I-Number
 = 0014				bsInfoEndsign	equ 20 ; db '@'
				; 21/12/2019
 = 0014				bsMagic	equ 20 ; db '@'
 = 0015				bsPartitionID	equ 21 ; db 0 ; db 71h
 = 0016				bsHiddenSects	equ 22 ; dd 0 ; Hidden sectors (Boot Sector LBA)

				;ROOT_DIR_INODE_NUMBER equ 41
 = 0001				ROOT_DIR_INODE_NUMBER equ 1 ; Retro UNIX 386 v2 - 18/09/2019

				; DTA (PSP+80h= Offset 128)
 = 0095				DTA_Attrib   equ 149	; PDP+21 ;05/01/2013	
 = 0096				DTA_Time     equ 150	; PSP+22
 = 0098				DTA_Date     equ 152	; PSP 24
 = 009A				DTA_FileSize equ 154	; PSP + 26
 = 009E				DTA_FileName equ 158	; PSP + 30

				;err_INVALIDDATA equ 100h
				;err_NOFREEBLOCK equ 200h

				;;i_flags    equ 001Eh  ; Retro UNIX v1 (00011110b)
				;i_flags     equ 01EDh  ; Retro UNIX v2 (0000000111101101b)	

				; 12/12/2021

				.8086

 0000				UNIXCOPY  SEGMENT PUBLIC 'CODE'
					assume cs:UNIXCOPY,ds:UNIXCOPY,es:UNIXCOPY,ss:UNIXCOPY

					org 100h

 0100				START_CODE:

 0100				proc_start  proc near
					; 23/01/2020
					; 22/01/2020 - Retro UNIX 386 v2 
					; 08/12/2012 (UNIXCOPY)
					;
					; 30/11/2012 (UNIXBOOT)
					;
 0100  BB 4390 R			mov	bx, SizeOfFile+100
 0103  83 C3 0F				add	bx, 15
 0106  D1 EB				shr	bx, 1
 0108  D1 EB				shr	bx, 1
 010A  D1 EB				shr	bx, 1
 010C  D1 EB				shr	bx, 1
 010E  B4 4A				mov	ah, 4Ah ; modify memory allocation
					;push	cs
					;pop	es
 0110  CD 21				int	21h 
						   
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				; see if drive specified
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				              
 0112  BE 0080				mov	si, offset 80h	; PSP command tail
 0115  AC				lodsb
 0116  8A C8				mov	cl, al
 0118  0A C9				or	cl, cl
 011A  75 05				jnz	short loc_get_args
 011C  FE C9				dec	cl
 011E				loc_no_valid_args:
 011E  E9 0175				jmp	loc_unix_welcome          
 0121				loc_get_args:
 0121  AC				lodsb
 0122  3C 20				cmp	al, ' '	      
 0124  75 02				jne	short loc_check_img_option ; 23/01/2020

					;dec	cl		   
					;jz	short loc_unix_welcome

 0126  EB F9				jmp	short loc_get_args

					; Check usage option
 0128				loc_check_img_option:
					; 23/01/2020
 0128  3C 2D				cmp	al, '-'
 012A  74 41				je	short check_fdi_option ; image file name

					; Check floppy disk drive name
 012C				loc_check_fd_name:
					; 23/01/2020
					; 07/07/2015
					;mov	di, offset img_file_name
 012C  3C 66				cmp	al, "f"
					;jne	short loc_chk_fname1       
 012E  75 1E				jne	short loc_chk_dos_fname
					;stosb
 0130  AC				lodsb
 0131  3C 64				cmp	al, "d"
					;jne	short loc_chk_fname1
 0133  75 E9				jne	short loc_no_valid_args
					;stosb
					;lodsb
 0135  AD				lodsw
 0136  3C 30				cmp	al, '0'
					;jb	short loc_chk_fname2	     
 0138  72 E4				jb	short loc_no_valid_args

 013A  3C 31				cmp	al, '1'
					;ja	short loc_chk_fname2  
 013C  77 E0				ja	short loc_no_valid_args
					;stosb
					;mov	dl, al
					;lodsb
					;cmp	al, 0Dh
					;ja	short loc_chk_fname2 
 013E  80 FC 20				cmp	ah, 20h
					;ja	short loc_chk_fname2  
 0141  77 DB				ja	short loc_no_valid_args
					
					;mov	byte ptr [UNIX_FD_Number], dl
					;sub	dl, '0'
					;mov	byte ptr [PhysicalDriveNumber], dl
 0143				@@:	
 0143  A2 241D R			mov	byte ptr [UNIX_FD_Number], al
 0146  2C 30				sub	al, '0'		; make it zero based  
 0148  A2 27DE R			mov	byte ptr [PhysicalDriveNumber], al
					
 014B  E9 00F6				jmp	load_boot_sector

 014E				loc_chk_dos_fname:
					; 23/01/2020
 014E  80 3C 3A				cmp	byte ptr [si], ':' ; A:, B:
 0151  75 CB				jne	short loc_no_valid_args
 0153  46				inc	si
 0154  80 3C 20				cmp	byte ptr [si],20h
 0157  77 C5				ja	short loc_no_valid_args

 0159  3C 41				cmp	al, 'A'
 015B  72 C1				jb	short loc_no_valid_args
 015D  3C 42				cmp	al, 'B'		; A - Z
 015F  76 E2				jna	short @b	    
 0161  3C 61				cmp	al, 'a'		; a - z 
 0163  72 B9				jb	short loc_no_valid_args	
 0165  3C 62				cmp	al, 'b'	    
 0167  77 B5				ja	short loc_no_valid_args	

 0169  2C 20				sub	al, 'a'-'A'	; to upper case
 016B  EB D6				jmp	short @b	; 23/01/2020

 016D				check_fdi_option:
 016D  AC				lodsb
 016E  3C 69				cmp	al, 'i'
 0170  75 AC				jne	short loc_no_valid_args
 0172  FE C9				dec	cl
 0174  74 A8				jz	short loc_no_valid_args
 0176  AC				lodsb
 0177  3C 20				cmp	al, ' '
 0179  75 A3				jne	short loc_no_valid_args
 017B  FE C9				dec	cl
 017D  74 9F				jz	short loc_no_valid_args
 017F				check_fdi_opt_loop:
 017F  AC				lodsb
 0180  3C 20				cmp	al, 20h
 0182  77 08				ja	short get_fdi_name
 0184  72 98				jb	short loc_no_valid_args
 0186  FE C9				dec	cl
 0188  74 94				jz	short loc_no_valid_args
 018A  EB F3				jmp	short check_fdi_opt_loop
 018C				get_fdi_name:
 018C  BF 274A R			mov di, offset img_file_name
 018F				get_fdi_name_nxt_chr:
 018F  AA				stosb
 0190  FE C9				dec	cl
 0192  74 11				jz	short get_fdi_name_ok	
 0194  AC				lodsb
 0195  3C 20				cmp	al, 20h
 0197  76 0C				jna	short get_fdi_name_ok	
 0199  81 FF 2756 R			cmp	di, offset img_file_name + 12	
 019D  72 F0				jb	short get_fdi_name_nxt_chr

					; 23/01/2020
 019F				loc_inv_fname:
 019F  BE 24CD R			mov	si, offset msg_inv_file_name
 01A2  E9 00FE				jmp	@f

				;loc_check_file_name:
				;	; 07/07/2015
				;	lodsb
				;loc_chk_fname1:
				;	cmp	al, 0Dh
				;	jna	short loc_chk_fname_ok
				;loc_chk_fname2:
				;	stosb	
				;	cmp	di, offset img_file_name + 12
				;	jb	short loc_check_file_name
				;	jne	short loc_inv_fname
				;loc_chk_fname_ok:

					; 23/01/2020
 01A5				get_fdi_name_ok:
 01A5  2A C0				sub	al, al
 01A7  AA				stosb

					;jmp	short cap_file_name 

					; 23/01/2020
 01A8				cap_file_name:
					; file name capitalization
 01A8  BE 274A R			mov	si, offset img_file_name
 01AB  8B FE				mov	di, si
 01AD  8B DE				mov	bx, si
 01AF				loc_cap_file_name0:
 01AF  AC				lodsb
 01B0  3C 61				cmp	al, 'a'
 01B2  73 0D				jnb	short loc_cap_file_name2
 01B4  22 C0				and	al, al
 01B6  74 12				jz	short loc_cap_file_name3
 01B8  3C 2E				cmp	al, '.'
 01BA  75 02				jne	short loc_cap_file_name1
 01BC  8B DF				mov	bx, di ; dot position	
 01BE				loc_cap_file_name1:
 01BE  AA				stosb
 01BF  EB EE				jmp	short loc_cap_file_name0 	
 01C1				loc_cap_file_name2:
 01C1  3C 7A				cmp	al, 'z'
 01C3  77 F9				ja	short loc_cap_file_name1
 01C5  24 DF				and	al, 0DFh ; NOT 32
 01C7  AA				stosb
 01C8  EB E5				jmp	short loc_cap_file_name0

 01CA				loc_cap_file_name3:
 01CA  88 05				mov	[di], al
 01CC  4F				dec	di
 01CD  3B DF				cmp	bx, di
 01CF  73 CE				jnb	short loc_inv_fname	
 01D1  2B FB				sub	di, bx
 01D3  81 EB 274A R			sub	bx, offset img_file_name
 01D7  83 FF 03	cmp	di, 3
 01DA  76 06				jna	short loc_cap_file_name4
 01DC  23 DB				and	bx, bx
 01DE  75 BF				jnz	short loc_inv_fname
 01E0  EB 05				jmp	short loc_find_image_file	
 01E2				loc_cap_file_name4:
 01E2  83 FB 08				cmp	bx, 8
 01E5  77 B8				ja	short loc_inv_fname	
 01E7				loc_find_image_file:
					; 07/07/2015
 01E7  BA 274A R			mov	dx, offset img_file_name
 01EA  B9 003F				mov	cx, 3Fh ; File Attributes
 01ED  B4 4E				mov	ah, 4Eh ; MS Dos Function = Find First File
 01EF  CD 21				int	21h
 01F1  73 0B				jnc	short loc_chk_image_file_features
 01F3  80 FC 03				cmp	ah, 03h  ; dos error number > 3
					;ja	loc_error
					; 27/03/2022
 01F6  77 0F				ja	short loc_jmp_loc_err

 01F8  BE 2510 R			mov	si, offset msg_file_not_found
 01FB  E9 00A5				jmp	@f
 01FE				loc_chk_image_file_features:
 01FE  BE 0095				mov	si, DTA_Attrib
 0201  8A 04				mov	al, byte ptr [SI]
 0203  24 1F				and	al, 1Fh ; directory, volume label, system, hidden, read only
					;jnz	loc_error
					; 27/03/2022
 0205  74 02				jz	short loc_chk_image_file_size
 0207				loc_jmp_loc_err:
 0207  EB 6B				jmp	loc_error 

 0209				loc_chk_image_file_size:
 0209  BE 009A				mov	si, DTA_FileSize
 020C  AD				lodsw
 020D  83 3C 16				cmp	word ptr [si], 16h
 0210  75 05				jne	short loc_inv_image_file
 0212  3D 8000				cmp	ax, 8000h ; 1.44 MB floppy disk image (168000h bytes)
 0215  74 06				je	short loc_open_image_file
 0217				loc_inv_image_file:
 0217  BE 254C R			mov	si, offset msg_inv_image_file
 021A  E9 0086				jmp	@f 
 021D				loc_open_image_file:
 021D  B0 02				mov	al, 2 ; open for reading and writing
					;mov	dx, offset img_file_name
 021F  B4 3D				mov	ah, 3Dh ; open file
 0221  CD 21				int	21h
 0223  72 4F				jc	short loc_error
 0225  A3 2758 R			mov	word ptr [img_file_handle], ax	
 0228  C6 06 27DE R 90			mov	byte ptr [PhysicalDriveNumber], 90h ; image file sign
					;
 022D  8B D8				mov	bx, ax
 022F  B9 0400				mov	cx, 1024 ; read 1024 bytes (2 sectors)
 0232  BA 3190 R			mov	dx, offset BSBuffer ; bootsector (& superblock) buffer
 0235  B4 3F				mov	ah, 3Fh ; read file
 0237  CD 21				int	21h
 0239  72 39				jc	short loc_error
 023B  3D 0400				cmp	ax, 1024
 023E  75 34				jne	short loc_error
 0240  8B DA				mov	bx, dx ; offset BSBuffer
 0242  EB 15				jmp	short load_fd_img_boot_sect_ok			
					;
 0244				load_boot_sector:
					; input -> dl = drive number
 0244  32 E4				xor	ah,ah
 0246  CD 13				int	13h
 0248  72 6A				jc	short loc_drv_read_error
 024A				load_boot_sector_ok:
 024A  BB 3190 R			mov	bx, offset BSBuffer
 024D  B8 0202				mov	ax,0202h  ; Read boot sector & superblock
 0250  B9 0001				mov	cx,1
 0253  32 F6				xor	dh,dh
 0255  CD 13				int	13h
 0257  72 5B				jc	short loc_drv_read_error

 0259				load_fd_img_boot_sect_ok:
 0259  81 BF 01FE AA55		 	cmp	word ptr [bx]+510, 0AA55h
 025F  75 0E				jne	short loc_not_fd_rufs

 0261  81 7F 02 5552			cmp	word ptr [bx]+bsFSystemID, 'UR'
 0266  75 07				jne	short loc_not_fd_rufs

 0268  81 7F 04 5346			cmp	word ptr [bx]+bsFSystemID+2, 'SF'
 026D  74 0A				je	short loc_check_fd_sign

 026F				loc_not_fd_rufs:
 026F  BE 2596 R			mov	si, offset msg_Not_Unix_FS
 0272  EB 2F				jmp	short @f

 0274				loc_error:
 0274  BE 2623 R			mov	si, offset error_msg
 0277  EB 2A				jmp	short @f

 0279				loc_check_fd_sign:
 0279  81 7F 0A 6466			cmp	word ptr [BX]+bsFDSign, 'df'
 027E  75 EF				jne	short loc_not_fd_rufs

					; 24/09/2019 - Retro UNIX 386 v2

 0280  A1 33A8 R			mov	ax, word ptr [systm.sb_FreeMapAddr]
					;add	ax, word ptr [systm.sb_BootSectAddr] ; hidden sectors
					; 22/01/2020
 0283  BB 3F90 R			mov	bx, offset fbm_buffer 
 0286  E8 14ED				call	dskrd
 0289  72 29				jc	short loc_drv_read_error

					; 22/01/2020 
					;mov	si, offset WriteBuffer
					;mov	di, offset fbm_buffer
					;mov	cx, 256
					;rep	movsw

 028B  A1 33B0 R			mov	ax, word ptr [systm.sb_InodeMapAddr]
					;add	ax, word ptr [systm.sb_BootSectAddr] ; hidden sectors
					; 22/01/2020
 028E  BB 3D90 R			mov	bx, offset im_buffer
 0291  E8 14E2				call	dskrd
 0294  72 1E				jc	short loc_drv_read_error
				 
					; 22/01/2020
					;mov	si, offset WriteBuffer
					;mov	di, offset im_buffer
					;mov	cx, 256
					;rep	movsw

				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				; Write message
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 0296				loc_unix_welcome:
 0296  9C				pushf
 0297  BE 2254 R			mov	si, offset UNIX_Welcome
 029A  E8 0027				call	PRINT_MSG
 029D  9D				popf
 029E  74 19				je	short loc_call_unix_prompt

 02A0  BE 22F4 R			mov	si, offset usage
 02A3				@@:
 02A3  E8 001E				call	PRINT_MSG

 02A6				loc_close_file_then_terminate:	
					; 07/07/2015
					;mov	bx, [img_file_handle]
					; 15/04/2022 ('word ptr' bugfix)
 02A6  8B 1E 2758 R			mov	bx, word ptr [img_file_handle]
 02AA  23 DB				and	bx, bx
 02AC  74 04				jz	short terminate
 02AE				close_img_file:
 02AE  B4 3E				mov	ah, 3Eh ; close (floppy disk image) file
 02B0  CD 21				int	21h	
 02B2				terminate:
 02B2  CD 20				int	20h

 02B4				loc_drv_read_error:
 02B4  BE 24AA R			mov	si, offset msg_unix_drv_read_error

 02B7  EB EA				jmp	short @b

				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				; call command interpreter
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 02B9				loc_call_unix_prompt:
					; 25/09/2019
 02B9  BE 22CF R			mov	si, offset type_27h
 02BC  E8 0005				call	PRINT_MSG

 02BF  E8 0011				call	unix_prompt

					; 07/07/2015
 02C2  EB E2				jmp	short loc_close_file_then_terminate

 02C4				proc_start endp

 02C4				PRINT_MSG proc near
					; 20/01/2013 'call unix_printchr'
				 
 02C4				PRINT_MSG_LOOP:
 02C4  AC			 	lodsb			; Load byte at DS:SI to AL
 02C5  22 C0				and     AL,AL            
 02C7  74 09				jz      short PRINT_MSG_OK
 02C9  B4 0E			   	mov     AH,0Eh	  
 02CB  BB 0007				mov     BX,07h             
 02CE  CD 10				int     10h		; BIOS Service func ( ah ) = 0Eh
								; Write char as TTY
								;AL-char BH-page BL-colo
					;call 	unix_printchr	; 20/01/2013
 02D0  EB F2				jmp     short PRINT_MSG_LOOP           

 02D2				PRINT_MSG_OK:
 02D2  C3				retn

 02D3				PRINT_MSG endp

				;unix_printchr	proc near
				;	; 20/01/2013      
				;	mov     AH,0Eh	  
				;	mov     BX,07h             
				;	int     10h	    	; BIOS Service func ( ah ) = 0Eh
				;				; Write char as TTY
				;				;AL-char BH-page BL-color
				;	retn
				;unix_printchr	endp


 02D3				unix_prompt proc near
					; 07/07/2015
					; 8/12/2012
					; Derived from
					; proc_dos_prompt procedure of TRDOS, 
					; MAINPROG.ASM (1/1/2012). 
					;
					; proc_dos_prompt (15/09/2011)
					;

				 	;push	ds
					;pop	es
 02D3				unix_prompt_0:	
					; 07/07/2015
 02D3  80 3E 27DE R 90			cmp	byte ptr [PhysicalDriveNumber], 90h
 02D8  72 17				jb	short unix_prompt_1

					; 25/09/2019
 02DA				@@:
 02DA  B4 01				mov	ah,1 ; clear keyboard buffer
 02DC  CD 16				int	16h
 02DE  74 06				jz	short @f ; keyboard buffer is empty
 02E0  32 E4				xor	ah,ah ; get character
 02E2  CD 16				int	16h
 02E4  EB F4				jmp	short @b ; loop till keyboard buffer becomes empty
 02E6				@@:
 02E6  BE 274A R			mov	si, offset img_file_name
 02E9  E8 FFD8				call 	PRINT_MSG
 02EC  BE 2420 R			mov	si, offset unix_img_cdir
 02EF  EB 09				jmp	short unix_prompt_15
 02F1				unix_prompt_1:
 02F1  BE 241B R			mov 	si, offset unix_cdrv
 02F4  E8 FFCD				call 	PRINT_MSG
 02F7				unix_prompt_2:
 02F7  BE 2421 R			mov 	si, offset unix_cdir
 02FA				unix_prompt_15:
 02FA  E8 FFC7				call 	PRINT_MSG
 02FD				unix_prompt_3:
 02FD  A0 2449 R			mov 	al, byte ptr [unix_prompt_char]
				 	;mov	ah,0Eh	  
					;mov	bx,07h             
 0300  CD 10				int     10h         
 0302				unix_prompt_4:     
 0302  B4 03				mov     ah,03h
					;mov	bx,07h	  
 0304  CD 10				int     10h
 0306  88 16 244A R			mov     byte ptr [CursorColumn],dl
 030A				unix_prompt_5:
 030A  BE 244C R			mov     si, offset CommandBuffer
 030D  E8 0061				call    proc_rw_char
					;mov	byte ptr [CommandBuffer]+75,0

					;mov	si, offset CommandBuffer
 0310  8B FE				mov     di, si
 0312  33 DB				xor 	bx, bx
 0314  33 C9				xor     cx, cx
 0316				unix_prompt_6:
 0316  8A 00				mov     al, byte ptr [SI][BX]
 0318  FE C3				inc	bl 
 031A  3C 20			 	cmp     al, 20h
 031C  77 11				ja      short unix_prompt_8
 031E  72 40				jb      short unix_prompt_13
 0320  80 FB 4A				cmp     bl, 74 ; 75 ?
 0323  72 F1				jb      short unix_prompt_6
 0325  EB 39				jmp 	short unix_prompt_13
 0327				unix_prompt_7:
 0327  8A 00				mov     al, byte ptr [SI][BX]
 0329  FE C3				inc     bl
 032B  3C 20				cmp     al,20h
 032D  76 08				jna     short unix_prompt_9
 032F				unix_prompt_8:
 032F  AA				stosb   
 0330  FE C1				inc     cl
 0332  80 FB 4A				cmp     bl, 74 ; 75 ?
 0335  72 F0				jb      short unix_prompt_7
					;jmp    short unix_prompt_12
 0337				unix_prompt_9:
 0337  32 C0				xor	al, al ; 0
 0339				unix_prompt_10:
 0339  88 05				mov     byte ptr [DI], al
 033B  47				inc    	di
 033C  80 FB 4A				cmp     bl, 74 ; 75 ?
 033F  73 0B				jnb     short unix_prompt_12
 0341  8A 00				mov     al, byte ptr [SI][BX]
 0343  FE C3				inc     bl
 0345  3C 20				cmp     al, 20h
 0347  73 F0				jnb 	short unix_prompt_10
 0349				unix_prompt_11:
 0349  C6 05 00				mov     byte ptr [DI], 0
 034C				unix_prompt_12:
 034C  E8 00A9				call    command_interpreter

 034F  80 3E 2496 R 01			cmp     byte ptr [program_exit], 1
 0354  73 1A				jnb	short unix_prompt_14

 0356  B9 004A				mov     cx, 74 ; 75 ?
 0359  BF 244C R			mov     di, offset CommandBuffer
 035C  32 C0				xor     al,al
 035E  F3/ AA				rep     stosb
 0360				unix_prompt_13:
 0360  BB 0007				mov     bx,07h 
 0363  B0 0D				mov     al,0Dh
 0365  B4 0E				mov     ah,0Eh
 0367  CD 10				int     10h
 0369  B0 0A				mov     al,0Ah
 036B  CD 10				int     10h
					
 036D  E9 FF63				jmp     unix_prompt_0 ; loop

 0370				unix_prompt_14:
 0370  C3				retn

 0371				unix_prompt endp

 0371				proc_rw_char proc near
					; 8/12/2012 (modification for UNIXCOPY.ASM)
					; OUTPUT -> DS:SI = Entered String (ASCIIZ)

 0371				read_next_char:
 0371  32 E4				xor     ah,ah
 0373  CD 16				int     16h
 0375  22 C0				and     al,al
 0377  74 3B				jz      short loc_arrow    
 0379  3C E0				cmp     al,0E0h          
 037B  74 37				je      short loc_arrow
 037D  3C 08				cmp     al,08h
 037F  75 3F				jne     short char_return
 0381				loc_back:
 0381  B3 07				mov     bl,7
 0383  B4 03				mov     ah,3
 0385  CD 10				int     10h
 0387  3A 16 244A R			cmp     dl,byte ptr [CursorColumn]
 038B  77 08				ja      short prev_column
 038D				loc_beep:
 038D  B4 0E				mov     ah, 0Eh
 038F  B0 07				mov     al, 7
 0391  CD 10				int     10h
 0393  EB DC				jmp     short read_next_char
 0395				prev_column:
 0395  FE CA				dec     dl
 0397				set_cursor_pos:
 0397  B4 02				mov     ah,02h
 0399  CD 10				int     10h
 039B  8A DA				mov     bl, dl
 039D  2A 1E 244A R			sub     bl,byte ptr [CursorColumn] 
 03A1  B9 0001				mov     cx,1
 03A4  B4 09				mov     ah,09h
 03A6  B0 20				mov     al,20h
 03A8  88 00				mov     byte ptr [SI][BX],al
 03AA				loc_write_it:
 03AA  B3 07				mov     bl,7
 03AC  CD 10				int     10h
 03AE  8B 16 244A R			mov     dx,word ptr [CursorColumn]
 03B2  EB BD				jmp     short read_next_char
 03B4				loc_arrow:    
 03B4  80 FC 4B				cmp     AH,4Bh
 03B7  74 C8				je      short loc_back
 03B9  80 FC 53				cmp     AH,53h
 03BC  74 C3				je      short loc_back
 03BE  EB B1				jmp     short read_next_char
 03C0				char_return:
 03C0  B3 07				mov     bl,7
 03C2  B4 03				mov     ah,3
 03C4  CD 10				int     10h

 03C6  8A E2				mov     ah, dl	
 03C8  2A 26 244A R			sub     ah,byte ptr [CursorColumn] 
 03CC  3C 20				cmp     al,20h
 03CE  72 22				jb      short loc_escape
 03D0  80 FC 48				cmp     ah, 72 ; limit
 03D3  77 B8				ja      short loc_beep

 03D5  8A DC				mov     bl, ah
 03D7  32 E4				xor     ah, ah
 03D9  89 00				mov     word ptr [SI][BX],ax
 03DB  B4 0E				mov     ah, 0Eh
 03DD  B3 07				mov     bl, 7
 03DF  CD 10				int     10h
 03E1  EB 8E				jmp     short read_next_char
 03E3				pass_escape:
 03E3  3C 0D				cmp     al,0Dh
 03E5  75 8A				jne     short read_next_char
 03E7  B4 0E				mov     ah, 0Eh	
 03E9  B3 07				mov     bl,7
 03EB  CD 10				int     10h
 03ED  B0 0A				mov     al,0Ah
 03EF  CD 10				int     10h
 03F1  C3				retn
 03F2				loc_escape:
 03F2  3C 1B				cmp     al,1Bh
 03F4  75 ED				jne     short pass_escape
 03F6  F9				stc
 03F7  C3				retn

 03F8				proc_rw_char endp


 03F8				command_interpreter proc near
					; 27/03/2022
					; 22/01/2020
					; 20/01/2020 (32 bit offset)
					; 04/01/2020
					; 20/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)
					; 01/03/2013
					; 25/02/2013
					; 23/02/2013 ?/help
					; 17/02/2013 namei, inode, iget
					; 16/02/2013 fs, volume 
					; 21/01/2013 'ls -l'
					; 20/01/2013 ls (dir modifications)
					; 13/01/2013 chmod, chown, link
					; 07/01/2013 show tabspace (div) modif.
					; 06/01/2013 show
					; 06/01/2013 rm, mkdir, rmdir modifications
					; 05/01/2013 check file attributes
					; 30/12/2012
					; 24/12/2012 todos
					; 16/12/2012
					; 08/12/2012
					;
 03F8  AD				lodsw   ; 25/02/2013
 03F9				cl4:
 03F9  80 F9 04				cmp	cl, 4
					;ja	cl5
					;jb	cl3
					; 27/03/2022
 03FC  77 1B				ja	short cl5_or_above
 03FE  74 03				je	short loc_cmd_exit
 0400  E9 0467				jmp	cl3
				; EXIT	
 0403				loc_cmd_exit:
 0403  3D 7865				cmp	ax, 'xe'
 0406  75 14				jne	short loc_cmd_show
 0408  AD				lodsw
 0409  3D 7469				cmp	ax, 'ti'
 040C  75 0A				jne	short @f
 040E  AC				lodsb
 040F  0A C0				or	al, al
 0411  75 05				jnz	short @f	

 0413  C6 06 2496 R 01			mov	byte ptr [program_exit], 1
 0418				@@:
 0418  C3				retn

					; 27/03/2022
 0419				cl5_or_above:
 0419  E9 00EB				jmp	cl5

				; SHOW
 041C				loc_cmd_show:
					; 06/01/2013
 041C  3D 6873				cmp	ax, 'hs'
 041F  75 29				jne	short loc_cmd_link
 0421  AD				lodsw
 0422  3D 776F				cmp	ax, 'wo'
 0425  75 F1				jne	short @b
 0427  AC				lodsb
 0428  0A C0				or	al, al
 042A  75 EC				jnz	short @b
 042C				show_uf1:
 042C  89 36 27BC R			mov	word ptr [u_namep], si
 0430  AC				lodsb
 0431  3C 20				cmp	al, 20h
 0433  74 F7				je	short show_uf1
 0435  72 12				jb	short @f
 0437				show_uf2:
 0437  AC				lodsb
 0438  3C 20				cmp	al, 20h
 043A  77 FB				ja	short show_uf2
 043C  32 C0				xor	al, al
 043E  88 44 FF				mov	byte ptr [SI]-1, al
 0441				show_uf3:
 0441  E8 0CF8				call	show_file
					;jc	ci_error
					; 27/03/2022
 0444  73 03				jnc	short @f
 0446  E9 0452				jmp	ci_error
 0449				@@:
 0449  C3				retn
				; LINK
 044A				loc_cmd_link:
 044A  3D 696C				cmp	ax, 'il'
 044D  74 03 E9 0082			jne	loc_cmd_iget ; 17/02/2013
 0452  AD				lodsw
 0453  3D 6B6E				cmp	ax, 'kn'
 0456  75 F1				jne	short @b
 0458  AC				lodsb
 0459  0A C0				or	al, al
 045B  75 EC				jnz	short @b
 045D				link_sf1:
 045D  89 36 27BC R			mov	word ptr [u_namep], si
 0461  AC				lodsb
 0462  3C 20				cmp	al, 20h
 0464  74 F7				je	short link_sf1
 0466  72 E1				jb	short @b
 0468				link_sf2:
 0468  AC				lodsb
 0469  3C 20				cmp	al, 20h
 046B  77 FB				ja	short link_sf2
 046D  32 C0				xor	al, al
 046F  88 44 FF				mov	byte ptr [SI]-1, al
 0472				link_df1:
 0472  89 36 249B R			mov	word ptr [arg], si
 0476  AC				lodsb
 0477  3C 20				cmp	al, 20h
 0479  74 F7				je	short link_df1
 047B  72 CC				jb	short @b
 047D				link_df2:
 047D  AC				lodsb
 047E  3C 20				cmp	al, 20h
 0480  77 FB				ja	short link_df2
 0482  4E				dec	si
 0483  32 C0				xor	al, al
 0485  88 04				mov	byte ptr [SI], al
 0487				link_fsf:
 0487  E8 0D6D				call	namei
					;jc	ci_error
					; 27/03/2022
 048A  72 23				jc	short link_err

 048C  A3 276E R			mov	word ptr [uf_i_number], ax
 048F				link_fdf:
 048F  8B 36 249B R			mov	si, word ptr [arg]
 0493  89 36 27BC R			mov	word ptr [u_namep], si

					;call	namei
 0497  E8 0D61				call	namei_x ; 02/10/2019
					;jnc	ci_error
					; 27/03/2022
 049A  73 13				jnc	short link_err

 049C  80 FC FF				cmp	ah, 0FFh
					;jne	ci_error
					; 27/03/2022
 049F  75 0E				jne	short link_err

					; [u_dirp] = empty directory entry slot

 04A1  A1 27DA R			mov	ax, word ptr [ii]
 04A4  A3 2497 R			mov	word ptr [pdir], ax
					
 04A7  A1 276E R			mov	ax, word ptr [uf_i_number]
 04AA  E8 0E71				call	iget
					;jc	ci_error
					; 27/03/2022
 04AD  73 03				jnc	short @f
 04AF				link_err:
 04AF  E9 03E9				jmp	ci_error
 04B2				@@:
					; 19/09/2019
 04B2  C6 06 27B3 R 01			mov	byte ptr [imodx], 1 ; 19/09/2019 - Retro UNIX 386 v2
						; (flag means file data is same
						;  but inode's itself is modified)

 04B7  FE 06 2772 R			inc	byte ptr [inode_nlks] ; link count

 04BB  E8 1111				call	setimod ; jsr r0,setimod / set modified flag

					;inc	byte ptr [inode_nlks] ; link count

 04BE  A1 2497 R			mov	ax, word ptr [pdir]
 04C1  E8 0E5A				call	iget
					;jc	ci_error
					; 27/03/2022
 04C4  72 E9				jc	short link_err

					; namei -> u_namep points filename 
					;       after the last '/' of the path
					
 04C6  A1 276E R			mov	ax, word ptr [uf_i_number]
 04C9  A3 27CA R			mov	word ptr [u_dirbuf], ax

 04CC  E8 119C				call	mkdir ; make directory entry
					;jc	ci_error
					; 27/03/2022
 04CF  72 DE				jc	short link_err	

 04D1  E9 06D0				jmp	ci_sync_exit
				; IGET
 04D4				loc_cmd_iget:   ; 17/02/2013, inode/iget
 04D4  3D 6769				cmp	ax, 'gi'
 04D7  75 17				jne	short loc_cmd_help ; 23/02/2013
 04D9  AD				lodsw
 04DA  3D 7465				cmp	ax, 'te'
 04DD  75 27				jne	short @f
 04DF  AC				lodsb
 04E0  0A C0				or	al, al
 04E2  75 22				jnz	short @f	
 04E4				ci_iget_getarg:
 04E4  8B DE				mov	bx, si
 04E6  AC				lodsb
 04E7  3C 20				cmp	al, 20h
					;ja	inode_getarg2
					;je	short ci_iget_getarg
					; 27/03/2022
 04E9  72 05				jb	short loc_cmd_help
 04EB  74 F7				je	short ci_iget_getarg
 04ED  E9 0368				jmp	inode_getarg2
				; HELP
 04F0				loc_cmd_help:	; 23/02/2013
 04F0  3D 6568				cmp	ax, 'eh'
 04F3  75 11				jne	short @f
 04F5  AD				lodsw
 04F6  3D 706C				cmp	ax, 'pl'
 04F9  75 0B				jne	short @f
 04FB  AC				lodsb
 04FC  22 C0				and	al, al
 04FE  75 06				jnz	short @f
 0500				ci_?:
 0500  BE 2BCB R			mov	si, offset UNIXCOPY_Commands
 0503  E8 FDBE				call	PRINT_MSG
 0506				@@:
 0506  C3				retn  
 0507				cl5:
 0507  80 F9 05				cmp	cl, 5
					;ja	cl7
					;;jb	short @f
					; 27/03/2022
 050A  76 03				jna	short loc_cmd_chdir
 050C  E9 04E0				jmp	cl7
				; CHDIR
 050F				loc_cmd_chdir:
 050F  3D 6863				cmp	ax,'hc'
 0512  74 03 E9 0098			jne	loc_cmd_todos
 0517  AD				lodsw
 0518  3D 6964				cmp	ax, 'id'
 051B  75 28				jne	short loc_cmd_chmod
 051D  AC				lodsb
 051E  3C 72				cmp	al, 'r'
 0520  75 22				jne	short @f
 0522  AC				lodsb
 0523  0A C0				or	al, al
 0525  75 1D				jnz	short @f
 0527				ci_cd_getarg:
 0527  89 36 27BC R			mov	word ptr [u_namep], si
 052B  AC				lodsb
 052C  3C 20				cmp	al, 20h
 052E  74 F7				je	short ci_cd_getarg
 0530  72 12				jb	short @f
					; dec si

 0532  A1 27BC R			mov	ax, word ptr [u_namep]
 0535  A3 249B R			mov	word ptr [arg], ax

 0538  E8 09E9				call	sys_chdir
					;jc	ci_error
					; 27/03/2022
 053B  72 24				jc	short loc_chdir_err
					
 053D  8B 36 249B R			mov	si, word ptr [arg]
 0541  E8 0747				call	update_cdir_string
 0544				@@:
 0544  C3				retn

				; CHMOD
 0545				loc_cmd_chmod: ; 13/01/2013
					;cmp	ax, 'hc'
					;jne	short loc_cmd_todos
					;lodsw
 0545  3D 6F6D				cmp	ax, 'om'
 0548  75 23				jne	short loc_cmd_chown
 054A  AC				lodsb	
 054B  3C 64				cmp	al, 'd'	
 054D  75 F5				jne	short @b
 054F  AC				lodsb
 0550  0A C0				or	al, al
 0552  75 F0				jnz	short @b
 0554				ci_chmod_getarg:
 0554  AC				lodsb
 0555  3C 20				cmp	al, 20h
 0557  74 FB				je	short ci_chmod_getarg
 0559  72 E9				jb	short @b
 055B  4E				dec	si
 055C  E8 187A				call	chmode
					;jc	ci_error
					; 27/03/2022
 055F  73 03				jnc	short ci_chmod_print
 0561				loc_chdir_err:	; 27/03/2022
 0561				loc_chmod_err:
 0561				loc_chown_err:
 0561				loc_chgrp_err:
 0561  E9 0337				jmp	ci_error

					; 27/03/2022
 0564				ci_chmod_print:
					; 01/10/2019 - Retro UNIX 386 v2
 0564				ci_chown_print:
 0564				ci_chgrp_print: ; 01/10/2019
 0564  BE 2499 R			mov	si, offset msg_arg
 0567  E8 FD5A				call	PRINT_MSG
 056A  E9 0637				jmp	ci_sync_exit

				; CHOWN
 056D				loc_cmd_chown: ; 13/01/2013
					;cmp	ax, 'hc'
					;jne	short loc_cmd_todos
					;lodsw
 056D  3D 776F				cmp	ax, 'wo'
					;jne	short @b
 0570  75 1C				jne	short loc_cmd_chgrp ; 01/10/2019
 0572  AC				lodsb	
 0573  3C 6E				cmp	al, 'n'	
 0575  75 CD				jne	short @b
 0577  AC				lodsb
 0578  0A C0				or	al, al
 057A  75 C8				jnz	short @b
 057C				ci_chown_getarg:
 057C  AC				lodsb
 057D  3C 20				cmp	al, 20h
 057F  74 FB				je	short ci_chown_getarg
 0581  72 C1				jb	short @b
 0583  4E				dec	si
 0584  E8 18E5				call	chowner
					;jc	ci_error
					; 27/03/2022
 0587  72 D8				jc	short loc_chown_err

 0589  23 DB				and	bx, bx
 058B  75 D7				jnz	short ci_chown_print
 058D				@@:
 058D  C3				retn

				; CHGRP
 058E				loc_cmd_chgrp: ; 01/10/2019 - Retro UNIX 386 v2
					;cmp	ax, 'hc'
					;jne	short loc_cmd_todos
					;lodsw
 058E  3D 7267				cmp	ax, 'rg'
 0591  75 FA				jne	short @b
 0593  AC				lodsb	
 0594  3C 70				cmp	al, 'p'	
 0596  75 F5				jne	short @b
 0598  AC				lodsb
 0599  0A C0				or	al, al
 059B  75 F0				jnz	short @b
 059D				ci_chgrp_getarg:
 059D  AC				lodsb
 059E  3C 20				cmp	al, 20h
 05A0  74 FB				je	short ci_chgrp_getarg
 05A2  72 E9				jb	short @b
 05A4  4E				dec	si
 05A5  E8 18BC				call	chgroup
					;jc	ci_error
					; 27/03/2022
 05A8  72 B7				jc	short loc_chgrp_err

 05AA  23 DB				and	bx, bx
 05AC  75 B6				jnz	short ci_chgrp_print
 05AE				@@:
 05AE  C3				retn
				; TODOS
 05AF				loc_cmd_todos:
					; 24/12/2012
 05AF  3D 6F74				cmp	ax, 'ot'
 05B2  74 03 E9 0188			jne	loc_cmd_mkdir ; 30/12/2012
 05B7  AD				lodsw
 05B8  3D 6F64				cmp	ax, 'od'
 05BB  75 F1				jne	short @b
 05BD  AC				lodsb	
 05BE  3C 73				cmp	al, 's'	
 05C0  75 EC				jne	short @b
 05C2  AC				lodsb
 05C3  0A C0				or	al, al
 05C5  75 E7				jnz	short @b
 05C7				todos_uf1:
 05C7  89 36 27BC R			mov	word ptr [u_namep], si
 05CB  AC				lodsb
 05CC  3C 20				cmp	al, 20h
 05CE  74 F7				je	short todos_uf1
 05D0  72 DC				jb	short @b
 05D2				todos_uf2:
 05D2  AC				lodsb
 05D3  3C 20				cmp	al, 20h
 05D5  77 FB				ja	short todos_uf2
 05D7  32 C0				xor	al, al
 05D9  88 44 FF				mov	byte ptr [SI]-1, al
 05DC				todos_df1:
 05DC  89 36 249B R			mov	word ptr [arg], si
 05E0  AC				lodsb
 05E1  3C 20				cmp	al, 20h
 05E3  74 F7				je	short todos_df1
 05E5  72 C7				jb	short @b
 05E7				todos_df2:
 05E7  AC				lodsb
 05E8  3C 20				cmp	al, 20h
 05EA  77 FB				ja	short todos_df2
 05EC  4E				dec	si
 05ED  32 C0				xor	al, al
 05EF  88 04				mov	byte ptr [SI], al
 05F1				todos_fuf:
 05F1  E8 0C03				call	namei
					;;jnc	short @f
					;jc	ci_error
					; 27/03/2022
 05F4  73 03				jnc	short @f
 05F6				todos_err:
 05F6  E9 02A2				jmp	ci_error

					;cmp	ah, 0FFh
					;jne	ci_error
					;;jmp	ci_error ; 'file not found' error
 05F9				@@:
 05F9  A3 276E R			mov	word ptr [uf_i_number], ax
 05FC				todos_fdf:
 05FC  8B 16 249B R			mov	dx, word ptr [arg]
 0600  B9 003F				mov	cx, 3Fh ; File Attributes ; 05/01/2013 (3Fh)
 0603  B4 4E				mov	ah, 4Eh ; MS Dos Function = Find First File
 0605  CD 21				int	21h
					;jnc	short todos_afow
 0607  73 07				jnc	short @f ; 05/01/2013
 0609				todos_chk_err:
 0609  80 FC 03				cmp	ah,03h  ; dos error number > 3
					;ja	ci_error
					; 27/03/2022
 060C  77 E8				ja	short todos_err

 060E  EB 50				jmp	short todos_crdf
 0610				@@:
					; 05/01/2013
 0610  BE 0095				mov	si, DTA_Attrib
 0613  8A 04				mov	al, byte ptr [SI]
 0615  24 1F				and	al, 1Fh ; directory, volume label, system, hidden, read only
					;jnz	ci_error
					; 27/03/2022
 0617  75 DD				jnz	short todos_err      
 0619				todos_afow:
					; overwrite question
 0619  BE 2701 R			mov	si, offset msg_overwrite_question1
 061C  E8 FCA5				call	PRINT_MSG
 061F  BE 009E				mov	si, DTA_FileName
 0622  E8 FC9F				call	PRINT_MSG
 0625  BE 271E R			mov	si, offset msg_overwrite_question2
 0628  E8 FC99				call	PRINT_MSG
 062B  BE 249F R			mov	si, offset msg_yes_no
 062E  E8 FC93				call	PRINT_MSG
 0631				todos_afow_input:	; ask for overwrite
 0631  33 C0				xor	ax, ax
 0633  CD 16				int	16h		; wait for keyboard command
 0635  3C 03				cmp	al, 'C'-40h
 0637  74 1A				je	short @f	   
 0639  3C 1B				cmp	al, 27
 063B  74 16				je	short @f
 063D  24 DF				and	al, 0DFh
 063F  3C 59				cmp	al, 'Y'			; Yes?
 0641  74 11				je	short todos_afow_yes	; overwrite
 0643  3C 4E				cmp	al, 'N'			; No?
 0645  75 EA				jne	short todos_afow_input         
 0647				todos_afow_no:
 0647  BE 261F R			mov	si, offset msg_No
 064A  E8 FC77				call	PRINT_MSG
 064D  BE 262C R			mov	si, offset UNIX_CRLF
 0650  E8 FC71				call	PRINT_MSG
 0653				@@:
 0653  C3				retn
 0654				todos_afow_yes:
 0654  BE 261A R			mov	si, offset msg_YES
 0657  E8 FC6A				call	PRINT_MSG
 065A  BE 262C R			mov	si, offset UNIX_CRLF
 065D  E8 FC64				call	PRINT_MSG
 0660				todos_crdf:
					;mov	dx, word ptr [arg]
 0660  33 C9				xor	cx, cx ; File Attributes = 0
 0662  B4 3C				mov	ah, 3Ch ; MS DOS Function = Create File
 0664  CD 21				int	21h
					;jc	ci_error
					; 27/03/2022
 0666  72 0F				jc	short todos_crdf_err

 0668  A3 27DC R			mov	word ptr [FileHandle], ax
 066B				todos_odf:
 066B  8B 16 249B R			mov	dx, word ptr [arg]
 066F  B4 3D				mov	ah, 3Dh ; MS DOS Function = Open File
 0671  32 C0				xor	al, al  
 0673  CD 21				int	21h
					;jc	ci_error
					; 27/03/2022
 0675  73 03				jnc	short todos_ruf_wdf
 0677				todos_crdf_err:
 0677				todos_odf_err:
 0677  E9 0221				jmp	ci_error
					
 067A				todos_ruf_wdf:
 067A  33 C0				xor	ax, ax 
 067C  A3 27C2 R			mov	word ptr [u_off], ax
					; 20/01/2020
 067F  A3 27C4 R			mov	word ptr [u_off+2], ax
 0682				todos_wf_msg:
 0682  BE 25C1 R			mov	si, offset Msg_writing_file
 0685  E8 FC3C				call	PRINT_MSG
 0688				todos_iget:	
 0688  A1 276E R			mov	ax, word ptr [uf_i_number]
 068B  E8 0C90				call	iget
 068E  72 4A				jc	short todos_cdf

					; 20/01/2020
 0690  B9 0200				mov	cx, 512
 0693				todos_read_unix_sf_1:
 0693  A1 2778 R		       	mov	ax, word ptr [inode_size]
 0696  8B 16 277A R			mov	dx, word ptr [inode_size+2] 
 069A  2B 06 27C2 R			sub	ax, word ptr [u_off]
 069E  1B 16 27C4 R			sbb	dx, word ptr [u_off+2] 
 06A2  75 08				jnz	short @f

 06A4  23 C0				and	ax, ax
 06A6  74 32				jz	short todos_cdf

 06A8  3B C1				cmp	ax, cx ; 512
 06AA  76 02				jna	short todos_read_unix_sf_2
 06AC				@@:	
 06AC  8B C1				mov	ax, cx ; 512
				;loc_read_unix_sf:
 06AE				todos_read_unix_sf_2:	
 06AE  A3 27C6 R			mov	word ptr [u_count], ax

 06B1  C7 06 27C0 R 3990 R		mov	word ptr [u_base], offset ReadBuffer

 06B7  A1 276E R			mov	ax, word ptr [uf_i_number] ; word ptr [u_dirbuf]
 06BA  E8 0BD3				call	readi
 06BD  72 1B				jc	short todos_cdf
 06BF				@@:
				;loc_write_dos_df:	
 06BF  B4 40				mov	ah, 40h ; Write File
 06C1  8B 0E 27C8 R			mov	cx, word ptr [u_nread] ; 0 -> eof
 06C5  BA 3990 R			mov	dx, offset ReadBuffer
 06C8  8B 1E 27DC R			mov	bx, word ptr [FileHandle]
 06CC  CD 21				int	21h
 06CE  72 0A				jc	short todos_cdf


					;or	ax, ax  ; or cx, cx
					;;jnz	short loc_read_unix_sf ; ax = 512
					;; 20/01/2020
					;jnz	short todos_read_unix_sf_1

					; 20/01/2020
					;cmp	ax, 512
 06D0  81 F9 0200			cmp	cx, 512 ; no..
 06D4  74 BD				je	short todos_read_unix_sf_1 
							; there may be next sector to read
 06D6  3B C1				cmp	ax, cx ; write count = read count ? 
 06D8  75 00				jne	short todos_cdf ; jb short todos_cdf

					; If we are here (ax,cx < 512) 
					; it is end of file or there is a write error 
 06DA				todos_cdf:
 06DA  9C				pushf
 06DB  72 47				jc	short @f
 06DD				todos_set_dfdt:
 06DD  A1 27AC R			mov	ax, word ptr [inode_ctim]   ; fromdos command ->
 06E0  8B 16 27AE R			mov	dx, word ptr [inode_ctim]+2 ; dos lmdt -> unix ctim

 06E4  E8 1231				call	convert_from_epoch

 06E7  8B 16 27E8 R			mov	dx, word ptr [hour]
 06EB  B1 0B				mov	cl, 11
 06ED  D3 E2				shl	dx, cl   
 06EF  A1 27EA R			mov	ax, word ptr [minute]
 06F2  B1 05				mov	cl, 5
 06F4  D3 E0				shl	ax, cl
 06F6  0B D0				or	dx, ax
 06F8  A1 27EC R			mov	ax, word ptr [second]
 06FB  D1 E8				shr	ax, 1
 06FD  0B C2				or	ax, dx
 06FF  50				push	ax ; time
 0700  8B 16 27E2 R			mov	dx, word ptr [year]
 0704  81 EA 07BC			sub	dx, 1980
 0708  B1 09				mov	cl, 9
 070A  D3 E2				shl	dx, cl   
 070C  A1 27E4 R			mov	ax, word ptr [month]
 070F  B1 05				mov	cl, 5
 0711  D3 E0				shl	ax, cl
 0713  0B D0				or	dx, ax
 0715  A1 27E6 R			mov	ax, word ptr [day]
 0718  0B D0				or	dx, ax
 071A  59				pop	cx ; time

 071B  B8 5701				mov	ax, 5701h ; set lm date&time
 071E  8B 1E 27DC R			mov	bx, word ptr [FileHandle]

 0722  CD 21				int	21h
 0724				@@:
 0724  B4 3E				mov	ah, 3Eh ; Close File
 0726  8B 1E 27DC R			mov	bx, word ptr [FileHandle]
 072A  CD 21				int	21h
 072C  9D				popf
					;jc	ci_error
					; 27/03/2022
 072D  73 03				jnc	short todos_retn
 072F				loc_mkdir_err:
 072F  E9 0169				jmp	ci_error

 0732				todos_retn:
 0732  BE 2613 R			mov	si, offset Msg_OK
 0735  E8 FB8C				call	PRINT_MSG

 0738  BE 262C R			mov	si, offset UNIX_CRLF
 073B  E8 FB86				call	PRINT_MSG
 073E				@@:	
 073E  C3				retn
				; MKDIR
 073F				loc_cmd_mkdir:
					; 30/12/2012
 073F  3D 6B6D				cmp	ax, 'km'
 0742  75 33				jne	short loc_cmd_rmdir
 0744  AD				lodsw
 0745  3D 6964				cmp	ax, 'id'
 0748  75 F4				jne	short @b
 074A  AC				lodsb	
 074B  3C 72				cmp	al, 'r'	
 074D  75 EF				jne	short @b
 074F  AC				lodsb
 0750  0A C0				or	al, al
 0752  75 EA				jnz	short @b
 0754				ci_mkdir_getarg1:
 0754  89 36 27BC R			mov	word ptr [u_namep], si
 0758  AC				lodsb
 0759  3C 20				cmp	al, 20h
 075B  74 F7				je	short ci_mkdir_getarg1
 075D  72 DF				jb	short @b
 075F				ci_mkdir_getarg2: ; 06/01/2013
 075F  AC				lodsb
 0760  3C 20				cmp	al, 20h
 0762  77 FB				ja	short ci_mkdir_getarg2
 0764  4E				dec	si
 0765  32 C0				xor	al, al
 0767  88 04				mov	byte ptr [SI], al
					
 0769  BE 262F R			mov	si, offset Msg_Making_Directory
 076C  E8 FB55				call	PRINT_MSG

 076F  E8 0EBB				call	make_directory
					;jc	ci_error
					; 27/03/2022
 0772  72 BB				jc	short loc_mkdir_err

 0774  E9 042D				jmp	ci_sync_exit
				; RMDIR
 0777				loc_cmd_rmdir:
					; 05/01/2013
 0777  3D 6D72				cmp	ax, 'mr'
 077A  75 61				jne	short loc_cmd_namei ; 17/02/2013
 077C  AD				lodsw
 077D  3D 6964				cmp	ax, 'id'
 0780  75 BC				jne	short @b
 0782  AC				lodsb	
 0783  3C 72				cmp	al, 'r'	
 0785  75 B7				jne	short @b
 0787  AC				lodsb
 0788  0A C0				or	al, al
 078A  75 B2				jnz	short @b
 078C				ci_rmdir_getarg1:
 078C  89 36 27BC R			mov	word ptr [u_namep], si
 0790  AC				lodsb
 0791  3C 20				cmp	al, 20h
 0793  74 F7				je	short ci_rmdir_getarg1
 0795  72 A7				jb	short @b
					; 06/01/2013
 0797  8A E0				mov	ah, al
 0799				ci_rmdir_getarg2: 
 0799  AC				lodsb
 079A  3C 20				cmp	al, 20h
 079C  77 FB				ja	short ci_rmdir_getarg2
 079E  4E				dec	si
 079F  32 C0				xor	al, al
 07A1  88 04				mov	byte ptr [SI], al
					
 07A3  B0 2E				mov	al, '.'
 07A5  38 C4				cmp	ah, al ; dot
 07A7  75 14				jne	short @f

 07A9  8A 24				mov	ah, byte ptr [SI]
 07AB  80 FC 21				cmp	ah, 21h
					;jb	ci_error
					; 27/03/2022
 07AE  72 0A				jb	short loc_rmdir_err

 07B0  38 C4				cmp	ah, al ;'.' ; dotdot (parent dir)
 07B2  75 09				jne	short @f

 07B4  46				inc	si
 07B5  80 3C 21				cmp	byte ptr [SI], 21h
					;jb	ci_error
					; 27/03/2022
 07B8  73 03				jnb	short @f
 07BA				loc_rmdir_err:
 07BA  E9 00DE				jmp	ci_error	
 07BD				@@:
					; u_namep = pointer to directory path name

 07BD  E8 0A37				call	namei
					;jc	ci_error
					; 27/03/2022
 07C0  72 F8				jc	short loc_rmdir_err

 07C2  83 F8 01				cmp	ax, ROOT_DIR_INODE_NUMBER
					;je	ci_error
					; 27/03/2022
 07C5  74 F3				je	short loc_rmdir_err

 07C7  3B 06 27BA R			cmp	ax, word ptr [u_cdir]
					;je	ci_error
					; 27/03/2022
 07CB  74 ED				je	short loc_rmdir_err

 07CD  50				push	ax
 07CE  BE 2645 R			mov	si, offset Msg_Removing_Directory
 07D1  E8 FAF0				call	PRINT_MSG
 07D4  58				pop	ax

 07D5  E8 086D				call	remove_directory
					;jc	ci_error
					; 27/03/2022
 07D8  72 E0				jc	short loc_rmdir_err

 07DA  E9 03C7				jmp	ci_sync_exit

				; NAMEI	; 17/02/2013, print i-number of file/directory
 07DD				loc_cmd_namei:
 07DD  3D 616E				cmp	ax, 'an'
 07E0  75 53				jne	short loc_cmd_inode
 07E2  AD				lodsw
 07E3  3D 656D				cmp	ax, 'em'
 07E6  75 2F				jne	short @f
 07E8  AC				lodsb	
 07E9  3C 69				cmp	al, 'i'	
 07EB  75 2A				jne	short @f
 07ED  AC				lodsb
 07EE  0A C0				or	al, al
 07F0  75 25				jnz	short @f
 07F2				namei_sf1:
 07F2  89 36 27BC R			mov	word ptr [u_namep], si
 07F6  AC				lodsb
 07F7  3C 20				cmp	al, 20h
 07F9  74 F7				je	short namei_sf1
 07FB  72 1A				jb	short @f
 07FD				namei_sf2:
 07FD  AC				lodsb
 07FE  3C 20				cmp	al, 20h
 0800  77 FB				ja	short namei_sf2
 0802  4E				dec	si
 0803  32 C0				xor	al, al
 0805  88 04				mov	byte ptr [SI], al
 0807				namei_fsf:
 0807  E8 09ED				call	namei
 080A  73 0C				jnc	short namei_iget
 080C  80 FC FF				cmp	ah, 0FFh
					;jb	ci_error
					; 27/03/2022
 080F  72 0C				jb	short loc_namei_err	

 0811  BE 29AB R			mov	si, offset NotFound_msg
 0814  E8 FAAD				call	PRINT_MSG
 0817				@@:
 0817  C3				retn

 0818				namei_iget:
 0818  E8 0B03				call	iget
					;jc	ci_error
					; 27/03/2022
 081B  73 02				jnc	short namei_print_inum
 081D				loc_namei_err:
 081D				loc_inode_err:
 081D  EB 7C				jmp	ci_error

 081F				namei_print_inum:
 081F  8B C8				mov	cx, ax
 0821  BE 29BB R			mov	si, offset msgINumber
 0824  E8 FA9D				call	PRINT_MSG	
 0827  8B C1				mov	ax, cx
 0829  B9 0003				mov	cx, 3
 082C  E8 16D6				call	print_decimal_number
 082F  BE 262C R			mov	si, offset UNIX_CRLF
					;call	PRINT_MSG
					;retn
					; 27/03/2022
 0832  E9 FA8F				jmp	PRINT_MSG

				; INODE	; 17/02/2013, print inode structure/details
 0835				loc_cmd_inode:
 0835  3D 6E69				cmp	ax, 'ni'
 0838  75 DD				jne	short @b
 083A  AD				lodsw
 083B  3D 646F				cmp	ax, 'do'
 083E  75 D7				jne	short @b
 0840  AC				lodsb	
 0841  3C 65				cmp	al, 'e'	
 0843  75 D2				jne	short @b
 0845  AC				lodsb
 0846  0A C0				or	al, al
 0848  75 CD				jnz	short @b
 084A				inode_getarg1:
 084A  8B DE				mov	bx, si
 084C  AC				lodsb
 084D  3C 20				cmp	al, 20h
 084F  74 F9				je	short inode_getarg1
 0851  77 05				ja	short inode_getarg2
 0853  A1 27DA R			mov	ax, word ptr [ii]
 0856  EB 0C				jmp	short @f
 0858				inode_getarg2:
 0858  AC				lodsb
 0859  3C 20				cmp	al, 20h
 085B  77 FB				ja	short inode_getarg2
 085D  4E				dec	si
 085E  33 C0				xor	ax, ax
 0860  88 04				mov	byte ptr [SI], al
 0862  8B F3				mov	si, bx
 0864				@@:
 0864  E8 17B1				call	show_inode
					;jc	ci_error
					; 27/03/2022
 0867  72 B4				jc	short loc_inode_err
 0869				@@:	
 0869  C3				retn

 086A				cl3:
 086A  80 F9 03				cmp	cl, 3
 086D  72 54				jb	short cl2
				; DIR
 086F				loc_cmd_dir:	; 05/01/2013 @b->@f, dir_print modifications
 086F  3D 6964				cmp	ax, 'id'
					;jne	short @f
 0872  75 3A				jne	short cls
 0874  AC				lodsb
 0875  3C 72				cmp	al, 'r'
 0877  75 28				jne	short @f
 0879  AC				lodsb
 087A  0A C0				or	al, al
 087C  75 23				jnz	short @f
 087E  A2 28DE R			mov	byte ptr [ls_option], al ; 20/01/2013
 0881				dir_getarg:	; 30/12/2012
 0881  AC				lodsb
 0882  3C 20				cmp	al, 20h
 0884  74 FB				je	short dir_getarg
 0886  73 04				jnb	short dir_namei
 0888				ls_getarg3:
 0888  33 C0				xor	ax, ax
 088A  EB 0A				jmp	short dir_print
 088C				dir_namei:      ; 30/12/2012
 088C  4E				dec	si
 088D  89 36 27BC R			mov	word ptr [u_namep], si
					;call	namei
 0891  E8 0967				call	namei_x ; 02/10/2019	
 0894  72 05				jc	short ci_error
					;ax = i-number
 0896				dir_print:
 0896  E8 046E				call	print_directory_list
 0899  73 06				jnc	short @f
 089B				ci_error:
 089B  BE 2623 R			mov	si, offset error_msg
 089E  E8 FA23				call	PRINT_MSG
 08A1				@@:	
 08A1  C3				retn

				; 23/02/2013
 08A2				cl1:
 08A2  3C 3F				cmp	al, '?'
 08A4  75 FB				jne	short @b
 08A6  80 FC 00				cmp	ah, 0
					;je	ci_?
					; 27/03/2022
					;jne	short @f
 08A9  75 F6				jne	short @b
 08AB  E9 FC52				jmp	ci_?
				;@@:	
				;	retn

 08AE				cls:
				; 25/09/2019 - Retro UNIX 386 v2 ('cls' command)
 08AE  3D 6C63				cmp	ax,'lc'
 08B1  75 EE				jne	short @b
 08B3  AC				lodsb
 08B4  3C 73				cmp	al,'s'
 08B6  75 E9				jne	short @b
 08B8  AC				lodsb
 08B9  22 C0				and	al, al
 08BB  75 E4				jnz	short @b

					; clear screen.. (by setting video mode to 3 again) 		
 08BD  B8 0003				mov	ax, 3
 08C0  CD 10				int	10h
 08C2  C3				retn

				; 16/12/2012
 08C3				cl2:
 08C3  80 F9 02				cmp	cl, 2
 08C6  72 DA				jb	short cl1 ; 23/02/2013
					;jb	@b
				; CD (CHDIR)
 08C8				loc_cmd_cd:
 08C8  3D 6463				cmp	ax, 'dc'
 08CB  75 08				jne	short loc_cmd_ls
 08CD  AC				lodsb
 08CE  0A C0				or	al, al
 08D0  75 CF				jnz	short @b
 08D2  E9 FC52				jmp	ci_cd_getarg
				; LS (DIR)
 08D5				loc_cmd_ls:	; 20/01/2013
 08D5  3D 736C				cmp	ax, 'sl'
 08D8  75 2B				jne	short loc_cmd_rm
 08DA  AC				lodsb
 08DB  0A C0				or	al, al
 08DD  75 C2				jnz	short @b
 08DF  C6 06 28DE R 01			mov	byte ptr [ls_option], 1
 08E4				ls_getarg1:	; 21/01/2013
 08E4  AC				lodsb
 08E5  3C 20				cmp	al, 20h
 08E7  74 FB				je	short ls_getarg1
 08E9  72 9D				jb	short ls_getarg3
 08EB				ls_getarg2:
 08EB  3C 2D				cmp	al,'-'
 08ED  75 9D				jne	short dir_namei
 08EF  AC				lodsb
 08F0  3C 6C				cmp	al, 'l' ; ls -l ?
 08F2  75 94				jne	short ls_getarg3
 08F4				ls_getarg4:
 08F4  AC				lodsb
 08F5  FE 06 28DE R			inc	byte ptr [ls_option]
 08F9  3C 20				cmp	al, 20h
 08FB  74 84				je	short dir_getarg
 08FD  72 89				jb	short ls_getarg3
 08FF  FE 0E 28DE R			dec	byte ptr [ls_option]
 0903  EB 83				jmp	short ls_getarg3
				; RM
 0905				loc_cmd_rm:	
 0905  3D 6D72				cmp	ax, 'mr'
 0908  74 03 E9 00B8			jne	loc_cmd_fs ; 16/02/2013
 090D  AC				lodsb
 090E  0A C0				or	al, al
 0910  75 8F				jnz	short @b
 0912				rm_getarg:
 0912  89 36 27BC R			mov	word ptr [u_namep], si
 0916  AC				lodsb
 0917  3C 20				cmp	al, 20h
 0919  74 F7				je	short rm_getarg
 091B  72 84				jb	short @b
 091D				rm_namei:
 091D  E8 08D7				call	namei
					;jc	ci_error
					; 27/03/2022
 0920  72 33				jc	short loc_rm_err

					;cmp	word ptr [ii], 41 ; i-number of the directory
	;jne	short @f

 0922  BE 31A2 R			mov	si, offset BSBuffer + bs_bf_inode_num
 0925  3B 04				cmp	ax, word ptr [si] ; is it i-number of the boot file
					;je	short ci_error
 0927  75 0B				jne	short @f

					;cmp	word ptr [ii], 41 ; i-number of root directory
 0929  83 3E 27DA R 01			cmp	word ptr [ii], 1 ; 25/09/2019 - Retro UNIX 386 v2
					;je	ci_error
					; 27/03/2022
 092E  74 25				je	short loc_rm_err

 0930  C7 04 0000			mov	word ptr [si], 0  ; reset wrong boot file configuration
 0934				@@:	
 0934  A3 276E R			mov	word ptr [uf_i_number], ax ; word ptr [u_dirbuf]
					; 05/01/2013
 0937  8B 16 27DA R			mov	dx, word ptr [ii]
 093B  89 16 2497 R			mov	word ptr [pdir], dx
 093F  E8 09DC				call	iget
					;jc	ci_error
					; 27/03/2022
 0942  72 11				jc	short loc_rm_err

 0944  A1 2770 R			mov	ax, word ptr [inode_flgs]
					; 25/09/2019 - Retro UNIX 386 v2
					;	(modified unix v7 inode format)
 0947  F6 C4 80				test	ah, 80h
					;jz	ci_error ; not regular file or directory
					; 27/03/2022
 094A  74 09				jz	short loc_rm_err
					
 094C  F6 C4 40				test	ah, 40h	; 'directory' flag
					;jnz	ci_error
					; 27/03/2022
 094F  75 04				jnz	short loc_rm_err	

 0951  A8 80				test	al, 80h  ; owner's write permission
					;jz	ci_error ; read only file !
					; 27/03/2022
 0953  75 03				jnz	short rm_move_fn
 0955				loc_rm_err:
 0955  E9 FF43				jmp	ci_error

 0958				rm_move_fn:
 0958  BE 27CC R			mov	si, offset u_dirbuf + 2
 095B  BF 275B R			mov	di, offset Boot_File_Name
 095E  B9 000E				mov	cx, 14  ; 04/12/2015 (8 -> 14)
 0961				@@:
 0961  AC				lodsb
 0962  22 C0				and	al, al
 0964  74 05				jz	short @f
 0966  AA				stosb
 0967  E2 F8				loop	@b
 0969  32 C0				xor	al, al ; 06/01/2013
 096B				@@:
 096B  88 05				mov	byte ptr [di], al ; 0

 096D  BE 2726 R			mov	si, offset msg_remove_question1
 0970  E8 F951				call	PRINT_MSG
 0973  BE 275B R			mov	si, Offset Boot_File_Name
 0976  E8 F94B				call	PRINT_MSG
 0979  BE 2740 R			mov	si, offset msg_remove_question2
 097C  E8 F945				call	PRINT_MSG
 097F  BE 249F R			mov	si, offset msg_yes_no
 0982  E8 F93F				call	PRINT_MSG
 0985				rm_yn_input:	; ask for remove
 0985  33 C0				xor	ax, ax
 0987  CD 16				int	16h	; wait for keyboard command
 0989  3C 03				cmp	al, 'C'-40h
 098B  74 1A				je	short @f	   
 098D  3C 1B				cmp	al, 27
 098F  74 16				je	short @f
 0991  24 DF				and	al, 0DFh
 0993  3C 59				cmp	al, 'Y'	; Yes?
 0995  74 11				je	short rm_a_yes  ; overwrite
 0997  3C 4E				cmp	al, 'N'	; No?
 0999  75 EA				jne	short rm_yn_input         
 099B				rm_a_no:
 099B  BE 261F R			mov	si, offset msg_No
 099E  E8 F923				call	PRINT_MSG
 09A1  BE 262C R			mov	si, offset UNIX_CRLF
 09A4  E8 F91D				call	PRINT_MSG
 09A7				@@:
 09A7  C3				retn
 09A8				rm_a_yes:
 09A8  BE 261A R			mov	si, offset msg_YES
 09AB  E8 F916				call	PRINT_MSG
 09AE  BE 262C R			mov	si, offset UNIX_CRLF
 09B1  E8 F910				call	PRINT_MSG
 09B4				rm_unlink:
 09B4  BE 25D3 R			mov	si, offset Msg_removing_file
 09B7  E8 F90A				call	PRINT_MSG

 09BA  A1 276E R			mov	ax, word ptr [uf_i_number]
 09BD  E8 0723				call	unlink
					;jc	ci_error
					; 27/03/2022
 09C0  72 93				jc	short loc_rm_err
					
 09C2  E9 01DF				jmp	ci_sync_exit

				; FS (Volume)  ; 16/02/2013   (File System / Volume Info)
 09C5				loc_cmd_fs:	
 09C5  3D 7366				cmp	ax, 'sf'
 09C8  75 DD				jne	short @b
 09CA  AC				lodsb
 09CB  0A C0				or	al, al
 09CD  75 D8				jnz	short @b
 09CF				vol_infO_print:
 09CF				fs_info_print:
 09CF  E8 1598				call	print_volume_info
 09D2				@@:
 09D2  C3				retn
 09D3				cl6: ; 16/02/2013	
 09D3  80 F9 06				cmp	cl, 6
 09D6  75 FA				jne	short @b 

				; VOLUME (fs)  ; 16/02/2013
 09D8				loc_cmd_volume:
 09D8  3D 6F76				cmp	ax, 'ov'
 09DB  75 F5				jne	short @b
 09DD  AD				lodsw
 09DE  3D 756C				cmp	ax, 'ul'
 09E1  75 EF				jne	short @b
 09E3  AD				lodsw
 09E4  3D 656D				cmp	ax, 'em'
 09E7  75 E9				jne	short @b
 09E9  AC				lodsb
 09EA  0A C0				or	al, al
 09EC  74 E1				jz	short vol_infO_print
 09EE				@@:
 09EE  C3				retn
				; 15/12/2012
 09EF				cl7:
 09EF  80 F9 07				cmp	cl, 7
					;jb	short cl6 ; 16/02/2013
					;ja	cl8
					; 27/03/2022
 09F2  74 05				je	short loc_cmd_fromdos
 09F4  72 DD				jb	short cl6
 09F6  E9 01C0				jmp	cl8
				; FROMDOS
 09F9				loc_cmd_fromdos:
 09F9  3D 7266				cmp	ax, 'rf'
 09FC  75 F0				jne	short @b
 09FE  AD				lodsw
 09FF  3D 6D6F				cmp	ax, 'mo'
 0A02  75 EA				jne	short @b
 0A04  AD				lodsw
 0A05  3D 6F64				cmp	ax, 'od'
 0A08  75 E4				jne	short @b
 0A0A  AC				lodsb	
 0A0B  3C 73				cmp	al, 's'	
 0A0D  75 DF				jne	short @b
 0A0F  AC				lodsb
 0A10  0A C0				or	al, al
 0A12  75 DA				jnz	short @b
 0A14				fromdos_df1:
 0A14  89 36 249B R			mov	word ptr [arg], si
 0A18  AC				lodsb
 0A19  3C 20				cmp	al, 20h
 0A1B  74 F7				je	short fromdos_df1
 0A1D  72 CF				jb	short @b
 0A1F				fromdos_df2:
 0A1F  AC				lodsb
 0A20  3C 20				cmp	al, 20h
 0A22  77 FB				ja	short fromdos_df2
 0A24  32 C0				xor	al, al
 0A26  88 44 FF				mov	byte ptr [si]-1, al
 0A29				fromdos_uf1:
 0A29  89 36 27BC R			mov	word ptr [u_namep], si
 0A2D  AC				lodsb
 0A2E  3C 20				cmp	al, 20h
 0A30  74 F7				je	short fromdos_uf1
 0A32  72 BA				jb	short @b
 0A34				fromdos_uf2:
 0A34  AC				lodsb
 0A35  3C 20				cmp	al, 20h
 0A37  77 FB				ja	short fromdos_uf2
 0A39  4E				dec	si
 0A3A  32 C0				xor	al, al
 0A3C  88 04				mov	byte ptr [si], al
 0A3E				fromdos_fdf:
 0A3E  8B 16 249B R			mov	dx, word ptr [arg]
 0A42  B9 0027				mov	cx, 27h ; File Attributes
 0A45  B4 4E				mov	ah, 4Eh ; MS DOS Function = Find First File
 0A47  CD 21				int	21h
					;jc	ci_error ; file not found
					; 27/03/2022
 0A49  73 03				jnc	short fromdos_fuf
 0A4B				fromdos_err:
 0A4B  E9 FE4D				jmp	ci_error
					
 0A4E				fromdos_fuf:
 0A4E  E8 07A6				call	namei
 0A51  73 0D				jnc	short @f

 0A53  80 FC FF				cmp	ah, 0FFh
					;jne	ci_error
					; 27/03/2022
 0A56  75 F3				jne	short fromdos_err
					
 0A58  33 C0				xor	ax, ax
 0A5A  A3 276E R			mov	word ptr [uf_i_number], ax
 0A5D  E9 0080				jmp	fromdos_s_fs_mdt
 0A60				@@:
 0A60  A3 276E R			mov	word ptr [uf_i_number], ax
					; 30/09/2019
					; 05/01/2013
					;mov	dx, word ptr [ii]
					;mov	word ptr [pdir], dx
 0A63  E8 08B8				call	iget
					;jc	ci_error
					; 27/03/2022
 0A66  72 E3				jc	short fromdos_err

 0A68  A1 2770 R			mov	ax, word ptr [inode_flgs]
					; 25/09/2019 - Retro UNIX 386 v2
					;	(modified unix v7 inode format)
 0A6B  F6 C4 80				test	ah, 80h
					;jz	ci_error  ; not regular file or directory
					; 27/03/2022
 0A6E  74 DB				jz	short fromdos_err
					
 0A70  F6 C4 40				test	ah, 40h ; 'directory' flag
					;jnz	ci_error
					; 27/03/2022
 0A73  75 D6				jnz	short fromdos_err

 0A75  A8 80				test	al, 80h ; owner's write permission
					;jz	ci_error  ; read only file !
					; 27/03/2022
 0A77  74 D2				jz	short fromdos_err

 0A79				fromdos_afow:
 0A79  BE 27CC R			mov	si, offset u_dirbuf + 2
 0A7C  BF 275B R			mov	di, offset Boot_File_Name
 0A7F  B9 000E				mov	cx, 14 ; 04/12/2015 (8 -> 14)
 0A82				@@:
 0A82  AC				lodsb
 0A83  22 C0				and	al, al
 0A85  74 05				jz	short @f
 0A87  AA				stosb
 0A88  E2 F8				loop	@b
 0A8A  32 C0				xor	al, al ; 01/03/2013
 0A8C				@@:
 0A8C  88 05				mov	byte ptr [di], al ; 0

 0A8E  BE 2701 R			mov	si, offset msg_overwrite_question1
 0A91  E8 F830				call	PRINT_MSG
 0A94  BE 275B R			mov	si, Offset Boot_File_Name
 0A97  E8 F82A				call	PRINT_MSG
 0A9A  BE 271E R			mov	si, offset msg_overwrite_question2
 0A9D  E8 F824				call	PRINT_MSG
 0AA0  BE 249F R			mov	si, offset msg_yes_no
 0AA3  E8 F81E				call	PRINT_MSG
 0AA6				fromdos_afow_input:  ; ask for overwrite
 0AA6  33 C0				xor	ax, ax
 0AA8  CD 16				int	16h		; wait for keyboard command
 0AAA  3C 03				cmp	al, 'C'-40h
 0AAC  74 1A				je	short @f	   
 0AAE  3C 1B				cmp	al, 27
 0AB0  74 16				je	short @f
 0AB2  24 DF				and	al, 0DFh
 0AB4  3C 59				cmp	al, 'Y'			; Yes?
 0AB6  74 11				je	short fromdos_afow_yes	; overwrite
 0AB8  3C 4E				cmp	al, 'N'			; No?
 0ABA  75 EA				jne	short fromdos_afow_input         
 0ABC				fromdos_afow_no:
 0ABC  BE 261F R			mov	si, offset msg_No
 0ABF  E8 F802				call	PRINT_MSG
 0AC2  BE 262C R			mov	si, offset UNIX_CRLF
 0AC5  E8 F7FC				call	PRINT_MSG
 0AC8				@@:
 0AC8  C3				retn
 0AC9				fromdos_afow_yes:
 0AC9  BE 261A R			mov	si, offset msg_YES
 0ACC  E8 F7F5				call	PRINT_MSG
 0ACF  BE 262C R			mov	si, offset UNIX_CRLF
 0AD2  E8 F7EF				call	PRINT_MSG
 0AD5				fromdos_uf_itrunc:
					; 30/09/2019
					; 05/01/2013
					;mov	ax, word ptr [pdir]
					;call	iget
					;jc	ci_error
					;
 0AD5  A1 276E R			mov	ax, word ptr [uf_i_number]
 0AD8  E8 1220				call	itrunc ; truncate file
					;jc	ci_error
					; 27/03/2022
 0ADB  73 03				jnc	short fromdos_s_fs_mdt
 0ADD  E9 FDBB				jmp	ci_error

 0AE0				fromdos_s_fs_mdt:
					; 15/12/2012
					; Derived from UNIXBOOT.ASM (30/11/2012)

					; 14/01/2020 (32 bit file size permission)
					;;mov 	si, DTA_FileSize
					;mov	si, DTA_FileSize+2
					;;mov	ax, word ptr [si]
					;;mov 	dx, word ptr [si]+2
					      ;;or  ax, dx  ; 64KB file size limit
					;mov	ax, word ptr [si]
					;and	ax, ax
					;jnz	ci_error

					;mov 	word ptr [file_Size], ax

 0AE0  BE 0098				mov     si, DTA_Date
 0AE3  8B 04				mov 	ax, word ptr [si]
 0AE5  50				push 	ax
 0AE6  83 E0 1F				and 	ax, 00011111b	 ; Day Mask
 0AE9  A3 27E6 R			mov 	word ptr [day], ax
 0AEC  58				pop 	ax
 0AED  B1 05			     	mov     cl, 5
 0AEF  D3 E8				shr     ax, cl	   ; shift right 5 times
 0AF1  50				push 	ax 
 0AF2  83 E0 0F				and     ax, 00001111b	; Month Mask
 0AF5  A3 27E4 R		  	mov 	word ptr [month], ax
 0AF8  58				pop 	ax
 0AF9  B1 04				mov     cl, 4
 0AFB  D3 E8				shr     ax, cl
					;and	ax, 01111111b	; Result = Year - 1980
 0AFD  05 07BC				add     ax, 1980
 0B00  A3 27E2 R			mov     word ptr [year], ax
				 		
 0B03  BE 0096				mov     si, DTA_Time
 0B06  8B 04				mov 	ax, word ptr [si]
 0B08  50				push 	ax
 0B09  83 E0 1F				and     ax, 0000011111b	; Second Mask
 0B0C  D0 E0				shl 	al, 1	
 0B0E  A3 27EC R			mov     word ptr [second], ax
 0B11  58				pop 	ax
 0B12  B1 05				mov     cl, 5
 0B14  D3 E8				shr     ax, cl	   ; shift right 5 times
 0B16  50				push	ax
 0B17  83 E0 3F				and     ax, 0000111111b	; Minute Mask
 0B1A  A3 27EA R			mov     word ptr [minute], ax
 0B1D  58				pop 	ax
 0B1E  B1 06				mov	cl, 6		; shift right 6 times
 0B20  D3 E8				shr     ax, cl	   ; (6+5=11)
 0B22  A3 27E8 R			mov     word ptr [hour], ax	; ax = hours	
				           
 0B25  E8 0D70				call	convert_to_epoch

 0B28  A3 276A R			mov	word ptr [uf_make_datetime], ax
 0B2B  89 16 276C R			mov	word ptr [uf_make_datetime]+2, dx
 0B2F				fromdos_odf:
 0B2F  8B 16 249B R			mov	dx, word ptr [arg]
 0B33  B4 3D				mov	ah, 3Dh ; MS DOS Function = Open File
 0B35  32 C0				xor	al, al  
 0B37  CD 21				int	21h
					;jc	ci_error
					; 27/03/2022
 0B39  73 03				jnc	short @f
 0B3B				fromdos_odf_err:	
 0B3B  E9 FD5D				jmp	ci_error
 0B3E				@@:
 0B3E  A3 27DC R			mov	word ptr [FileHandle], ax

 0B41  A1 276E R			mov	ax, word ptr [uf_i_number]
					; 23/02/2013
 0B44  23 C0				and	ax, ax
 0B46  74 07				jz	short @f
					;jnz	short fromdos_wf_msg  ;@f
 0B48  33 C0				xor	ax, ax
 0B4A  E8 04A0				call	fromdos_maknod
					; 27/03/2022
					; (As result of adding [uf_i_number] check code in maknod,
					;  increasing free inode count here is not needed.)
					; ((otherwise, free inode count would need to be increased
					;   again; because maknod was decreasing it
					;   -before this modification-))
					; 27/03/2022	
					;inc	word ptr [systm.sb_FreeInodes]  ; (bugfix)

 0B4D  EB 0B				jmp	short fromdos_wf_msg

 0B4F				@@: ; fromdos_mknod:
					;mov	ax, i_flags ; 1Eh (unix v1), 01EDh (Runix v2)
					; 25/09/2019 - Retro UNIX 386 v2
 0B4F  B8 81ED				mov	ax, 81EDh ; (1000000111101101b)	
 0B52  E8 043E				call	mak_nod
 0B55  72 36				jc	short fromdos_cf
					; 04/01/2020
 0B57  A3 276E R			mov	word ptr [uf_i_number], ax
 0B5A				fromdos_wf_msg:
 0B5A  BE 25C1 R			mov	si, offset Msg_writing_file
 0B5D  E8 F764				call	PRINT_MSG
 0B60				@@:	; 16/12/2012
 0B60  33 C0				xor	ax, ax 
 0B62  A3 27C2 R			mov	word ptr [u_off], ax
					; 20/01/2020
 0B65  A3 27C4 R			mov	word ptr [u_off+2], ax
 0B68				@@:
				;loc_read_dos_sf:	
 0B68  B4 3F				mov	ah, 3Fh ; Read File
 0B6A  B9 0200				mov	cx, 512
 0B6D  BA 3990 R			mov	dx, offset ReadBuffer
 0B70  8B 1E 27DC R			mov	bx, word ptr [FileHandle]
 0B74  CD 21				int	21h
 0B76  72 15				jc	short fromdos_cf

 0B78  0B C0				or	ax, ax
 0B7A  74 11				jz	short fromdos_cf
					
 0B7C  A3 27C6 R			mov	word ptr [u_count], ax

 0B7F  C7 06 27C0 R 3990 R		mov	word ptr [u_base], offset ReadBuffer

 0B85  A1 276E R			mov	ax, word ptr [uf_i_number] ; word ptr [u_dirbuf]
 0B88  E8 0B22				call	writei
 0B8B  73 DB				jnc	short short @b ; loc_read_dos_sf
 0B8D				fromdos_cf:
 0B8D  9C				pushf
 0B8E  B4 3E				mov	ah, 3Eh ; Close File
 0B90  8B 1E 27DC R			mov	bx, word ptr [FileHandle]
 0B94  CD 21				int	21h
 0B96  9D				popf
					;jc	ci_error
					; 27/03/2022
 0B97  72 10				jc	short fromdos_cf_err
 0B99				@@:
					; 23/02/2013
 0B99  33 C0				xor	ax, ax
 0B9B  A3 27A8 R			mov	word ptr [inode_mtim], ax
 0B9E  A3 27AA R			mov	word ptr [inode_mtim]+2, ax
					
					; 20/09/2019 - Retro UNIX v2
					;mov	word ptr [inode_atim], ax
					;mov	word ptr [inode_atim]+2, ax

 0BA1  E8 0A2B				call	setimod
 0BA4				ci_sync_exit:
 0BA4  E8 0E0E				call	sync
					;jc	ci_error
					; 27/03/2022
 0BA7  73 03				jnc	short fromdos_retn
 0BA9				fromdos_cf_err:
 0BA9				fromdos_sync_err:
 0BA9  E9 FCEF				jmp	ci_error

 0BAC				fromdos_retn:
 0BAC  BE 2613 R			mov	si, offset Msg_OK
 0BAF  E8 F712				call	PRINT_MSG

 0BB2  BE 262C R			mov	si, offset UNIX_CRLF
 0BB5  E8 F70C				call	PRINT_MSG
 0BB8				@@:	
 0BB8  C3				retn
 0BB9				cl8:
 0BB9  80 F9 08				cmp	cl, 8
					;;jb	short @b
					;ja	cl10
					; 27/03/2022
 0BBC  76 03				jna	short loc_cmd_bootfile
 0BBE  E9 0080				jmp	cl10
				; BOOTFILE
 0BC1				loc_cmd_bootfile:
 0BC1  3D 6F62				cmp	ax, 'ob'
 0BC4  75 F2				jne	short @b
 0BC6  AD				lodsw
 0BC7  3D 746F				cmp	ax, 'to'
 0BCA  75 EC				jne	short @b
 0BCC  AD				lodsw
 0BCD  3D 6966				cmp	ax, 'if'
 0BD0  75 E6				jne	short @b
 0BD2  AD				lodsw	
 0BD3  3D 656C				cmp	ax, 'el'	
 0BD6  75 E0				jne	short @b
 0BD8  AC				lodsb
 0BD9  0A C0				or	al, al
 0BDB  75 DB				jnz	short @b
 0BDD				@@:
 0BDD  89 36 27BC R			mov	word ptr [u_namep], si
 0BE1  AC				lodsb
 0BE2  3C 20				cmp	al, 20h
 0BE4  74 F7				je	short @b
 0BE6  77 2D				ja	short ci_bf_namei

 0BE8  BE 31A2 R			mov	si, offset BSBuffer + bs_bf_inode_num
 0BEB  8B 04				mov	ax, word ptr [si]
 0BED  23 C0				and	ax, ax
 0BEF  75 06				jnz	short @f
 0BF1				ci_no_bootfile:	
 0BF1  BE 2681 R			mov	si, offset msg_Startup_File_Not_Exists
					;call	PRINT_MSG
					;retn
					; 20/09/2019
 0BF4  E9 F6CD				jmp	PRINT_MSG	
 0BF7				@@:
 0BF7  E8 0F32				call	find_bfn
					;jc	ci_error
					; 27/03/2022
 0BFA  73 03				jnc	short ci_move_bfn_1
 0BFC				loc_bootfile_err:
 0BFC  E9 FC9C				jmp	ci_error

 0BFF				ci_move_bfn_1:
 0BFF  BE 27CC R			mov	si, offset u_dirbuf + 2
 0C02  BF 275B R			mov	di, offset Boot_File_Name
 0C05  B9 000E				mov	cx, 14 ; ; 04/12/2015 (8 -> 14)
 0C08				ci_move_bfn_2:
 0C08  AC				lodsb
					; 04/12/2015
 0C09  22 C0				and	al, al
 0C0B  74 03				jz	short ci_move_bfn_3
 0C0D  AA				stosb
 0C0E  E2 F8				loop	ci_move_bfn_2
 0C10				ci_move_bfn_3:
 0C10  88 05				mov	byte ptr [di], al ; 0
					;
					;call	proc_display_startupfile_info
					;retn
					; 20/09/2019
 0C12  E9 0F58				jmp	proc_display_startupfile_info	
 0C15				ci_bf_namei:
 0C15  E8 05DF				call	namei
					;jc	ci_error
					; 27/03/2022
 0C18  72 E2				jc	short loc_bootfile_err
					
 0C1A  83 3E 27DA R 01			cmp	word ptr [ii], ROOT_DIR_INODE_NUMBER
					;jne	ci_error
					; 27/03/2022
 0C1F  75 DB				jne	short loc_bootfile_err

					; 05/01/2013
					; ax = i-number of (new) boot file
 0C21  E8 06FA				call	iget
					;jc	ci_error
					; 27/03/2022
 0C24  72 D6				jc	short loc_bootfile_err

					;test	word ptr [inode_flgs], 4000h ; directory ?
 0C26  F6 06 2771 R 40			test	byte ptr [inode_flgs+1], 40h ; 25/09/2019
					;jnz	ci_error
					; 27/03/2022
 0C2B  75 CF				jnz	short loc_bootfile_err	

					;test	byte ptr [inode_flgs+1], 80h ; 25/09/2019
					;jnz	ci_error
				;@@:
					;mov	si, offset BSBuffer.bs_bf_inode_num ; 20/01/2020
					;mov	word ptr [si], ax

					; 22/01/2020
					; write boot (startup) file inode number into boot sector
					
 0C2D  A3 31A2 R			mov	word ptr [BSBuffer.bs_bf_inode_num], ax

					; 20/01/2020
 0C30  C6 06 28EF R FF			mov	byte ptr [bmod], 0FFh ; boot sector modified!

 0C35  E8 0D7D				call	sync
					;jc	ci_error
					; 27/03/2022
 0C38  72 C2				jc	short loc_bootfile_err

 0C3A  BE 26AB R			mov	si, offset msg_sf_configuration_set_ok
					;call	PRINT_MSG
				;@@:
					;retn
					; 20/09/2019
 0C3D  E9 F684				jmp	PRINT_MSG
 0C40				@@:
					; 22/01/2020
 0C40  C3				retn 	
 0C41				cl10:
 0C41  80 F9 0A				cmp	cl, 10
					;jne	short @f
 0C44  75 FA				jne	short @b ; 22/01/2020 
				; NOBOOTFILE
 0C46				loc_cmd_nobootfile:
 0C46  3D 6F6E				cmp	ax, 'on'
					;jne	short @f
 0C49  75 F5				jne	short @b ; 22/01/2020 
 0C4B  AD				lodsw
 0C4C  3D 6F62				cmp	ax, 'ob'
					;jne	short @f
 0C4F  75 EF				jne	short @b ; 22/01/2020 
 0C51  AD				lodsw
 0C52  3D 746F				cmp	ax, 'to'
					;jne	short @f
 0C55  75 E9				jne	short @b ; 22/01/2020 
 0C57  AD				lodsw
 0C58  3D 6966				cmp	ax, 'if'
					;jne	short @f
 0C5B  75 E3				jne	short @b ; 22/01/2020 
 0C5D  AD				lodsw	
 0C5E  3D 656C				cmp	ax, 'el'	
					;jne	short @f
 0C61  75 DD				jne	short @b ; 22/01/2020 
 0C63  AC				lodsb
 0C64  0A C0				or	al, al
					;jnz	short @f
 0C66  75 D8				jnz	short @b ; 22/01/2020 

 0C68  BE 31A2 R			mov	si, offset BSBuffer.bs_bf_inode_num ; 20/01/2020

					; 22/01/2020
 0C6B  8B 04				mov	ax, word ptr [si]	

 0C6D  23 C0				and	ax, ax
					;jz	ci_no_bootfile
					; 27/03/2022
 0C6F  75 03				jnz	short @f
 0C71  E9 FF7D				jmp	ci_no_bootfile
 0C74				@@:
					; 22/01/2020
					; clear boot (startup) file inode number in boot sector
					
					; 22/01/2020
 0C74  C6 06 28EF R FF			mov	byte ptr [bmod], 0FFh ; boot sector modified!

 0C79  33 C0				xor	ax, ax
 0C7B  89 04				mov	word ptr [si], ax ; 0
 0C7D  E8 0D35				call	sync
					;jc	ci_error
					; 27/03/2022
 0C80  73 03				jnc	short @f
 0C82  E9 FC16				jmp	ci_error
 0C85				@@:
 0C85  BE 26D5 R			mov	si, msg_sf_configuration_reset_ok

					; 22/01/2020
					;call	PRINT_MSG
				;@@:
					;retn
					; 22/01/2020
 0C88  E9 F639				jmp	PRINT_MSG	

 0C8B				command_interpreter endp

 0C8B				update_cdir_string proc near
					; 13/01/2013 bugfix
					; 10/12/2012
					; 09/12/2012
					; input -> SI= chdir argument
 0C8B				ucds_0:
 0C8B  BB 2421 R			mov	bx, offset unix_cdir
 0C8E  43				inc	bx ; 13/01/2013
 0C8F  8B FB				mov	di, bx
 0C91  AC				lodsb
 0C92  3C 2F				cmp	al, '/'
 0C94  75 08				jne	short @f
 0C96  33 D2				xor	dx, dx
 0C98  89 16 2447 R			mov	word ptr [CDirOffset], dx
 0C9C  EB 11				jmp	short ucds_6
 0C9E				@@:
 0C9E  8B 16 2447 R			mov	dx, word ptr [CDirOffset]
					; 13/01/2013
 0CA2  0B D2				or	dx, dx
 0CA4  74 0E				jz	short @f
 0CA6  03 FA				add	di, dx
 0CA8  C6 05 2F				mov	byte ptr [DI], '/'
 0CAB  47				inc	di
					;
 0CAC  EB 06				jmp	short @f
 0CAE				ucds_8:
 0CAE  47				inc	di
 0CAF				ucds_6:
 0CAF  AC				lodsb
 0CB0  3C 2F				cmp	al, '/'
 0CB2  74 FB				je	short ucds_6
 0CB4				@@:
 0CB4  0A C0				or	al, al
 0CB6  74 39				jz	short ucds_5
 0CB8  3C 2E				cmp	al, '.'
 0CBA  75 2B				jne	short ucds_3
 0CBC  AC				lodsb
 0CBD  3C 2E				cmp	al, '.'
 0CBF  74 0F				je	short ucds_2 ; dotdot
 0CC1				ucds_1: ;dot
 0CC1  3C 2F				cmp	al, '/'
 0CC3  74 EA				je	short ucds_6
 0CC5  0A C0				or	al, al
 0CC7  74 28				jz	short ucds_5
 0CC9  B4 2E				mov	ah, '.'
 0CCB  86 E0				xchg	ah, al
 0CCD  AB				stosw
 0CCE  EB DF				jmp	short ucds_6
 0CD0				ucds_2: ; dotdot
 0CD0  3B FB				cmp	di, bx
 0CD2  77 06				ja	short @f
 0CD4  33 D2				xor	dx, dx
 0CD6  88 15				mov	byte ptr [DI], dl ; 0
 0CD8  EB 28				jmp	short ucds_7
 0CDA				@@: ; 13/01/2013
 0CDA  4F				dec	di
 0CDB				@@: ; move back
 0CDB  4F				dec	di ; 13/01/2013
 0CDC  8A 05				mov	al, byte ptr [DI]
 0CDE  3C 2F			        cmp	al, '/'
 0CE0  75 F9				jne	short @b ; 13/01/2013
 0CE2  EB CA				jmp	short ucds_8
 0CE4				ucds_4:
 0CE4  AA				stosb
 0CE5  EB C8				jmp	short ucds_6
 0CE7				ucds_3:
 0CE7  AA				stosb
 0CE8  AC				lodsb
 0CE9  3C 2F				cmp	al, '/'
 0CEB  74 F7				je	short ucds_4
 0CED  22 C0				and	al, al
 0CEF  75 F6				jnz	short ucds_3
 0CF1				ucds_5: ; 13/01/2013
 0CF1  3B FB				cmp	di, bx
 0CF3  76 07				jna	short ucds_9
 0CF5  4F				dec	di
 0CF6  80 3D 2F				cmp	byte ptr [DI], '/'
 0CF9  74 01				je	short ucds_9
 0CFB  47				inc	di
 0CFC				ucds_9:
					; 13/01/2013
 0CFC  88 05				mov	byte ptr [DI], al ; 0
 0CFE  8B D7				mov	dx, di
 0D00  2B D3				sub	dx, bx
 0D02				ucds_7:
 0D02  89 16 2447 R			mov	word ptr [CDirOffset], dx
					
 0D06  C3				retn

 0D07				update_cdir_string  endp

 0D07				print_directory_list proc near
					; 27/03/2022
					; 22/01/2020
					; 20/01/2020
					; 25/09/2019
					; 24/09/2019
					; 20/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)
					; 04/12/2015 (14 byte file names)
					; 23/02/2013 long list printing (list_count)
					; 03/02/2013
					; 22/01/2013 ls -l command feature 
					; 21/01/2013 dir/ls options
					; 20/01/2013 directory sign ("/")
					; 30/12/2012

 0D07  0B C0				or	ax, ax ; i-number of directory	
 0D09  75 03				jnz	short @f
					
					; 09/12/2012
 0D0B				pdl_0:	
 0D0B  A1 27BA R			mov	ax, word ptr [u_cdir]
 0D0E				@@:
 0D0E  E8 060D				call	iget
 0D11  72 0F			        jc	short @f ; 20/01/2013 ; jc short pdl_9

					;test	word ptr [inode_flgs], 4000h ; directory i-node ?
					;jnz	short pdl_2

					; 20/09/2019
 0D13  8A 26 2771 R			mov	ah, byte ptr [inode_flgs+1]
 0D17  80 E4 C0				and	ah, 0C0h ; regular + directory
 0D1A  80 FC C0				cmp	ah, 0C0h ; 24/09/2019
 0D1D  74 04				je	short pdl_2	
 0D1F				pdl_1:
 0D1F  B4 FF				mov	ah, 0FFh ; error number
 0D21  F9				stc
 0D22				@@:	; 20/01/2013
				       ;jmp	short pdl_9
 0D22  C3			        retn
 0D23				pdl_2:
					;mov	ax, word ptr [inode_size]
					;mov	word ptr [u_dirp], ax ; put size of directory in u.dirp
					
 0D23  33 C0				xor	ax, ax 
 0D25  A3 27C2 R			mov	word ptr [u_off], ax ; u.off is file offset used by user
					; 20/01/2020
 0D28  A3 27C4 R			mov	word ptr [u_off+2], ax

					;mov	word ptr [u_fofp], offset u.off
						      ; u.fofp is a pointer to the offset portion 
						      ; of fsp entry
 0D2B  A2 28DD R			mov	byte ptr [list_count], al ; 0 ; 23/02/2013 
 0D2E				pdl_3:
 0D2E  C7 06 27C0 R 27CA R		mov	word ptr [u_base], offset u_dirbuf
						 ; u.dirbuf holds a file name copied from
						 ; a directory	
 0D34  C7 06 27C6 R 0010		mov	word ptr [u_count], 16 ; 04/12/2015 (10 -> 16)
						 ; u.dirbuff holds a file name copied from
						 ; a directory	
 0D3A  A1 27DA R			mov	ax, word ptr [ii]
						
 0D3D  E8 0550				call	readi	; read 16 bytes of file with i-number (R1)
						; i.e. read a directory entry
 0D40  72 E0			        jc	short @b ; jc short pdl_9
					
 0D42  8B 0E 27C8 R			mov	cx, word ptr [u_nread]
 0D46  0B C9				or	cx, cx
 0D48  76 D5				jna	short pdl_1 ; gives error return 
					
 0D4A  8B 1E 27CA R			mov	bx, word ptr [u_dirbuf]
 0D4E  23 DB				and	bx, bx       
					;jz	pdl_8
					; 27/03/2022
 0D50  75 03				jnz	short pdl_4
 0D52  E9 0195				jmp	pdl_8
 0D55				pdl_4:
 0D55  BE 27CC R			mov	si, offset u_dirbuf + 2 ; r3, points to file name of directory entry
 0D58  B9 000E				mov	cx, 14 ; max. file name length (04/12/2015) 8 -> 14
 0D5B  BF 275B R			mov	di, offset DirFileName + 1 ; boot_File_Name
 0D5E				pdl_5:
 0D5E  AC				lodsb	; mov al, byte ptr [si] ; inc si
 0D5F  0A C0			 	or	al, al
 0D61  74 03				jz	short pdl_6 ; If char is null,
						   ; the last char in string has been compared
 0D63  AA				stosb  ; mov byte ptr [DI], al, inc di 
 0D64  E2 F8				loop	pdl_5
 0D66				pdl_6: 
					; 21/01/2013
 0D66  BE 262C R			mov	si, offset UNIX_CRLF
 0D69  E8 F558				call	PRINT_MSG
 0D6C  80 3E 28DE R 01			cmp	byte ptr [ls_option], 1
 0D71  74 04				je	short pdl_7
					;mov	al, 0
 0D73  88 05				mov	byte ptr [di], al
 0D75  72 46				jb	short pdl_13
 0D77				pdl_7:
					; 20/01/2013
 0D77  57				push	di
 0D78  A1 27DA R			mov	ax, word ptr [ii]
 0D7B  A3 2497 R			mov	word ptr [pdir], ax
 0D7E  A1 27CA R			mov	ax, word ptr [u_dirbuf]
 0D81  E8 059A				call	iget
 0D84  5F				pop	di
					;jc	pdl_9
					; 27/03/2022
 0D85  73 03				jnc	short pdl_17
 0D87  E9 0192				jmp	pdl_9
 0D8A				pdl_17:
					; 22/01/2012
 0D8A  80 3E 28DE R 01			cmp	byte ptr [ls_option], 1
 0D8F  76 0B				jna	short @f
				        
 0D91				pdl_11: ; 21/01/2013 ; Inode number
 0D91  A1 27CA R			mov	ax, word ptr [u_dirbuf]
 0D94  B9 0003				mov	cx, 3 ; 03/02/2013
 0D97  E8 116B				call	print_decimal_number
 0D9A  EB 1D			        jmp	short pdl_10
 0D9C				@@:
					;mov	ax, word ptr [inode_flgs]
					;test	ah, 40h ; 'directory' flag
				        ;jz	short pdl_10

					; 20/09/2019
 0D9C  A0 2771 R			mov	al, byte ptr [inode_flgs+1]
 0D9F  24 C0				and	al, 0C0h ; regular + directory
 0DA1  3C 80				cmp	al, 80h  ; regular (not directory, not device)
					;je	short pdl_10
					; 25/09/2019
 0DA3  76 14				jna	short pdl_10 ; not directory (file or device)	

 0DA5  BE 27CC R			mov	si, offset u_dirbuf + 2
 0DA8  AC				lodsb
 0DA9				@@:
 0DA9  3C 2E				cmp	al, '.'
 0DAB  75 07				jne	short @f
 0DAD  AC				lodsb
 0DAE  0A C0				or	al, al
					;jz	short pdl_10
 0DB0  74 09				jz	short pdl_14 ; 25/09/2019
 0DB2  EB F5				jmp	short @b
 0DB4				@@:	
 0DB4  B0 2F				mov	al, '/'
 0DB6  88 05				mov	byte ptr [di], al
 0DB8  47				inc	di
 0DB9				pdl_10:
					; 21/02/2013
 0DB9  32 C0				xor	al, al
 0DBB				pdl_14:
 0DBB  88 05				mov	byte ptr [di], al
 0DBD				pdl_13: ; File/Directory name
 0DBD  FE 06 28DD R			inc	byte ptr [list_count] ; 23/02/2013
 0DC1  BE 275A R			mov	si, offset DirFileName
 0DC4  E8 F4FD				call	PRINT_MSG

					; 22/01/2013
 0DC7  80 3E 28DE R 01			cmp	byte ptr [ls_option], 1
					;je	pdl_12  ; 03/02/2013 short -> near
					;jb	pdl_8 ; 23/02/2013 
					; 27/03/2022
 0DCC  77 05				ja	short @f	
 0DCE  72 15				jb	short pdl_18
 0DD0  E9 010F				jmp	pdl_12

					; 03/02/2013
 0DD3				@@:	; Owner (uid)
				        ;xor	bh, bh ; mov bh, 0
 0DD3  B4 03			        mov	ah, 03h ; get cursor position and size.
 0DD5  CD 10			        int	10h
 0DD7				@@:
					; 20/01/2020
 0DD7  80 FA 13				cmp	dl, 19 ; 04/12/2015 (13 -> 19)
 0DDA  73 0C				jnb	short @f
 0DDC  B0 20				mov	al, 20h
 0DDE  E8 013C				call	putc
 0DE1  FE C2				inc	dl ; 22/01/2020
 0DE3  EB F2				jmp	short @b
					
 0DE5				pdl_18:	; 27/03/2022
 0DE5  E9 0102				jmp	pdl_8
 0DE8				@@:
					; 24/09/2019
 0DE8  A1 2774 R			mov	ax, word ptr [inode_uid]
					;mov	cx, 4 ; <= 9999 ?
 0DEB  B9 0003				mov	cx, 3 ; <= 999 ? ; 25/09/20219
 0DEE  E8 1114				call	print_decimal_number
					;mov	al,','
 0DF1  B0 20				mov	al,20h ; 25/09/2019 
 0DF3  E8 0127				call	putc
 0DF6  32 E4				xor	ah, ah
 0DF8  A0 2776 R			mov	al, byte ptr [inode_gid]
 0DFB  B9 0003				mov	cx, 3
 0DFE  E8 1104				call	print_decimal_number	
 0E01				@@:
 0E01  B0 20			  	mov	al, 20h
 0E03  E8 0117				call	putc
					
 0E06  B0 20			  	mov	al, 20h
 0E08  E8 0112				call	putc

 0E0B				@@:	; Flags/Attributes

					; 25/09/2019
 0E0B  8B 16 2770 R			mov	dx, word ptr [inode_flgs]
 0E0F  F6 C6 80				test	dh, 80h
 0E12  75 12				jnz	short regular
 0E14  F6 C6 40				test	dh, 40h
 0E17  75 09				jnz	short blockdev
					; 20/01/2020
 0E19  F6 C6 20				test	dh, 20h
 0E1C  74 0F				jz	short regular_f
 0E1E				chardev:
 0E1E  B0 63				mov	al, 'c'
 0E20  EB 0D				jmp	short @f
 0E22				blockdev:	
 0E22  B0 62				mov	al, 'b'
 0E24  EB 09				jmp	short @f
 0E26				regular:
 0E26  B0 64				mov	al,'d'
 0E28  F6 C6 40				test	dh, 40h
 0E2B  75 02				jnz	short @f	
 0E2D				regular_f:		
 0E2D  B0 2D				mov	al, '-'
 0E2F				@@:
 0E2F  E8 00EB				call	putc

					; rwx permissions for owner,group,others

 0E32  81 E2 01FF			and	dx, 1FFh ; 111111111b
					
					;mov	cx, 7
 0E36  B1 07				mov	cl, 7
 0E38  D3 E2				shl	dx, cl ; shift bit 8 to bit 15 position
 0E3A  B1 03				mov	cl, 3
 0E3C				rwxugo:
 0E3C  B0 2D				mov	al, '-'
 0E3E  D1 E2				shl	dx, 1
 0E40  73 02				jnc	short @f
 0E42  B0 72				mov	al, 'r'
 0E44				@@:
 0E44  E8 00D6				call	putc
 0E47  B0 2D				mov	al, '-'
 0E49  D1 E2				shl	dx, 1
 0E4B  73 02				jnc	short @f
 0E4D  B0 77				mov	al, 'w'
 0E4F				@@:	
 0E4F  E8 00CB				call	putc
 0E52  B0 2D				mov	al, '-'
 0E54  D1 E2				shl	dx, 1
 0E56  73 02				jnc	short @f
 0E58  B0 78				mov	al, 'x'
 0E5A				@@:
 0E5A  E8 00C0				call	putc
 0E5D  E2 DD				loop	rwxugo

 0E5F  B0 20				mov	al, 20h
 0E61  E8 00B9				call	putc

 0E64				@@: ; File Size ; 03/02/2013
					;mov	ax, word ptr [inode_size]
					;;;mov	cx, 5
					;;mov	cl, 5
					;mov	cl, 6 ; 25/09/2019
					;call	print_decimal_number

					; 20/01/2020
 0E64  E8 1093				call	print_file_size	
 0E67				@@:
 0E67  B0 20				mov	al, 20h
 0E69  E8 00B1				call	putc

 0E6C  B0 20				mov	al, 20h
 0E6E  E8 00AC				call	putc

 0E71				@@: ; 03/02/2013 ; File creation date & time	
					;mov	ax, word ptr [inode_ctim]
					;mov	dx, word ptr [inode_ctim]+2
					
					; 23/02/2013 ; File last modification date & time	
 0E71  A1 27A8 R			mov	ax, word ptr [inode_mtim]
 0E74  8B 16 27AA R			mov	dx, word ptr [inode_mtim]+2
					
 0E78  E8 0A9D				call	convert_from_epoch
					; cx = day

 0E7B  8B C1				mov	ax, cx ; word ptr [day]
 0E7D  BE 28DF R			mov	si, offset dec_num
 0E80  8B DE				mov	bx, si
 0E82  83 C3 02				add	bx, 2	
					;mov	cx, 2
 0E85  B1 02				mov	cl, 2
 0E87  E8 0E27				call	proc_bin_to_decimal
 0E8A  C6 07 2F				mov	byte ptr [BX], '/'
 0E8D  8B F3				mov	si, bx
 0E8F  46				inc	si
 0E90  A1 27E4 R			mov	ax, word ptr [month]
					;mov	cx, 2
 0E93  B1 02				mov	cl, 2
 0E95  E8 0E19				call	proc_bin_to_decimal
 0E98  83 C3 03				add	bx, 3
 0E9B  C6 07 2F				mov	byte ptr [BX], '/'
 0E9E  8B F3				mov	si, bx
 0EA0  46				inc	si
 0EA1  A1 27E2 R			mov	ax, word ptr [year]
					;mov	cx, 4
 0EA4  B1 04				mov	cl, 4
 0EA6  E8 0E08				call	proc_bin_to_decimal

					; 20/01/2020
 0EA9  C6 04 00				mov	byte ptr [si], 0

 0EAC  BE 28DF R			mov	si, offset dec_num
 0EAF  E8 F412				call	PRINT_MSG

 0EB2  B0 20				mov	al, 20h
 0EB4  E8 0066				call	putc

 0EB7  BE 28DF R			mov	si, offset dec_num
 0EBA  8B DE				mov	bx, si
 0EBC  A1 27E8 R			mov	ax, word ptr [hour]
					;mov	cx, 2
 0EBF  B1 02				mov	cl, 2
 0EC1  E8 0DED				call	proc_bin_to_decimal
 0EC4  83 C3 02				add	bx, 2
 0EC7  C6 07 3A				mov	byte ptr [bx],':'

 0ECA  8B F3				mov	si, bx
 0ECC  46				inc	si
 0ECD  A1 27EA R			mov	ax, word ptr [minute]
					;mov	cx, 2
 0ED0  B1 02				mov	cl, 2
 0ED2  E8 0DDC				call	proc_bin_to_decimal
 0ED5  83 C3 03				add	bx, 3
					;mov	byte ptr [bx], ':'
					;mov	si, bx
					;inc	si
					;mov	ax, word ptr [second]
					;;mov	cx, 2
					;mov	cl, 2
					;call	proc_bin_to_decimal
 0ED8  32 C0				xor	al, al
 0EDA  88 07			        mov	byte ptr [bx], al 

 0EDC  BE 28DF R			mov	si, offset dec_num
 0EDF  E8 F3E2				call	PRINT_MSG
 0EE2				pdl_12:
 0EE2  A1 2497 R			mov	ax, word ptr [pdir]
 0EE5  E8 0436				call	iget
 0EE8  72 32			        jc	short pdl_9
 0EEA				pdl_8:
					; 20/01/2020 (32 bit offset)
 0EEA  A1 27C2 R			mov	ax, word ptr [u_off]
 0EED  8B 16 27C4 R			mov	dx, word ptr [u_off+2]
 0EF1  3B 16 277A R			cmp	dx, word ptr [inode_size+2]
 0EF5  72 06			        jb	short pdl_15
 0EF7  3B 06 2778 R			cmp	ax, word ptr [inode_size]
 0EFB  73 19			        jnb	short @f

					; 30/12/2012
					;mov	ax, word ptr [u_off]
					;cmp	ax, word ptr [inode_size]
				        ;jnb	short @f ; 22/02/2013 ; jb pdl_3
 0EFD				pdl_15:
					; 23/02/2013
 0EFD  80 3E 28DD R 15			cmp	byte ptr [list_count], 21
					;jb	pdl_3
					; 01/01/2020
 0F02  73 03				jnb	short pdl_16
 0F04  E9 FE27				jmp	pdl_3	
 0F07				pdl_16:
 0F07  32 E4				xor	ah, ah
 0F09  88 26 28DD R			mov	byte ptr [list_count], ah ; 0
 0F0D  CD 16				int	16h
 0F0F  3C 1B				cmp	al, 1Bh  ; ESC key
					;jne	pdl_3
					; 01/01/2020
 0F11  74 03				je	short @f
 0F13  E9 FE18				jmp	pdl_3	
 0F16				@@:
 0F16  BE 262C R		        mov	si, offset UNIX_CRLF
 0F19  E8 F3A8				call	PRINT_MSG
 0F1C				pdl_9:
 0F1C  C3				retn

 0F1D				putc:  ; 22/01/2013
 0F1D  B4 0E				mov	ah, 0Eh
					;mov	bx, 07h
 0F1F  CD 10				int	10h
 0F21  32 C0				xor	al, al

 0F23  C3				retn

 0F24				print_directory_list endp

 0F24				sys_chdir proc near
					; 24/09/2019
					; 20/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)
					; 09/12/2012 unixcopy.asm
					;       Retro UNIX v1 FS file import/export version
					;             of syschdir function  
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;
					; RETRO UNIX v1 FS
					; syschdir:
					; makes the directory specified in the argument 
					; the current directory

					; mov word ptr [u_namep], si

 0F24				syschdir_0:
 0F24  E8 02D0				call	namei
 0F27  72 18				jc	short syschdir_5

 0F29				syschdir_1:
 0F29  E8 03F2				call	iget
 0F2C  72 13				jc	short syschdir_5
 0F2E				syschdir_2:
					;test	word ptr [inode_flgs], 4000h ; directory i-node ?
					;jnz	short syschdir_4
					; 20/09/2019
 0F2E  8A 16 2771 R			mov	dl, byte ptr [inode_flgs+1]
 0F32  80 E2 C0				and	dl, 0C0h
 0F35  80 FA C0				cmp	dl, 0C0h ; 24/09/2019
 0F38  74 04				je	short syschdir_4
 0F3A				syschdir_3:
 0F3A  B4 FF				mov	ah, 0FFh
 0F3C  F9				stc
 0F3D  C3				retn	
 0F3E				syschdir_4:	
 0F3E  A3 27BA R			mov	word ptr [u_cdir], ax
					;mov	dx, word ptr [cdev]
					;mov	word ptr [u_cdev], dx

 0F41				syschdir_5:
 0F41  C3				retn

 0F42				sys_chdir endp

 0F42				sys_mkdir proc near
					; 15/04/2022 ('number of links' bugfix)
					; 28/03/2022
					; 04/01/2020
					; 19/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)
					;
					; 05/01/2013 (bugfix)
					; 30/12/2012 unixcopy.asm
					;       Retro UNIX v1 FS file import/export version
					;             of sysmkdir function  
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;
					; RETRO UNIX v1 FS
					; sysmkdir:
					; make a directory
					;
					;
					; return => if cf=1 error code in AH
					; If cf=0 -> AX = I-Number (also in u.dirbuff)

				 	;jsr    r0,arg2 / point u.namep to the file name
				        ;jsr    r0,namei / get the i-number
				        ;       br .+4 / if file not found branch around error
				        ;br     error2 / directory already exists (error)
				        ;tstb   u.uid / is user the super user
				        ;bne    error2 / no, not allowed
				        ;mov    (sp)+,r1 / put the mode in r1
					;bic    $!317,r1 / all but su and ex
				        ;bis    $40000,r1 / directory flag
				        ;jsr    r0,maknod / make the i-node for the directory
				        ;br     sysret2 /

 0F42  8B 1E 27BC R			mov	bx, word ptr [u_namep]
 0F46  8B F3				mov	si, bx ; 05/01/2013

 0F48				makdir_1:
 0F48  AC				lodsb  
 0F49  0A C0				or	al, al
 0F4B  74 08				jz	short makdir_2
 0F4D  3C 2F				cmp	al, '/'
 0F4F  75 F7				jne	short makdir_1
 0F51  8B DE				mov	bx, si		
 0F53  EB F3				jmp	short makdir_1

 0F55				makdir_2:
 0F55  3B 1E 27BC R			cmp	bx, word ptr [u_namep]
 0F59  74 0F				je	short makdir_3
 0F5B  4E				dec	si
 0F5C  4E				dec	si ; 05/01/2013
 0F5D  80 3C 2F			        cmp	byte ptr [si], '/' ; is the last char '/'
 0F60  75 08				jne	short makdir_3

 0F62  3B 36 27BC R			cmp	si, word ptr [u_namep] ; 05/01/2013
 0F66  74 02				je	short makdir_3

 0F68  F9				stc
 0F69				@@:
 0F69  C3				retn

 0F6A				makdir_3:
 0F6A  89 1E 2497 R			mov	word ptr [pdir], bx
 0F6E				sysmkdir_0:
 0F6E  E8 0286				call	namei
 0F71  72 02				jc	short sysmkdir_1

 0F73  F9				stc
 0F74				@@:
 0F74  C3				retn

 0F75				sysmkdir_1:
 0F75  80 FC FF				cmp	ah, 0FFh
 0F78  75 FA			        jne	short @b

 0F7A				makdir_4:
					; 15/04/2022
				        ;mov	ax, word ptr [ii]
 0F7A  8B 1E 2497 R			mov	bx, word ptr [pdir]
					;mov	word ptr [pdir], ax
 0F7E  39 1E 27BC R			cmp	word ptr [u_namep], bx
 0F82  72 F0				jb	short @b ; parent dir of the new sub dir not found

				 	; 15/04/2022
 0F84  A1 27DA R			mov	ax, word ptr [ii]
 0F87  A3 2497 R			mov	word ptr [pdir], ax ; parent directory 
								    ; (of the new sub dir)
 0F8A				sysmkdir_flags: ; ax = r1 = mode
					;mov	ax, 0C00Eh ; Flags (1100000000001110b)
					; 19/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure) 
 0F8A  B8 C1ED				mov	ax, 0C1EDh ; Flags (0100000111101101b)
 0F8D				sysmkdir_maknod:
					;call	mak_nod	
					; ax = I-Number (also in u.dirbuff)

					;retn

					; 28/03/2022
					; (clear/reset [uf_i_number] as new file/directory sign)
 0F8D  C7 06 276E R 0000		mov	word ptr [uf_i_number], 0

					; 04/01/2020
					;jmp	short mak_nod ; 20/01/2020 (short jump)

 0F93				sys_mkdir endp

 0F93				mak_nod proc near
					; 28/03/2022
					; 27/03/2022 (BugFix)
					; 20/01/2020
					; 25/09/2019
					; 19/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)	
					;
					; 01/03/2013
					; 23/02/2013
					; 15/12/2012 UNIXCOPY.ASM version of maknod
					; 02/12/2012 (maknod_imap -> call imap)
					; 25/11/2012
					; 18/11/2012
					; 11/11/2012
					; unixboot.asm (boot file configuration)
					; version of 'maknod'
					;
					; 30/10/2012
					; AX = R1, mode
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					; RETRO UNIX v1 FS
					;
					; maknod : create an i-node and make a directory entry
					;
					; 8086 CPU & IBM PC architecture modifications by Erdogan Tan 
					;
					; return => if cf=1 error code in AH
					; If cf=0 -> AX = I-Number (also in u.dirbuff)

					;or 	ah, 80h  ; 10000000b, allocate flag set  ;; unix v1
					; 25/09/2019
					;or	ah, 80h	; 11000000b, regular file (or dir) ;; runix v2	 
					
 0F93  50				push 	ax ; *	; put mode on stack
					
					;mov	ax, word ptr [ii] ; move current i-number to AX/r1
					;push 	ax
 0F94  FF 36 27DA R			push 	word ptr [ii] ; **

					;mov	ax, 41	; r1 = 41 ; unix v1
 0F98  B8 0001				mov	ax, 1	; check inodes after root directory, 19/09/2019
						; (root directory inode number = 1) ; runix v2
 0F9B				maknod_1: ; 1 	; scan for a free i-node
 0F9B  40				inc	ax 	; r1 = r1 + 1
					; 2/12/2012
 0F9C  E8 0D35				call	imap	; get byte address and bit position in inode map in 
						; r2 (DX) & mq (BX)
				            ; DX (MQ) has a 1 in the calculated bit position
				            ; BX (R2) has byte address of the byte with allocation bit

 0F9F  84 17			        test    byte ptr [bx], dl ; bitb mq,(r2) / is the i-node active
 0FA1  75 F8				jnz	short maknod_1    ; bne	1b / yes, try the next one
 0FA3  08 17			        or      byte ptr [bx], dl ; bisb mq,(r2)
						; no, make it active (put a 1 in the bit map)
					; ax = i-number
 0FA5  E8 0376				call	iget      	 ; jsr	r0,iget / get i-node into core
					;jc	short maknod_3	
					; 20/01/2020
 0FA8  73 03				jnc	short @f

 0FAA				maknod_3:
					; 15/12/2012
 0FAA  58				pop 	ax ; ** ; current i number
 0FAB				maknod_2:
 0FAB  58				pop	ax ; *  ; file mode (inode flags)
 0FAC  C3				retn
 0FAD				@@:	
					;test	word ptr [inode_flgs], 8000h  ; is i-node already allocated
 0FAD  F6 06 2771 R 00			test	byte ptr [inode_flgs+1], 0 ; 19/09/2019 - Retro UNIX 386 v2
 0FB2  75 E7				jnz	short maknod_1	; 1b / yes, look for another one
					
 0FB4  A3 27CA R			mov	word ptr [u_dirbuf], ax ; mov r1, u.dirbuf 
								; no, put i-number in u.dirbuf

 0FB7  58				pop 	ax ; ** ; 15/12/2012	; get current i-number back	
 0FB8  E8 0363				call 	iget	  ; jsr r0,iget / get i-node in core
 0FBB  72 EE				jc	short maknod_2

 0FBD  E8 06AB				call 	mkdir	; jsr r0,mkdir 
						; make a directory entry in current directory
 0FC0  72 E9				jc	short maknod_2 ; 01/03/2013 

 0FC2  A1 27CA R			mov	ax, word ptr [u_dirbuf] ; mov u.dirbuf,r1 
						;  ax / r1 = new inode number
 0FC5  E8 0356				call	iget
 0FC8  72 E1				jc	short maknod_2

				        ; jsr r0,copyz; inode; inode+32. / 0 it out 
					;mov	cx, 16
 0FCA  B9 0020				mov	cx, 32 ; 19/09/2019 - Retro UNIX 386 v2
					;	      ;	    (inode size = 64 bytes)
 0FCD  33 C0				xor	ax, ax ; 0
 0FCF  BF 2770 R			mov	di, offset inode 
 0FD2  F3/ AB				rep	stosw

 0FD4  8F 06 2770 R			pop	word ptr [inode_flgs] ; * ; mov (sp)+,i.flgs / fill flags

					; 19/09/2019 - Retro UNIX v2 (modified unix v7 inodes)
 0FD8  8A 0E 27B9 R			mov 	cl, byte ptr [u_gid] ; user's group id
 0FDC  88 0E 2776 R			mov 	byte ptr [inode_gid], cl	

 0FE0  8A 0E 27B8 R			mov 	cl, byte ptr [u_uid] ; movb u.uid,i.uid / user id
 0FE4  88 0E 2774 R			mov 	byte ptr [inode_uid], cl ; 23/02/2013 al -> cl
 0FE8  C6 06 2772 R 01			mov     byte ptr [inode_nlks], 1 ; movb $1,i.nlks / 1 link
					
					;call	epoch

					;mov 	word ptr [s_time], ax
					;mov 	word ptr [s_time]+2, dx	

					;mov 	word ptr [inode_ctim], ax ; mov s.time,i.ctim / time created
					;mov 	word ptr [inode_ctim]+2, dx ; mov s.time+2,i.ctim+2

					; 25/11/2012
					; 23/02/2013
 0FED				fromdos_maknod:
					;xor	ax, ax
 0FED  33 D2				xor 	dx, dx	
					; File/Directory data/content modification date&time
 0FEF  A3 27A8 R			mov 	word ptr [inode_mtim], ax  ; 0
 0FF2  89 16 27AA R			mov 	word ptr [inode_mtim]+2, dx ; 0
					; 19/09/2019 - Retro UNIX 386 v2
					; Last access date&time or inode modification date&time
 0FF6  A3 27A4 R			mov 	word ptr [inode_atim], ax  ; 0
 0FF9  89 16 27A6 R			mov 	word ptr [inode_atim]+2, dx ; 0

					;test 	word ptr [inode_flgs], 4000h  ; Directory
					; 19/09/2019
 0FFD  F6 06 2771 R 40			test	byte ptr [inode_flgs+1], 40h  ; Directory
 1002  75 07				jnz 	short maknod_4
 1004  A1 276A R			mov 	ax, word ptr [uf_make_datetime]
 1007  8B 16 276C R			mov	dx, word ptr [uf_make_datetime]+2
 100B				maknod_4:
 100B  A3 27AC R			mov 	word ptr [inode_ctim], ax  
 100E  89 16 27AE R			mov 	word ptr [inode_ctim]+2, dx

 1012  E8 05BA				call	setimod

					; 28/03/2022
 1015  A1 27DA R			mov	ax, word ptr [ii] ; inode number of current inode

					; 27/03/2022 (BugFix)
 1018  83 3E 276E R 00			cmp	word ptr [uf_i_number], 0 ; existing file ?
 101D  77 12				ja	short @f  ; yes (do not decrease free inode count)
					; new file (decrease free inode count)

					; 29/09/2019
 101F  FF 0E 33C0 R			dec	word ptr [systm.sb_FreeInodes]

					; 28/03/2022
					; (first free inode has been searched from inode 1;
					;  so, ax contains previous first free inode value and
					;  it is better if the new value is set one/just next to ax)
				  
 1023  8B D0				mov	dx, ax
 1025  42				inc	dx ; next inode (next ffi search will be started from)
 1026  89 16 33C4 R			mov	word ptr [systm.sb_FirstFreeIno], dx
 102A  2B D2				sub	dx, dx
 102C  89 16 33C6 R			mov	word ptr [systm.sb_FirstFreeIno+2], dx ; 0
 1030  C3				retn

 1031				@@:		; 27/03/2022
					; 28/03/2022
					;mov	ax, word ptr [ii] ; inode number of current inode
					; 20/01/2020
					;mov 	ax, word ptr [u_dirbuf]
 1031  3B 06 33C4 R			cmp	ax, word ptr [systm.sb_FirstFreeIno]
 1035  75 0C				jne	short @f
					;cmp	word ptr [systm.sb_FirstFreeIno+2],0
					;jne	short @f
 1037  C7 06 33C4 R FFFF		mov	word ptr [systm.sb_FirstFreeIno], 0FFFFh ; invalidate
 103D  C7 06 33C6 R FFFF		mov	word ptr [systm.sb_FirstFreeIno+2], 0FFFFh
 1043				@@:
 1043  F8				clc
					;mov 	ax, word ptr [u_dirbuf] ; 20/01/2020

 1044  C3				retn

				;maknod_3:
				;	; 15/12/2012
				;	pop 	ax ; **
				;maknod_2:
				;	pop	ax ; *
				;	retn

 1045				mak_nod	endp

 1045				remove_directory proc near
					; 15/04/2022 ('number of links' bugfix)
					; 24/01/2020
					; 20/01/2020
					; 01/10/2019
					; 20/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)
					; 04/12/2015 (14 byte directory names)
					; 05/01/2013
					;
					; mov word ptr [u.namep], si

					;call	namei
				        ;jc	@f

					;cmp	ax, ROOT_DIR_INODE_NUMBER
				        ;je	rmdir_stc_retn

					;cmp	ax, word ptr [u_cdir]
				        ;je	rmdir_stc_retn

				       ; INPUT ->
				       ; ax = i_number of directory (to be removed)
				       ; u_off = directory entry location + 16 (in parent dir)
				       ; [ii] = i_number of parent directory

 1045  3B 06 27DA R			cmp	ax, word ptr [ii]	; '.' entry
 1049  74 27				je	short rmdir_stc_retn

 104B  A3 276E R			mov	word ptr [uf_i_number], ax  ; i_number of dir or file 

 104E  8B 16 27C2 R			mov	dx, word ptr [u_off]
					; 20/01/2020
 1052  89 16 27DC R			mov	word ptr [FileHandle], dx  ; 16 bit file pointer/offset
					;mov	word ptr [d_off], dx ; directory entry location + 16 (+10) 
					;mov	dx, word ptr [u_off+2]
					;mov	word ptr [d_off+2], dx

 1056  8B 16 27DA R			mov	dx, word ptr [ii] ; i-number of parent directory 
 105A  89 16 2497 R			mov	word ptr [pdir], dx

 105E  E8 02BD				call	iget
 1061  72 10				jc	short @f

					;mov	ax, word ptr [inode_flgs]
					;test	ah, 40h ;'directory' flag
					;jz	short rmdir_stc_retn	
					;test	al, 4h ; 'write' flag
					;jz	short rmdir_stc_retn

					; 20/09/2019 - Retro UNIX 386 v2
 1063  A1 2770 R			mov	ax, word ptr [inode_flgs]
					; 15/04/2022
					;and	al, 80h ; owner's write permission
					;jz	short rmdir_stc_retn
					;and	ah, 0C0h
					;cmp	ah, 0C0h ; 01/10/2019
					;je	short rmdir_1
				;rmdir_stc_retn:
				;	stc
				;@@:
				;	retn

					; 15/04/2022
 1066  80 E4 C0				and	ah, 0C0h
 1069  80 FC C0				cmp	ah, 0C0h
 106C  75 05				jne	short @f ; (cf=1)
 106E  24 80				and	al, 80h ; owner's write permission
 1070  75 02				jnz	short rmdir_1
					
 1072				rmdir_stc_retn:
 1072  F9				stc
 1073				@@:
 1073  C3				retn

 1074				rmdir_1:
 1074  33 C0				xor	ax, ax 
 1076  A3 27C2 R			mov	word ptr [u_off], ax 
					; 20/01/2020
 1079  A3 27C4 R			mov	word ptr [u_off+2], ax ; hw of 32 bit file pointer/offset

					;mov	word ptr [u_fofp], offset u.off	

 107C				rmdir_readi_loop:
 107C  C7 06 27C0 R 27CA R		mov	word ptr [u_base], offset u_dirbuf
						 ; u.dirbuf holds a file name copied from
						 ; a directory	
 1082  C7 06 27C6 R 0010		mov	word ptr [u_count], 16 ; 04/12/2015 (10 -> 16) 	
				 	
 1088  A1 27DA R			mov	ax, word ptr [ii]
						
 108B  E8 0202				call	readi	; read 16 bytes of file with i-number
							; i.e. read a directory entry
 108E  72 E3				jc	short @b ; 24/09/2019

 1090  8B 0E 27C8 R			mov	cx, word ptr [u_nread]

 1094  0B C9				or	cx, cx
					;;jnz	short rmdir_stc_retn
					;jnz	short @b
 1096  75 29				jnz	short rmdir_unlink ; 01/10/2019	

					;cmp	cx, 16  ; 04/12/2015 (10 -> 16)
					;jb	short @b

 1098  8B 1E 27CA R			mov	bx, word ptr [u_dirbuf]
 109C  23 DB				and	bx, bx       
 109E  74 DC				jz	short rmdir_readi_loop

 10A0  A1 27CC R			mov	ax, word ptr [u_dirbuf]+2
 10A3  3C 2E				cmp	al, '.'
 10A5  75 CB				jne	short rmdir_stc_retn

 10A7  22 E4				and	ah, ah
 10A9  74 D1				jz	short rmdir_readi_loop

 10AB  80 FC 2E				cmp	ah, '.'	; ".."
 10AE  75 C2				jne	short rmdir_stc_retn

 10B0  8A 26 27CE R			mov	ah, byte ptr [u_dirbuf]+4

 10B4  0A E4				or	ah, ah
 10B6  75 BA				jnz	short rmdir_stc_retn

					; 20/01/2020 (32 bit offset value)
					;mov	ax, word ptr [u_off+2]
					;cmp	ax, word ptr [inode_size+2]
					;jb	short rmdir_readi_loop
					
 10B8  A1 27C2 R			mov	ax, word ptr [u_off]
					; 01/10/2019 - Retro UNIX 386 v2 (the 1st entry is '.', not '..')
						; 04/12/2015 (10 -> 16)
					;cmp	ax, 16	; protection for removing default system directories
					;jna	short rmdir_stc_retn ; because, the 1st dir enty of them is ".."

 10BB  3B 06 2778 R			cmp	ax, word ptr [inode_size]
 10BF  72 BB				jb	short rmdir_readi_loop

					; 01/10/2019
					;cmp	word ptr [inode_size+2], 0
					;jna	short rmdir_unlink
					;cmp	ax, 65536-16
					;jb	short rmdir_readi_loop

 10C1				rmdir_unlink:
					; 15/04/2022
					; unlink dot ('.')
					;mov	ax, word ptr [uf_i_number]
					;call	iget
 10C1  FE 0E 2772 R			dec	byte ptr [inode_nlks]
 10C5  E8 0507				call	setimod

 10C8  A1 276E R			mov	ax, word ptr [uf_i_number]
					; 20/01/2020
 10CB  8B 16 27DC R			mov	dx, word ptr [FileHandle] ; 16 bit file pointer/offset
					;mov	dx, word ptr [d_off+2]
					;mov	word ptr [u_off+2], dx
					;mov	dx, word ptr [d_off]
					; 24/01/2020
 10CF  89 16 27C2 R			mov	word ptr [u_off], dx

					; 15/04/2022
				;	; 20/09/2019
				;	;call	unlink
				;;@@:
				;	;retn
				;	; 20/01/2020
				;	;jmp	short unlink

				;rmdir_stc_retn:
				;	stc
				;	retn

					; 15/04/2022
					; unlink dotdot ('..')
 10D3  E8 000D				call	unlink
					; decrease link count of the parent directory
 10D6  A1 2497 R			mov	ax, word ptr [pdir] ; parent dir
 10D9  E8 0242				call	iget
					;cmp	byte ptr [inode_nlks], 2
					;jna	short @f
 10DC  FE 0E 2772 R			dec	byte ptr [inode_nlks] ; must be >= 2 after this
					;call	setimod
 10E0  E9 04EC				jmp	setimod
				;@:
				;	;retn

 10E3				remove_directory endp

 10E3				unlink	proc near
					; 20/01/2020
					; 18/09/2019 - Retro UNIX 386 v2 (modified unix v7 inodes)
					;
					; 04/12/2015 (14 byte file names)
					; 05/01/2013 UNIXCOPY.ASM modification (pdir -> iget)
					; 16/12/2012 UNIXCOPY.ASM version
				        ; 02/12/2012
				        ; unix boot file configuration version
					; of "sysunlink" function of retro unix v1.0 by Erdogan Tan
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972 
					; ('sysunlink', unix kernel function)
					; 
					; INPUT -> AX (R1) = inode number
					;          [u_off] = Directory Entry Offset + 16 (+ 10)
					;          ;;; [ii] = i-number of current directory
					; Return -> CF = 0 -> Successed, CF = 1 -> failed
					;		(error code in AX)

					;jsr r0,arg; u.namep / u.namep points to name
					;jsr r0,namei / find the i-number associated 
					;	with the path name
					;br error9 / not found

 10E3  50				push	ax ;mov r1,-(sp) / put its i-number on the stack
					;jsr r0,isdir / is it a directory
 10E4  33 C0				xor	ax, ax
 10E6  A3 27CA R			mov	word ptr [u_dirbuf], ax ; clr u.dirbuf / no, clear 
						;the location that will get written
						 ;/ into the i-number portion of the entry
 10E9  83 2E 27C2 R 10			sub	word ptr [u_off], 16 ; 04/12/2015 (10 -> 16)
						; sub $10.,u.off 
						; / move u.off back 1 directory entry
					; 20/01/2020
 10EE  19 06 27C4 R			sbb	word ptr [u_off+2], ax ; 0

					;mov	ax, word ptr [ii] 
 10F2  A1 2497 R			mov	ax, word ptr [pdir] ; 05/01/2013
 10F5  E8 0226				call	iget
 10F8  73 02				jnc	short @f
 10FA  58				pop	ax
 10FB  C3				retn
					;
 10FC				@@:
 10FC  E8 059F				call	wdir ;jsr r0,wdir / free the directory entry
 10FF  58				pop	ax  ;mov (sp)+,r1 / get i-number back
 1100  72 39				jc	short @f

 1102  E8 0219			        call	iget ; jsr r0,iget / get i-node
 1105  72 34				jc	short @f
 1107  E8 04C5			        call	setimod ; jsr r0,setimod / set modified flag
					;dec	word ptr [inode_nlks] ; Retro UNIX 386 v2 (word)
 110A  FE 0E 2772 R		        dec	byte ptr [inode_nlks] ; decb i.nlks 
								; / decrement the number of links
 110E  75 2B				jnz	short @f ;bgt sysret9 
						;/ if this was not the last link to file return

					; 19/09/2019

				;	call	anyi ;jsr r0,anyi / if it was, see if anyone has it open.
				;	    	;Then / free contents of file and destroy it.
				;		;br sysret9
				;@@:
				;	retn

 1110				unlink	endp

 1110				anyi	proc near
					; 28/03/2022
					; 20/01/2020
					; 18/09/2019 - Retro UNIX 386 v2 (modified unix v7 inodes)
					;
				        ; 02/12/2012
				        ; unix boot file configuration version
					; of "anyi" procedure of retro unix v1.0 by Erdogan Tan
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972 
					; ('anyi' procedure)
					; 
					; INPUT -> AX (R1) = inode number
					; Return -> CF = 0 -> Successed, CF = 1 -> failed
					;		
					; mov $fsp,r2 / move start of fsp table to r2
 1110				anyi_1: ;1
					; cmp r1,(r2) / do i-numbers match?
					; beq 1f / yes, 1f
					; neg r1 / no complement r1
					; cmp r1,(r2) / do they match now?
					; beq 1f / yes, transfer
					; / i-numbers do not match
					; add $8,r2 / no, bump to next entry in fsp table
					; cmp r2,$fsp+[nfiles*8] / are we at last entry in the table
					; blt 1b / no, check next entries i-number
					; tst r1 / yes, no match
					; bge .+4
					; neg r1 / make i-number positive

					; 20/01/2020
					;mov	ax, word ptr [ii]

 1110  E8 0BC1				call	imap	; jsr r0,imap / get address of allocation bit 
					    		;     in the i-map in r2
				        ; DX (MQ) has a 1 in the calculated bit position
				        ; BX (R2) has byte address of the byte with allocation bit
 1113  53				push	bx ; retro unix modification (not as original unix code)
 1114  52				push	dx ; retro unix modification (not as original unix code)
					; AX = i-number
 1115  E8 0BE3				call	itrunc ; jsr r0,itrunc / free all blocks related to i-node
					
 1118  5A				pop	dx ; retro unix modification (not as original unix code)
 1119  5B				pop	bx ; retro unix modification (not as original unix code)

 111A  72 1F				jc	short @f

				        ; (AX=0)
					; retro unix modification-> 'call itrunc' moved up for
					; keeping superblock unmodified if itrunc return with an error

 111C  F7 D2			        not	dx
 111E  20 17			        and	byte ptr [bx],dl ; bicb mq,(r2) 
						     ; / clear bit for i-node in the imap
					; 28/03/2022
 1120  33 D2				xor	dx, dx
					; 29/09/2019
 1122  FF 06 33C0 R			inc	word ptr [systm.sb_FreeInodes]
 1126  A1 27DA R			mov	ax, word ptr [ii] ; inode number of current inode
 1129  3B 06 33C4 R			cmp	ax, word ptr [systm.sb_FirstFreeIno]
 112D  73 08				jnb	short anyi_2
					;cmp	word ptr [systm.sb_FirstFreeIno+2],0
					;jne	short anyi_2
 112F  A3 33C4 R			mov	word ptr [systm.sb_FirstFreeIno],ax
					; 20/01/2020
					;mov	word ptr [systm.sb_FirstFreeIno+2],0 ; 0FFFFh -> 0
					;;clc
					; 28/03/2022
 1132  89 16 33C6 R			mov	word ptr [systm.sb_FirstFreeIno+2], dx ; 0
 1136  F8				clc
 1137				anyi_2:
					; 28/03/2022
					; cf = 0
					;xor	ax,ax
					;mov	word ptr [inode_flgs], ax ; 0 ; clr i.flgs
							; / clear all flags in the i-node
					; 28/03/2022
 1137  89 16 2770 R			mov	word ptr [inode_flgs], dx ; 0
 113B				@@:
 113B  C3				retn	; rts r0 / return

				;anyi_2: ;1 / i-numbers match
				 	;incb	7(r2) / increment upper byte of the 4th word
					;rts	r0 / in that fsp entry (deleted flag of fsp entry)

 113C				anyi	endp

 113C				show_file proc near
					; 20/01/2020
					; 20/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)	
					; 07/01/2013
					; 06/01/2013
					; derived from TRDOS command interpreter file (CMDINTR.ASM)
					; 'show' procedure (13/09/2011)

 113C  E8 00B8				call	namei
 113F  72 60			        jc	short suf_4

 1141  E8 01DA			        call	iget
 1144  72 5B				jc	short suf_4

					; 20/09/2019
					;;test	word ptr [inode_flgs], 4000h  ; Directory
					;test	byte ptr [inode_flgs+1], 40h
					;jnz	short suf_4

					; 20/09/2019
					;test	byte ptr [inode_flgs+1], 80h ; Regular file
					;jz	short suf_4		

 1146  A0 2771 R			mov	al, byte ptr [inode_flgs+1]
 1149  24 C0				and	al, 0C0h
 114B  3C 80				cmp	al, 80h
 114D  75 52				jne	short suf_4	

 114F  BE 262C R		        mov	si, offset UNIX_CRLF
 1152  E8 F16F			        call	PRINT_MSG

					; 20/01/2020
 1155  A1 277A R			mov	ax, word ptr [inode_size+2]
 1158  BA 0200				mov	dx, 512
 115B  0B C0				or	ax, ax
 115D  75 07				jnz	short suf_0
 115F  A1 2778 R			mov	ax, word ptr [inode_size]
 1162  3B C2				cmp	ax, dx ; 512
 1164  76 02				jna	short suf_1
 1166				suf_0:
 1166  8B C2				mov	ax, dx ; 512
 1168				suf_1:
 1168  33 D2				xor	dx, dx 
 116A  89 16 27C2 R		        mov	word ptr [u_off], dx
					; 20/01/2020
 116E  89 16 27C4 R			mov	word ptr [u_off+2], dx 

 1172  B9 0016				mov	cx, 22
 1175				suf_2:	
 1175  51				push	cx	
 1176  A3 27C6 R			mov	word ptr [u_count], ax
 1179  C7 06 27C0 R 3990 R		mov	word ptr [u_base], offset ReadBuffer
 117F  A1 27DA R			mov	ax, word ptr [ii] ; word ptr [u_dirbuf]
 1182  E8 010B				call	readi
 1185  59				pop	cx
 1186  72 19				jc	short suf_4

 1188  8B 3E 27C8 R			mov	di, word ptr [u_nread]

 118C  0B FF				or	di, di
 118E  74 11				jz	short suf_4

 1190  BE 3990 R			mov	si, offset ReadBuffer

 1193  EB 15			        jmp	short suf_6
 1195				suf_3:
 1195  23 C9			        and	cx, cx
 1197  75 11			        jnz	short suf_6
 1199  32 E4				xor	ah, ah
 119B  CD 16				int	16h
 119D  3C 1B				cmp	al, 1Bh ; ESCAPE Key
 119F  75 06				jne	short suf_5
 11A1				suf_4:
 11A1  BE 262C R			mov	si, offset UNIX_CRLF
				        ;call	PRINT_MSG
					;retn
					; 20/01/2020
 11A4  E9 F11D				jmp	PRINT_MSG
 11A7				suf_5:
 11A7  B9 0014				mov	cx, 20
 11AA				suf_6:
 11AA  32 FF			        xor	bh, bh ; mov bh, 0
 11AC  B3 07			        mov	bl, 7

 11AE  AC				lodsb
 11AF  3C 0D				cmp	al, 0Dh ; ENTER/RETURN Char
 11B1  75 03				jne	short suf_7
 11B3  49				dec	cx
 11B4  EB 04				jmp	short suf_8	
 11B6				suf_7:
 11B6  3C 09				cmp	al, 09h ; TAB Space Char
 11B8  74 22			        je	short suf_10
 11BA				suf_8:
 11BA  B4 0E			        mov	ah, 0Eh
				        ;xor	bh, bh ; mov bh, 0
				        ;mov	bl, 7
 11BC  CD 10				int	10h
 11BE				suf_9:
 11BE  4F				dec	di
 11BF  75 D4				jnz	short suf_3

					;mov	ax, word ptr [u_nread]

					; 20/01/2020
 11C1  A1 2778 R		        mov	ax, word ptr [inode_size]
 11C4  8B 16 277A R			mov	dx, word ptr [inode_size+2] 
 11C8  2B 06 27C2 R			sub	ax, word ptr [u_off]
 11CC  1B 16 27C4 R			sbb	dx, word ptr [u_off+2] 
 11D0  75 05				jnz	short suf_14 
 11D2				suf_13:
 11D2  3D 0200				cmp	ax, 512
 11D5  76 9E				jna	short suf_2
 11D7				suf_14:
 11D7  B8 0200				mov	ax, 512
 11DA  EB 99				jmp	short suf_2
 11DC				suf_10:
 11DC  51			        push	cx
				        ;xor	bh, bh ; mov bh, 0
 11DD  B4 03			        mov	ah, 03h ; get cursor position and size.
 11DF  CD 10			        int	10h
 11E1  8A C2				mov	al, dl
 11E3  B9 0008				mov	cx, 8
				;suf_11a:
				;	cmp	al, cl
				;	jb	short suf_11b
				;	sub	al, cl
				;	jmp	short suf_11a
				;suf_11b:
				;	sub	cl, al
 11E6				suf_11:
					; 07/01/2013
 11E6  32 E4				xor	ah, ah
 11E8  F6 F1				div	cl
 11EA  2A CC				sub	cl, ah	
					;
 11EC  B0 20			        mov	al, 20h
 11EE  B4 0E			        mov	ah, 0Eh 
				        ;mov	bl, 7 ; char color attribute	
 11F0				suf_12:
 11F0  CD 10				int	10h
 11F2  E2 FC			        loop	suf_12
 11F4  59			        pop	cx
 11F5  EB C7				jmp	short suf_9 

 11F7				show_file endp

 11F7				namei	proc near
					; 20/01/2020
					; 02/10/2019
					; 24/09/2019
					; 20/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)	
					; 04/12/2015 (14 byte file names)
					; 05/01/2013
					; 09/12/2012 unixcopy.asm
					;       Retro UNIX v1 FS file import/export version
					; 31/10/2012
					; 14/10/2012
				     	; 07/10/2012
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;
					; RETRO UNIX v1 FS
					;
					; return i-number of file (in AX)
					;
					; input:
					; u_namep = pointer to file path name
					; u_cdir = i-number of users directory
					; ;;u_cdev = device number
					; output:
					; cf= 0 -> no error, i-number in AX (R1)
					; cf= 1 -> error code in AX
					;	

 11F7  8B 36 27BC R			mov	si, word ptr [u_namep]
 11FB				namei_x: ; 02/10/2019 {si = [u_namep]}
 11FB  80 3C 2F				cmp	byte ptr [si], '/' ; is first char in file name a /
 11FE  75 0A				jne	short @f
 1200  B8 0001				mov	ax, ROOT_DIR_INODE_NUMBER ; = 41 ( = 1 for runix v2)
					; Put i-number of root directory in R1
					;xor	dx, dx
 1203  46				inc	si  ; go to next char
 1204  89 36 27BC R			mov	word ptr [u_namep], si
 1208  EB 03				jmp	short namei_0
 120A				@@:
					;mov	dx, word ptr [u_cdev]
 120A  A1 27BA R			mov	ax, word ptr [u_cdir] 
					; put i-number of current directory in R1
 120D				namei_0:
					;mov	word ptr [cdev], dx 
					; device file for users directory into cdev
				; 1
 120D  80 3C 00				cmp	byte ptr [si], 0 ; is the character in file name a nul
 1210  76 0F			        jna	short namei_7 ;nig

 1212				namei_1: ; 1
					; get i-node with i-number r1
 1212  E8 0109				call	iget
 1215  72 0A				jc	short namei_7

					;test	word ptr [inode_flgs], 4000h ; directory i-node ?
				        ;jz	short namei_6 ; got an error
 1217  F6 06 2771 R 40			test	byte ptr [inode_flgs+1], 40h ; 24/09/2019
 121C  75 04			        jnz	short @f
				;nib:
 121E				namei_6:
 121E  B4 FF				mov	ah, 0FFh ; Error code
 1220  F9				stc
				;nig:
 1221				namei_7:
 1221  C3				retn
 1222				@@:
 1222  A1 2778 R			mov	ax, word ptr [inode_size]
 1225  A3 27BE R			mov	word ptr [u_dirp], ax ; put size of directory in u.dirp
					
 1228  33 C0				xor	ax, ax 
 122A  A3 27C2 R			mov	word ptr [u_off], ax ; u.off is file offset used by user
					; 20/01/2020
 122D  A3 27C4 R			mov	word ptr [u_off+2], ax ; 29/12/2019

					;mov	word ptr [u_fofp], offset u.off
						; u.fofp is a pointer to the offset portion 
						; of fsp entry
 1230				namei_2: ; 2
 1230  C7 06 27C0 R 27CA R		mov	word ptr [u_base], offset u_dirbuf
						; u.dirbuf holds a file name copied from
						; a directory	
 1236  C7 06 27C6 R 0010		mov	word ptr [u_count], 16 ; 04/12/2015 (10 -> 16) 
					
 123C  A1 27DA R			mov	ax, word ptr [ii]
						
 123F  E8 004E				call	readi	; read 16 bytes of file with i-number (R1)
						; i.e. read a directory entry
 1242  72 DD				jc	short namei_7

 1244  8B 0E 27C8 R			mov	cx, word ptr [u_nread]

 1248  0B C9				or	cx, cx
 124A  76 D2				jna	short namei_6	; nib ; gives error return 
					
 124C  8B 1E 27CA R			mov	bx, word ptr [u_dirbuf]
 1250  23 DB				and	bx, bx       
 1252  75 0B				jnz	short namei_3	; 3f. branch when active directory entry
						; (i-node word in entry non zero)	
 1254  A1 27C2 R			mov	ax, word ptr [u_off]
 1257  83 E8 10				sub	ax, 16   ; 04/12/2015 (10 -> 16)
 125A  A3 27BE R			mov	word ptr [u_dirp], ax
 125D  EB D1				jmp	short namei_2 ; 2b

 125F				namei_3: ; 3
 125F  8B 36 27BC R			mov	si, word ptr [u_namep] ; r2, u.namep points into a file name string
 1263  BF 27CC R			mov	di, offset u_dirbuf + 2 ; r3, points to file name of directory entry
 1266  BA 27DA R			mov	dx, offset u_dirbuf + 16 ; 04/12/2015 (10 -> 16)
 1269				@@:	; 3
 1269  AC				lodsb  ; mov al, byte ptr [SI], inc si   (al = r4)
 126A  0A C0			 	or	al, al
 126C  74 0D				jz	short namei_4 ; 3f. If char is nul, then the last char in string has
						; been compared
 126E  3C 2F				cmp	al, "/"	; is char a "/"
 1270  74 09				je	short namei_4 ; 3f
 1272  3B FA				cmp	di, dx	; offset u_dirbuf + 16 ; 04/12/2015 (10 -> 16) ; r3, 
						; have i checked all 14 bytes of file name
 1274  74 F3				je	short @b ; 3b
 1276  AE				scasb		; cmpb (r3)+, r4   (DI=R3, AL=R4)
						; compare char in u.namep string to file name char
						; read from
 1277  74 F0				je	short @b ; directory; brach if chars match
					
 1279  EB B5				jmp	short namei_2 ; 2b
						; File names do not match, go to next directory entry 	
 127B				namei_4: ; 3
 127B  3B FA				cmp	di, dx	; offset u_dirbuf + 16 ; 04/12/2015 (10 -> 16) ; r3, 
						; if equal all 14 bytes were matched
 127D  74 06				je	short namei_5 ; 3f

 127F  8A 25				mov	ah, byte ptr [di]
					;inc	di  ; 05/01/2013
 1281  22 E4				and	ah, ah  ; tstb (r3)+, bne 2b
 1283  75 AB				jnz	short namei_2 ; 2b

 1285				namei_5: ; 3
 1285  89 36 27BC R			mov	word ptr [u_namep], si ; r2
						; u.namep points to char following a "/" or nul
					;mov	bx, word ptr [u_dirbuf] ; r1
					
 1289  22 C0				and	al, al	; r4. If r4=0 the end of file name reached,
						; if r4="/" then go to next directory
 128B  8B C3				mov	ax, bx

 128D  75 83			        jnz	namei_1 ; 1b

 128F  C3				retn

 1290				namei	endp

 1290				readi	proc near
					; 20/01/2020 (32 bit file pointer/offset)
					; 20/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)	
					; 01/03/2013
					; 14/10/2012
					; Boot sector version of "readi" procedure
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;;AX (R1) = i-number 
					; RETRO UNIX v1 FS
					; Boot sector version
					;
					; read from an i-node
					;
					; 20/01/2020
					; INPUT:
					;	ax = inode number
					;	word [u_count] = count
					;	[u_fofp] = u_off
					;	dword ptr [u_off] = file pointer
					;	dword [inode_size] = file size
					;	
					; OUTPUT:
					;	ax = inode number
					;	cf = 0 -> reading ok, [Error] = 0
					;	cf = 1 -> error, error code in [Error] 
					; 	
					; Modified registers: bx,dx,cx,si,di

 1290  33 D2				xor	dx,dx ; 0
 1292  89 16 27C8 R			mov	word ptr [u_nread],dx ; accumulated number of bytes transmitted
 1296  39 16 27C6 R			cmp	word ptr [u_count],dx ; is number of byte to read greater than 0
 129A  76 18				jna	short readinode_retn

 129C				readinode_1:
					; AX = I-Number
 129C  50				push	ax ; *

 129D  E8 007E				call	iget	; get i-node into i-node section of core
 12A0  72 11				jc	short readinode_3 ; 01/03/2013

					; 20/01/2020
 12A2  A0 2771 R			mov	al,byte ptr [inode_flgs+1]
 12A5  A8 80				test	al,80h	; regular file ?
 12A7  75 0C				jnz	short readinode_4	; yes
 12A9  A8 20				test	al,20h 	; device file ?
					;;jnz	short readinode_5 ; yes
					;jz	short readinode_4
					;;test	al,40h	; directory ?
					;;jnz	short readinode_4 ; yes
 12AB  74 08				jz	short readinode_4

					; 29/12/2019
 12AD  C6 06 28EB R FF			mov	byte ptr [Error],0FFh ; invalid file

 12B2				readinode_5:
 12B2  F9				stc
 12B3				readinode_3:
 12B3  58				pop	ax ; * ; i-number
 12B4				readinode_retn:
 12B4  C3				retn 

 12B5				readinode_4:
					; 20/01/2020
					;mov	si,word ptr [u_fofp]

 12B5  BE 27C2 R			mov	si,offset u_off

					; 32 bit file size & 32 bit file pointer (17/12/2019)

 12B8  A1 2778 R			mov	ax,word ptr [inode_size]  ; file size lw
 12BB  8B 16 277A R			mov	dx,word ptr [inode_size+2] ; file size rw
					; Note: we don't regard 5th byte of file size (inode_size_h) for now!

 12BF  2B 04				sub	ax,word ptr [si]
 12C1  1B 54 02				sbb	dx,word ptr [si+2]
 12C4  75 0D				jnz	short readinode_2 ; remain bytes more than requested count

 12C6  0B C0				or	ax,ax
 12C8  74 E9				jz	short readinode_3

 12CA  3B 06 27C6 R			cmp	ax,word ptr [u_count] 
					; are enough bytes left in file to carry out read
 12CE  73 03				jnb	short readinode_2 ; remain bytes more than requested count
 12D0  A3 27C6 R			mov	word ptr [u_count],ax  ; fix read count to end of file

 12D3				readinode_2:
 12D3  E8 00DA				call	mget	; returns physical block number of block in file 
						; where offset points
 12D6  72 DB				jc	short readinode_3 ; 01/03/2013
					; AX = Physical block number

					; 20/01/2020
					; Check current sector in the buffer

 12D8  80 3E 27DF R 01			cmp	byte ptr [buff_m],1
 12DD  72 19				jb	short readinode_6

 12DF  8B 16 27E0 R			mov	dx,word ptr [buff_s]
					;or	dx,dx
					;jz	short readinode_sioreg ; buff_s = 0 is invalid	
					;cmp	dx,0FFFFh  ; buff_s = 0FFFFh is invalid
					;je	short readinode_sioreg

					; write buffer content if sector is not same

 12E3  3B D0				cmp	dx,ax
 12E5  74 22				je	short readinode_sioreg

 12E7  50				push	ax
					;mov	ax,word ptr [buff_s]
 12E8  8B C2				mov	ax,dx
 12EA  BB 3590 R			mov	bx,offset Buffer
 12ED  E8 047F				call	dskwr
 12F0  58				pop	ax
 12F1  72 C0				jc	short readinode_3
 12F3  C6 06 27DF R 00			mov	byte ptr [buff_m],0

 12F8				readinode_6:	
 12F8  3B 06 27E0 R			cmp	ax,word ptr [buff_s]
 12FC  74 0B				je	short readinode_sioreg

 12FE  BB 3590 R			mov	bx,offset Buffer
 1301  E8 0472				call	dskrd	; read in block, BX points to 1st word of data in
						; buffer
 1304  72 AD				jc	short readinode_3

 1306  A3 27E0 R			mov	word ptr [buff_s],ax

 1309				readinode_sioreg:
					;mov	si,word ptr [u_off] ; R2
					;mov	cx,si ; cx = R3, si = R2
					
					; 20/01/2020
 1309  E8 04E7				call	sioreg

					; SI = file (user data) offset
					; DI = sector (I/O) buffer offset
					; CX = byte count

 130C  87 F7				xchg	si,di

 130E  F3/ A4			        rep	movsb

					;pop	ax ; * ; i-number

 1310  83 3E 27C6 R 00			cmp	word ptr [u_count],0
					;;ja	short readinode_1
 1315  77 9E				ja	short readinode_4

 1317  C6 06 28EB R 00			mov	byte ptr [Error],0

					;retn

 131C  58				pop	ax ; * ; i-number

 131D  C3				retn 

 131E				readi	endp

 131E				iget 	proc near
					; 20/01/2020
					; 25/09/2019
					; 20/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)	
					;
					; 18/11/2012 unix boot file configuration version
					; of "iget" procedure.
					; 16/9/2012
				     	; 14/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; AX=R1 
					; RETRO UNIX v1 FS
					;; return => if cf=1 error number in [Error] 

					; 20/01/2020
					; INPUT:
					; 	AX = inode number (0 if current inode)
					; OUTPUT:
					;	BX = inode number if cf = 0
					;	
					; Modified registers: ax, bx, cx, dx  

 131E  3B 06 27DA R			cmp	ax,word ptr [ii] ; AX (R1) = i-number of current file
 1322  74 29				je	short iget_4
 1324				iget_1:
					; 20/09/2019
					;mov	dl,byte ptr [imod]
					;and	dl,dl ; has i-node of current file been modified ?	
					;jz	short iget_2

 1324  33 D2				xor	dx, dx
 1326  39 16 27B2 R			cmp	word ptr [imod],dx ; 0  ; byte ptr [imod] & byte ptr [imodx]
 132A  74 14				jz	short iget_2

					; 20/01/2020
					;;xor	dl,dl ; mov al,0
					;;mov	byte ptr [imod],dl
					;mov	word ptr [imod],dx ; 0 
					
 132C  50				push	ax ; * ; inode number
 132D  A1 27DA R			mov	ax,word ptr [ii]	
					;inc	dl ; mov dl, 1
 1330  B2 01				mov	dl,1 ; 20/01/2020
					; dl = 1 = write
 1332  E8 0019				call	icalc
 1335  5A				pop	dx  ; inode number, 1 to 256 (for 1.44MB fd)
 1336  72 15				jc	short iget_4 ; error code in ax

					; 20/01/2020
 1338  8B C2				mov	ax,dx
 133A  33 D2				xor	dx,dx
 133C  89 16 27B2 R			mov	word ptr [imod],dx ; 0 ; reset [imod] & [imodx]
 1340				iget_2:
 1340  23 C0				and	ax,ax
 1342  74 06				jz	short iget_3
 1344  A3 27DA R			mov	word ptr [ii],ax
					;xor	dl,dl	
					; dl = 0 = read
 1347  E8 0004				call	icalc
 134A				iget_3:
 134A  A1 27DA R			mov	ax,word ptr [ii]
 134D				iget_4:
 134D  C3				retn

 134E				iget	endp

 134E				icalc 	proc near
					; 20/01/2020
					; 19/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)	
					;
					; 18/11/2012 unix boot file configuration version
					; of "icalc" procedure.
					; 17/8/2012
				     	; 14/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; AX=R1
					; 0 = read, 1 = write
					; RETRO UNIX v1 FS
					;
				        ; i-node is located in block (i+47)/16 and
					; begins 32*(i+47) mod 16 bytes from its start
					;; return => if cf=1 error number in [Error]

					; input -> dl = 0 -> read, 1 = write
					;	  ax = inode number

					; modified registers: ax, dx, cx, bx

					; 20/01/2020
 134E  88 16 27B4 R			mov	byte ptr [I_rw], dl ; 0 = read, 1 = write

					;;add	ax, 47 ; add 47 to inode number
					;add	ax, 31 ; add 31 to inode number ; 19/09/2019

					; 20/01/2020
 1352  48				dec	ax ; zero based inode number
					; ax = 0 to 255
 1353  8B 16 33B8 R			mov	dx, word ptr [systm.sb_InodeTblAddr] ; 4 for 1.44MB fd

 1357  50				push	ax	; * ; R1 -> -(SP)

 1358  D1 E8				shr	ax, 1   ; divide by 8 for Retro UNIX 386 v2
 135A  D1 E8				shr	ax, 1   ;	(8 inodes per sector)
 135C  D1 E8				shr	ax, 1
					; ax contains block number of block
					; in which inode exists

 135E  BB 3790 R			mov	bx, offset I_buffer

 1361  80 3E 27B5 R 00			cmp	byte ptr [I_valid], 0
 1366  76 0B				jna	short icalc_0

 1368  3B 06 27B6 R			cmp	ax, word ptr [I_sector]
 136C  74 16				je	short icalc_1
					
 136E  C6 06 27B5 R 00			mov	byte ptr [I_valid], 0 ; inode sector validation, invalid
 1373				icalc_0:
 1373  A3 27B6 R			mov	word ptr [I_sector], ax
 1376  03 C2				add	ax, dx 
					; ax = physical address of requested inode sector

					;mov	bx,offset I_buffer

 1378  E8 03FB				call	dskrd
 137B  73 02				jnc	short @f

					; disk read error
 137D  5A				pop	dx ; *
 137E  C3				retn
 137F				@@:
 137F  C6 06 27B5 R 01			mov byte ptr [I_valid],1 ; inode sector validation, valid
 1384				icalc_1:
					;and	dx, 0Fh	; (i+47) mod 16
					;shl	dx, 1
					;shl	dx, 1
					;shl	dx, 1
					;shl	dx, 1
					;shl	dx, 1 
					 ; DX = 32 * ((i+47) mod 16)	
					  ; DX (R5) points to first word in i-node i.
					
					; 20/01/2020
 1384  58				pop	ax ; * ; zero based inode number

 1385  8B F3				mov	si, bx ; offset I_buffer

 1387  83 E0 07				and	ax, 07h 
 138A  74 06				jz	short @f

 138C  B1 06				mov	cl, 6
 138E  D3 E0				shl	ax, cl
					; DX = 64 * ((i+31) mod 8)
					; DX points to first word in i-node i.	

 1390  03 F0				add	si, ax
 1392				@@:
 1392  BF 2770 R			mov	di, offset inode
					; inode is address of first word of current inode

					;mov	cx, 16 ; CX = R3
					; 19/09/2019	
 1395  B9 0020				mov	cx, 32 ; inode size/2 for Retro UNIX 386 v2 (& UNIX v7)

 1398  80 3E 27B4 R 00			cmp	byte ptr [I_rw],0
 139D  76 0E				jna	short icalc_3 ; 0 = read (and copy i-node to memory) 
 139F				icalc_2:
 139F  87 F7				xchg	si,di
					; over write old i-node (in buffer to be written)
 13A1  F3/ A5				rep	movsw

					; 20/01/2020

 13A3  A1 27B6 R			mov	ax, word ptr [I_sector]
 13A6  03 06 33B8 R			add	ax, word ptr [systm.sb_InodeTblAddr]

					;mov	bx, offset I_buffer

					; bx = offset I_buffer

					;call	dskwr
				      	
				        ;retn

 13AA  E9 03C2				jmp	dskwr ; 25/09/2019 
 13AD				icalc_3:
					; copy new i-node into inode area of (core) memory
 13AD  F3/ A5				rep	movsw
 13AF				icalc_4:
 13AF  C3				retn

 13B0				icalc 	endp

 13B0				mget 	proc near
					; 27/03/2022
					; 25/01/2020
					; 23/01/2020
					; 22/01/2020
					; 21/01/2020
					; 20/01/2020 (32 bit file pointer/offset)
					;	    ! (16 bit disk sector address) !	
					; 19/09/2019 - Retro UNIX 386 v2
					; 	(simplified for initialization floppy disk)
					;	NOTE: Maximum file size is -still- 65535 bytes  
					;	     at this stage (for initialization floppy)  
					; 05/03/2013
					; 03/03/2013
					; 01/03/2013
					; 18/11/2012
					; 14/11/2012 unix boot file configuration version
					; of "mget" procedure
					; 31/10/2012
					; 20/10/2012
					; 19/8/2012
					; 13/8/2012
					; 27/7/2012
				     	; 21/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; return -> AX=R1
					; RETRO UNIX v1 FS
					; initialization/format version
					; cf -> 1 = error (no free block)

					; 20/01/2020
					; INPUT:
					;	[u_off] = file pointer
					; OUTPUT:
					;	ax = sector/block address
					;
					; Modified registers: ax,dx,cx,bx,si,di

					;push	bx
					;push	cx
					;push	dx
					;; contents of bx, cx, dx will be destroyed 
 13B0				mget_0:
					;mov	bl,byte ptr [u_off+1] ; Max. file size = 64KB-1
				        ;xor	bh,bh

					; 20/01/2020
 13B0  BB 27C2 R			mov	bx,offset u_off

 13B3  8B 07				mov	ax,word ptr [bx]
 13B5  8B 57 02				mov	dx,word ptr [bx+2]

				  	;test	word ptr [inode_flgs],4096 ; 1000h
						      ; is this a large or small file
					;jnz	short mget_8 ; 4f ; large file

 13B8  F6 06 2771 R 10			test	byte ptr [inode_flgs+1],16 ; 10h
					;jnz	short mget_8 ; not small file
					; 22/01/2020
 13BD  74 03				jz	short @f
 13BF  E9 00A4				jmp	mget_8	
 13C2				@@:	
				        ;test	bl,0F0h ; !0Fh  ; error if BX (R2) >= 16	    
					;jnz	short mget_3

					; small file size limit = 5120 bytes (1400h)

 13C2  0B D2				or	dx,dx
 13C4  75 52				jnz short mget_3 ; requested file offset > 65535

					; 19/09/2019
					;cmp	bl,14h
					; 20/01/2020
 13C6  80 FC 14				cmp	ah,14h
 13C9  73 4D				jnb	short mget_3 ; 3f ; requested offset >= 5120

					; 01/12/2019
 13CB  8A DC				mov	bl,ah  ; div ax by 256
 13CD  32 FF				xor	bh,bh

					;and	bl,0Eh  ; clear all bits but bits 1,2,3
 13CF  80 E3 1E				and	bl,1Eh  ; 19/09/2019 ; clear all bits but bits 1,2,3,4

 13D2  D0 E3				shl	bl,1 ; 19/09/2019 - Retro UNIX 386 v2

 13D4  8B 87 277C R			mov	ax,word ptr [inode_dskp+bx] ; AX = R1, physical block number
 13D8  0B C0				or	ax,ax
 13DA  75 3B				jnz	short mget_2	; if physical block number is zero
						; then need a new block for file
					; 20/01/2020
					;or	dx,dx
					;jnz	short mget_2

 13DC  E8 0141				call	alloc	; allocate a new block for this file	
						; AX (R1) = Block number
					;jc	short mget_6 ; cf -> 1 & ax = 0 -> no free block

					; 22/01/2020
 13DF  73 01				jnc	short @f

 13E1				mget_6: 
					;mov	ax,err_NOFREEBLOCK

					;pop	dx
					;pop	cx
					;pop	bx
 13E1				mget_7:
 13E1  C3				retn
 13E2				@@:
 13E2  89 87 277C R			mov	word ptr [bx+inode_dskp],ax
					; 20/01/2020
					;mov	word ptr [bx+inode_dskp+2],dx ; 0 

 13E6  E8 01E6				call	setimod

					; 20/01/2020
 13E9  BB 3590 R			mov	bx,offset Buffer

 13EC  80 3E 27DF R 00			cmp	byte ptr [buff_m],0 ; buffer modified ?
 13F1  76 0F				jna	short mget_1

 13F3  50				push	ax
 13F4  A1 27E0 R			mov	ax,word ptr [buff_s]
					;mov	bx,offset Buffer
 13F7  E8 0375				call	dskwr
 13FA  58				pop	ax
 13FB  72 1A				jc	short mget_2
 13FD  C6 06 27DF R 00			mov	byte ptr [buff_m],0 ; reset buffer modified sign
 1402				mget_1:
 1402  A3 27E0 R			mov	word ptr [buff_s],ax

 1405  C6 06 27DF R 01			mov	byte ptr [buff_m],1 ; set buffer modified sign

 140A  E8 0213				call	clear	; clear Buffer

					; BX = offset Buffer

 140D  E8 035F				call	dskwr
 1410  72 05				jc	short mget_2

 1412  C6 06 27DF R 00			mov	byte ptr [buff_m],0 ; reset buffer modified sign
					
 1417				mget_2: ; 2
					; AX (R1) = Physical block number (if cf = 0)

					;pop	dx
					;pop	cx
					;pop	bx

 1417  C3				retn 

 1418				mget_3: ; 3
					; adding on block which changes small file to large file
 1418  E8 0105				call	alloc 
 141B  72 C4				jc	short mget_6 ; 01/03/2013 
					; call	wslot  ; setup I/O buffer for write
					;	  ; R5 points to the first data word in buffer

					;push	ds
					;pop	es

					; 20/01/2020
 141D  BB 3590 R			mov	bx,offset Buffer

 1420  80 3E 27DF R 00			cmp	byte ptr [buff_m],0 ; buffer modified ?
 1425  76 0F				jna	short mget_4

 1427  50				push	ax ; +
 1428  A1 27E0 R			mov	ax,word ptr [buff_s]
					;mov	bx,offset Buffer
 142B  E8 0341				call	dskwr
 142E  58				pop	ax  ; +
 142F  72 E6				jc	short mget_2
 1431  C6 06 27DF R 00			mov	byte ptr [buff_m],0 ; reset buffer modified sign
 1436				mget_4:
 1436  A3 27E0 R			mov	word ptr [buff_s],ax  ; Block/Sector number

					; 13/01/2020 (si, di)
					;push	si
					;push	di
 1439  50				push	ax ; *

					;mov	cx,8	; R3, transfer old physical block pointers
						; into new indirect block area for the new
						; large file	
 143A  B9 000A				mov	cx,10 ; 15/09/2019	
					; 09/11/2019
					;mov	di,offset Buffer ; BX = R5

					; 26/01/2020
 143D  BE 277C R			mov	si,offset inode_dskp

					; 20/01/2020
 1440  8B FB				mov	di,bx ; offset Buffer 

 1442  33 C0				xor	ax,ax ; mov ax,0
 1444				mget_5: ; 1
 1444  A5				movsw
					; 29/09/2019
 1445  89 44 FE				mov	word ptr [si-2], ax
					; 19/09/2019
 1448  A5				movsw
 1449  89 44 FE				mov	word ptr [si-2], ax 
 144C  E2 F6				loop	mget_5
					
					;mov	cl, 256-8 ; clear rest of data buffer
 144E  B1 EC				mov	cl, 256-20 ; 19/09/2019

 1450  F3/ AB				rep	stosw  ; clear buffer offset 40 to 512 (472 bytes)

 1452  58				pop	ax ; *
					;pop	di
					;pop	si

					;mov	byte ptr [buff_m], 1 ; modified

 1453  E8 0319				call	dskwr	
 1456  72 89				jc	short mget_7 ; 20/01/2020

					;mov	ax, word ptr [buff_s]

 1458  A3 277C R			mov	word ptr [inode_dskp], ax

					;or	word ptr [inode_flgs], 4096 ; 1000h
					; 19/09/2019
 145B  80 0E 2771 R 10			or	byte ptr [inode_flgs+1], 16 ; 10h 
					
 1460  E8 016C				call	setimod

 1463  E9 FF4A				jmp	mget_0

				;mget_6: 
				;	;mov	ax, err_NOFREEBLOCK
				;
				;	;pop	dx
				;	;pop	cx
				;	;pop	bx
				;mget_7:
				;	retn

 1466				mget_8: ; 4 ; large file
					; 20/01/2020
					; (32 bit file size <= 512KB)
				 	
					; Retro UNIX 386 v2 disk inode contains..
					; (if large file flag is set)
					; 8 indirect disk block/sector dword pointers
					; +1 double indirect disk block/sector dword pointers
					; +1 triple indirect disk block/sector dword pointers

					; check indirect pointers limit (as file offset)
					; 8*128 = 1024 blocks (or sectors) or 512 KB
					; check dx (file offset hw) value

 1466  83 FA 08				cmp	dx,08h ; 524288 = 080000h
 1469  72 02				jb	short mget_9 ; proper for runix floppy disk (<=512KB)

				 	; (!this 'mget' can not handle double indirect pointers!)
					; (!also it is nonsence if we would use >512Kb files for runix fd!)

 146B  F9				stc  ; error ! (big file!)
 146C  C3				retn
 146D				mget_9:
					; 20/01/2020
 146D  B9 0009				mov	cx,9
 1470  E8 065A				call	shr32
					; ax = sector offset (flat)
					; dx = 0
 1473  8A C8				mov	cl,al
 1475  80 E1 7F				and	cl,127
 1478  88 0E 27B0 R			mov	byte ptr [index],cl ; direct sector/pointer index (0 to 127)
 147C  B1 07				mov	cl,7	
					;call	shr32
 147E  D3 E8				shr	ax,cl  ; 13/01/2020
					; ax = indirect pointer index (<= 7)
					; dx = 0
 1480  D0 E0				shl	al,1
 1482  D0 E0				shl	al,1
 1484  8B F0				mov	si,ax

					; ***

 1486  8B 84 277C R			mov	ax,word ptr [si+inode_dskp]

 148A  BB 3590 R			mov	bx,offset Buffer
					
 148D  0B C0				or	ax,ax
 148F  75 38				jnz	short mget_14	; if physical block number is zero
						; then we need a new block for file
					
 1491  E8 008C				call	alloc	; allocate a new block for this file	
						; AX (R1) = Block number
					;;jc	mget_6	; cf -> 1 & ax = 0 -> no free block
					; 27/03/2022
					;jnc	short @f
					;jmp	mget_6 ; retn ; 27/03/2022
 1494  72 15				jc	short mget_11
				;@@:
 1496  89 84 277C R			mov	word ptr [si+inode_dskp],ax
					;mov	word ptr [si+inode_dskp+2],dx ; 0

 149A  80 3E 27DF R 00			cmp	byte ptr [buff_m],0 ; buffer modified ?
 149F  76 0B				jna	short mget_12
 14A1				mget_10:
 14A1  50				push	ax
 14A2  A1 27E0 R			mov	ax,word ptr [buff_s]
					;mov	bx,offset Buffer
 14A5  E8 02C7				call	dskwr
 14A8  58				pop	ax
					;jc	short mget_6
					;mov	byte ptr [buff_m],0 ; reset buffer modified sign
 14A9  73 06				jnc	short mget_13
 14AB				mget_11:
 14AB  C3				retn
 14AC				mget_12:
 14AC  C6 06 27DF R 01			mov	byte ptr [buff_m],1  ; buffer modified
 14B1				mget_13:
 14B1  E8 016C				call	clear ; clear buffer

 14B4  E8 0118				call	setimod

 14B7  A3 27E0 R			mov	word ptr [buff_s],ax

					; 25/01/2020 ('setimod' modifies bx register)
 14BA  BB 3590 R			mov	bx,offset Buffer

 14BD  E8 02AF				call	dskwr
 14C0  72 E9				jc	short mget_11

 14C2  C6 06 27DF R 00			mov	byte ptr [buff_m],0 ; reset buffer modified sign
 14C7  EB 24				jmp	short mget_16
 14C9				mget_14:
 14C9  3B 06 27E0 R			cmp	ax,word ptr [buff_s]
 14CD  74 1E				je	short mget_16
					
 14CF  80 3E 27DF R 00			cmp	byte ptr [buff_m],0 ; buffer modified ?
 14D4  76 0F				jna	short mget_15

 14D6  50				push	ax
 14D7  A1 27E0 R			mov	ax,word ptr [buff_s]
					;mov	bx,offset Buffer
 14DA  E8 0292				call	dskwr
 14DD  58				pop	ax
 14DE  72 CB				jc	short mget_11

 14E0  C6 06 27DF R 00			mov	byte ptr [buff_m],0 ; reset buffer modified sign
 14E5				mget_15:
					;mov	bx,offset Buffer	
 14E5  E8 028E				call	dskrd
 14E8  72 C1				jc	short mget_11

 14EA  A3 27E0 R			mov	word ptr [buff_s],ax
 14ED				mget_16:
					; 21/01/2020
					;mov	si,offset Buffer
					;mov	bl,byte ptr [index] ; direct sector/pointer index (0 to 127)
					;cmp	bl,127 ; *!*
					;ja	short mget_17

					; 23/01/2020
					;mov	bx,offset Buffer
 14ED  80 3E 27B0 R 7F			cmp	byte ptr [index],127 ; 7Fh
 14F2  77 2B				ja	short mget_18
 14F4  8B F3				mov	si,bx
 14F6  8A 1E 27B0 R			mov	bl,byte ptr [index]

 14FA  C6 06 27B0 R FF			mov	byte ptr [index],0FFh ; 255 ; *!* ; 21/01/2020	

 14FF  32 FF				xor	bh,bh
 1501  D0 E3				shl	bl,1
 1503  D1 E3				shl	bx,1

 1505  03 DE				add	bx,si ; offset Buffer

 1507  8B 07				mov	ax,word ptr [bx]

 1509  0B C0				or	ax,ax
 150B  75 10				jnz	short mget_17	; if physical block number is zero
						; then we need a new block for file
 150D  E8 0010				call	alloc	; allocate a new block for this file	
						; AX (R1) = Block number
					;jc	short mget_6 ; cf -> 1 & ax = 0 -> no free block
					; 22/01/2020
 1510  72 0D				jc	short mget_18

 1512  89 07				mov	word ptr [bx],ax

 1514  C6 06 27DF R 01			mov	byte ptr [buff_m],1 ; set buffer modified sign
 1519  8B DE				mov	bx,si ; offset Buffer
 151B  EB 84				jmp	short mget_10

 151D				mget_17:
					; ax = (direct) disk sector/block address
 151D  8B DE				mov	bx,si ; offset Buffer
 151F				mget_18:
 151F  C3				retn

 1520				mget	endp

 1520				alloc	proc near
					; 28/03/2022
					; 25/01/2020
					; 23/01/2020
					; 21/01/2020
					; 20/01/2020
					; 19/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)	
					;
					; 14/11/2012 unix boot file configuration version
					; of "alloc" procedure
					; 21/8/2012
					; 18/8/2012
					; 17/8/2012
					; 5/8/2012	
				 	; 21/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; input -> AX=R1 
					;; output -> AX=R1
					; RETRO UNIX v1 FS

					; 20/01/2020
					;; input -> none
					;; output -> AX = allocated sector/block number
					;; 	cf = 1 -> could not be allocated
					; Modified registers: cx, dx

					;push	cx
 1520  53				push	bx ; R2
					;push	dx ; R3

					;mov	bx, offset systm ; SuperBlock 
					; start of inode and free storage map for disk
 1521				alloc_1: ; 1
					;mov	ax, word ptr [systm.sb_FreeMapSize] 
						; # of bytes in free storage map
					;shl	ax, 1	; multiply AX (R1) by 8 gives # of blocks
					;shl	ax, 1
					;shl	ax, 1
					;mov	cx, ax ; R1, bit count of free storage map

					; 25/01/2020
 1521  8B 0E 33AC R			mov	cx, word ptr [systm.sb_FreeMapSize] 
						; # of bytes in free storage map	
 1525  D1 E1				shl	cx, 1	; multiply CX by 8 gives # of blocks
 1527  D1 E1				shl	cx, 1
 1529  D1 E1				shl	cx, 1

 152B  BB 3F8E R			mov	bx, offset fbm_buffer-2
							; 19/09/2019 - Retro UNIX 386 v2
 152E  33 C0				xor	ax, ax ; 0
 1530				alloc_2: ; 1
 1530  43				inc	bx ; 18/8/2012
 1531  43				inc	bx ; 
 1532  8B 17				mov	dx, word ptr [bx] ; mov (R2)+, R3
 1534  0B D2				or	dx, dx
 1536  75 0C				jnz	short alloc_3 ; 1f
						; branch if any free blocks in this word	
 1538  83 C0 10				add	ax, 16
 153B  3B C1				cmp	ax, cx    
 153D  72 F1				jb	short alloc_2 ; 1b

					;jmp	short panic ; no free storage 

 153F  33 C0				xor	ax, ax
 1541  F9				stc	; cf=1 --> error: no free block

 1542  EB 47				jmp	short alloc_7	

 1544				alloc_3: ; 1
 1544  D1 EA			        shr	dx, 1	; R3  ; Branch when free block found,
						; bit for block k is in byte k/8 
						; in bit k (mod 8) 	
 1546  72 03				jc	short alloc_4 ; 1f
 1548  40				inc	ax ; R1	; increment bit count in bit k (mod 8)    
 1549  EB F9				jmp	short alloc_3 ; 1b
					
 154B				alloc_4:
					;call	free_3

 154B				alloc_free_3:	
 154B  BA 0001				mov	dx, 1	
					;mov	cx, ax
					;and	cx, 0Fh
					; 23/01/2020
 154E  8A C8				mov	cl, al
 1550  80 E1 0F				and	cl, 0Fh
 1553  74 02				jz	short @f
 1555  D3 E2				shl	dx, cl
 1557				@@:
 1557  8B D8				mov	bx, ax
 1559  D1 EB				shr	bx, 1
 155B  D1 EB				shr	bx, 1
 155D  D1 EB				shr	bx, 1
 155F  D1 EB				shr	bx, 1
 1561				free_4: ; 1
 1561  D1 E3				shl	bx, 1 ; 21/8/2012
				         ; BX (R2) = k/8	
					;add	bx, offset systm+2 ; SuperBlock+2
 1563  81 C3 3F90 R			add	bx, offset fbm_buffer ; 19/09/2019

 1567				alloc_5: ; 1 
					; 21/8/2012
 1567  F7 D2				not	dx ; masking bit is '0' and others are '1'
 1569  21 17				and	word ptr [bx], dx  ; bic r3, (r2) 	
					; 0 -> allocated

					; 21/01/2020
 156B  8B 0E 33CA R			mov	cx, word ptr [systm.sb_FreeBlocks+2]
 156F  23 C9				and	cx, cx
 1571  75 0B				jnz	short @f ; (cx = 0FFFFh)
 1573  8B 0E 33C8 R			mov	cx, word ptr [systm.sb_FreeBlocks] 
 1577  41				inc	cx
 1578  74 04				jz	short @f ; (cx = 0FFFFh) -> (cx = 0) 

					; 29/09/2019
 157A  FF 0E 33C8 R			dec	word ptr [systm.sb_FreeBlocks]
 157E				@@:
					; 28/03/2022
					; (first free block has been searched from block 0;
					;  so, ax contains previous first free block value and
					;  it is better if the new value is set one/just next to ax)
				  
 157E  8B D0				mov	dx, ax
 1580  42				inc	dx ; next block 
						   ; (next ffb search will be started from)
 1581  89 16 33CC R			mov	word ptr [systm.sb_FirstFreeBlk], dx
 1585  2B D2				sub	dx, dx
 1587  89 16 33CE R			mov	word ptr [systm.sb_FirstFreeBlk+2], dx

					; 28/03/2022
					;; 21/01/2020
					;sub	dx, dx
					;cmp	ax, word ptr [systm.sb_FirstFreeBlk]
					;;jne	short alloc_6
					;ja	short alloc_6 ; 23/01/2020
					;
					;cmp	word ptr [systm.sb_FirstFreeBlk+2], dx ; 0
					;;jne	short alloc_6
					;ja	short alloc_6 ; 23/01/2020
					;
					;;mov	word ptr [systm.sb_FirstFreeBlk], 0FFFFh ; invalidate
					;;mov	word ptr [systm.sb_FirstFreeBlk+2], 0FFFFh
					;
					;; 21/01/2020
					;; set first free block to the next sector (in order)
					;;add	word ptr [systm.sb_FirstFreeBlk], 1
					;;adc	word ptr [systm.sb_FirstFreeBlk+2], 0
					;	
					;inc	word ptr [systm.sb_FirstFreeBlk]
 158B				alloc_6:
					;clc ; 23/01/2020
					;inc	byte ptr [smod] ; superblock modified sign
					;mov	byte ptr [smod], 1
 158B				alloc_7:
					;pop	dx ; R3
 158B  5B				pop	bx ; R2
					;pop	cx 
					; AX (R1) = Block number
 158C  C3				retn

 158D				alloc	endp

 158D				free	proc near
					; 23/01/2020
					; 22/01/2020
					; 21/01/2020
					; 10/09/2019 - Retro UNIX 386 v2
				        ; 01/12/2012
				        ; unix boot file configuration version
					; of "free" procedure of retro unix v1.0 by Erdogan Tan
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972 
					; ('free' procedure)
					; 
					; INPUT -> ax (R1) = physical block number
					; Return -> CF = 0 -> Successed, CF = 1 -> failed
					;		
					; Modified registers: cx, bx, dx

					;push	bx	; mov r2,-(sp) / save r2, r3
					;;push	cx	; mov r3,-(sp)
					;push	dx

					;call	free_3	; jsr r0,3f 
					; / set up bit mask and word no. in free storage map
					; / for block
 158D				free_3: ; 3
 158D  BA 0001				mov	dx,1    
					;mov	cx,ax   ; mov r1,r2 / block number, k, = 1
					;and	cx,0Fh  ; bic $!7,r2 / clear all bits but 0,1,2; r2 = (k) mod (8)
						; clr r3
					; 23/01/2020
 1590  8A C8				mov	cl,al
 1592  80 E1 0F				and	cl,0Fh
 1595  74 02				jz	short @f
						; bisb 2f(r2),r3 / use mask to set bit in r3 
						; corresponding to / (k) mod 8
 1597  D3 E2				shl	dx,cl
 1599				@@:
 1599  8B D8				mov	bx,ax	; mov r1,r2 / divide block number by 16
 159B  D1 EB				shr	bx,1	; asr r2	
 159D  D1 EB				shr	bx,1	; asr r2	
 159F  D1 EB				shr	bx,1	; asr r2	
 15A1  D1 EB				shr	bx,1	; asr r2
					   	; bcc 1f / branch if bit 3 in r1 was 0 i.e., 	
						; bit for block is in / lower half of word
						; swab r3 / swap bytes in r3; bit in 
						; upper half of word in free / storage map	
 15A3				free_1: ; 1
 15A3  D1 E3				shl	bx,1 ; asl r2 / multiply block number by 2; r2 = k/8
					;add	bx,offset systm+2 ; add $systm+2,r2 
						 ; / address of word of free storage map for drum
					   	 ; / with block bit in it
					; retn  ; rts r0 (return from free_3)
					; 10/09/2019
 15A5  81 C3 3F90 R			add	bx,offset fbm_buffer
 15A9				@@:
 15A9  09 17				or	word ptr [bx],dx  ; bis r3, (r2)
					; / set free storage block bit; indicates free block	
					; 0 -> allocated, 1 -> free

					;;inc	byte ptr [smod] ; incb smod / set superblock modified for drum
					;mov	byte ptr [smod],1 ; / set superblock modified for drum
					;pop	dx
					;pop	cx	; mov (sp)+,r3 / restore r2, r3
					;pop	bx	; mov (sp)+,r2
					; AX (R1) = Block number

					; 21/01/2020
 15AB  8B 0E 33CA R			mov	cx, word ptr [systm.sb_FreeBlocks+2]
 15AF  23 C9				and	cx, cx
 15B1  75 0B				jnz	short @f
 15B3  8B 0E 33C8 R			mov	cx, word ptr [systm.sb_FreeBlocks] 
 15B7  41				inc	cx
 15B8  74 04				jz	short @f

					; 29/09/2019
 15BA  FF 06 33C8 R			inc	word ptr [systm.sb_FreeBlocks]
 15BE				@@:
 15BE  33 D2				xor	dx, dx

 15C0  3B 06 33CC R			cmp	ax,word ptr [systm.sb_FirstFreeBlk]
 15C4  73 08				jnb	short @f
					
					; 21/01/2020
 15C6  A3 33CC R			mov	word ptr [systm.sb_FirstFreeBlk],ax

					; 22/01/2020
					;cmp	word ptr [systm.sb_FirstFreeBlk+2],dx ; 0
					;je	short @f

 15C9  89 16 33CE R			mov	word ptr [systm.sb_FirstFreeBlk+2],dx ; 0

 15CD  F8				clc
 15CE				@@:
 15CE  C3				retn

 15CF				free	endp

 15CF				setimod proc near
					; 25/01/2020
					; 30/09/2019
					; 19/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)	
					;
					; 23/02/2013 (fromdos) file m. date&time modification
					; 14/11/2012 unix boot file configuration version
					; of "setimod" procedure
					; 13/8/2012
					; 21/7/2012
					; 14/7/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;; AX=R0, BX=R1, CX=R3, DX=R5 
					; [SP] = Argument 1, 0 = read, 1 = write
					; RETRO UNIX v1 FS
					; initialization/format version

					; 25/01/2020
					; Modified registers: bx (in 'epoch'), cx, dx

					;push	dx
 15CF  50				push	ax
 15D0  C6 06 27B2 R 01			mov	byte ptr [imod], 1
					; 23/02/2013
 15D5  A1 27AC R			mov	ax, word ptr [inode_ctim]
 15D8  8B 16 27AE R			mov	dx, word ptr [inode_ctim]+2
 15DC  23 C0				and	ax, ax
 15DE  75 21				jnz	short setimod_3
 15E0  23 D2				and	dx, dx
 15E2  75 1D				jnz	short setimod_3
 15E4				setimod_1:
					; Erdogan Tan 14-7-2012
 15E4  E8 0242				call	epoch
 15E7  A3 27AC R			mov	word ptr [inode_ctim], ax
 15EA  89 16 27AE R			mov	word ptr [inode_ctim]+2, dx
					; 19/09/2019
 15EE  EB 08				jmp	short setimod_5
 15F0				setimod_6:
 15F0  F8				clc
 15F1				setimod_2:
					; File/Directory data (file size or content) is changed
					; This is last modification date&time
 15F1  A3 27A8 R			mov	word ptr [inode_mtim], ax
 15F4  89 16 27AA R			mov	word ptr [inode_mtim]+2, dx
 15F8				setimod_5:
					; 19/09/2019
					; This is last access or last changing date&time
					; of inode (chmod,chown,chrp,link)
					; parameters (without file/dir data changing)
 15F8  A3 27A4 R			mov	word ptr [inode_atim], ax
 15FB  89 16 27A6 R			mov	word ptr [inode_atim]+2, dx
 15FF				setimod_4:
 15FF  58				pop	ax
				        ;pop	dx
 1600  C3				retn
 1601				setimod_3:
				 	; 23/02/2013
 1601  33 C9				xor	cx, cx
 1603  39 0E 27A8 R			cmp	word ptr [inode_mtim], cx
 1607  76 E8				jna	short setimod_2
 1609  39 0E 27AA R			cmp	word ptr [inode_mtim]+2, cx
 160D  76 E2				jna	short setimod_2

 160F  E8 0217				call	epoch

					; 19/09/2019 - Retro UNIX 386 v2 by Erdogan Tan
 1612  80 3E 27B3 R 01			cmp	byte ptr [imodx], 1 ; flag means "file/dir data is same but
					;jb	short setimod_2	   ; inode is changed"
 1617  72 D7				jb	short setimod_6 ; 30/09/2019

					; 19/09/2019
					; File/Dir data (File size or content) is same but
					; inode's mode, link count, owner or group id is changed
					; (so, we do not change last modification date&time)
 1619  C6 06 27B3 R 00			mov	byte ptr [imodx], 0 ; reset inode modified (extended) flag
 161E  EB D8				jmp	short setimod_5

 1620				setimod endp

 1620				clear	proc near
					; 20/01/2020
					; 13/11/2019 - Retro UNIX 386 v2
					; (Data) Buffer clearing

					; Modified registers: cx, di
					
					;push	di
					;push	cx
 1620  50				push	ax

 1621  33 C0			 	xor	ax,ax

 1623  BF 3590 R			mov	di,offset Buffer
 1626  B9 0100				mov	cx,256 
 1629  F3/ AB				rep	stosw

 162B  58				pop	ax
					;pop	cx
					;pop	di	
 162C				@@:	
 162C  C3				retn

 162D				clear	endp

 162D				make_directory proc near
					; 15/04/2022 ('number of links' bugfix)
					; 24/01/2020
					; 04/12/2015 (14 byte directory names)	
					; 30/12/2012
					;
					; mov word ptr [u.namep], si

 162D  E8 F912				call	sys_mkdir
					;jc	short @f
 1630  72 FA				jc 	short @b

				        ;ax = i-number

					;mov	ax, word ptr [ii]
					;mov	word ptr [u_dirbuf], ax

 1632  C7 06 27BC R 28ED R		mov	word ptr [u_namep], offset dot ; ('.')
 1638  33 C0				xor	ax, ax
 163A  A3 27BE R			mov	word ptr [u_dirp], ax ; 0	
 163D  E8 002B				call	mkdir 	; make a directory entry 
							; in current (ii) directory
					;jc	short @f
 1640  72 EA				jc	short @b

 1642  C7 06 27BE R 0010		mov	word ptr [u_dirp], 16 ; 04/12/2015 (10 -> 16)
 1648  A1 2497 R			mov	ax, word ptr [pdir] 
 164B  A3 27CA R			mov	word ptr [u_dirbuf], ax
 164E  C7 06 27BC R 28EC R		mov	word ptr [u_namep], offset dotdot ; ('..')

					; 15/04/2022
				;	;call	mkdir
				;	; 20/01/2020
				;	;jmp	short mkdir
				;;@@:
				;	;retn

 1654  E8 0014				call	mkdir	; make a directory entry 
							; in current (ii) directory
					; 15/04/2022
					;jc	short @f
 1657  72 D3				jc	short @b ; 15/04/2022
 1659  E8 0008				call	mkdir_inc_nlinks	
 165C  A1 2497 R			mov	ax, word ptr [pdir] ; parent dirs i-number
 165F  E8 FCBC				call	iget
				        ;jc	short @f
 1662  72 C8				jc	short @b
 1664				mkdir_inc_nlinks:
 1664  FE 06 2772 R			inc	byte ptr [inode_nlks] ; increase link count
					;call	setimod
 1668  E9 FF64				jmp	setimod
				;@@:
				;	retn

 166B				make_directory endp

 166B				mkdir proc near
					; 20/01/2020
					; 19/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)
					;
					; 04/12/2015 (14 byte directory names)
					; 11/11/2012
					; unixboot.asm (boot file configuration)
					; version of 'mkdir'
					;
					; 31/10/2012
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					; RETRO UNIX v1 FS
					;
					; mkdir : make a directory entry
					;
					; 8086 CPU & IBM PC architecture modifications by Erdogan Tan 
					;
					; return => if cf=1 error number in [Error], ax = mode
					; If cf=0 -> AX = I-Number (also in u.dirbuff)
					;
					; input:
					; 	u.namep = file name
					; 	ii = current directory's i-number
					; 	u.dirbuf = directory entry (source) location
					; output:
					; 	u.dirbuf+2 to u.dirbuf+16 (u.dirbuf+10) = file name
					; 	u.off = directory entry offset in current directory
					; 	u.base = start of u.dirbuf
					; ;;;r1 (AX) = i-number of current directory

 166B				mkdir_0:
					; jsr r0,copyz; u.dirbuf+2; u.dirbuf+10. / clear this
 166B  B9 0007				mov 	cx, 7  ; ; 04/12/2015 (4 -> 7)
 166E  33 C0				xor 	ax, ax
 1670  BF 27CC R			mov 	di, offset u_dirbuf+2
 1673  F3/ AB				rep 	stosw	
				         
 1675  8B 36 27BC R		        mov	si, word ptr [u_namep] ; mov u.namep,r2 
						; r2 points to name of directory entry

 1679  BF 27CC R			mov	di, offset u_dirbuf+2 ; mov $u.dirbuf+2,r3
						; r3 points to u.dirbuf+2
 167C				mkdir_1: ;1 / put characters in the directory name in u.dirbuf+2 - u.dirbuf+16
 167C  AC				lodsb 	;movb  (r2)+,r1 / move character in name to r1
 167D  22 C0				and 	al, al
 167F  74 11				jz 	short mkdir_2	; beq 1f / if null, done
 1681  3C 2F				cmp 	al, '/'		; cmp r1,$'/ / is it a "/"?
 1683  74 09				je	short mkdir_stc	; beq error9 / yes, error
					; 04/12/2015 (10 -> 16)
 1685  81 FF 27DA R			cmp	di, offset u_dirbuf+16 ; cmp r3,$u.dirbuf+10. 
						      ; have we reached the last slot for
						      ; a char?
 1689  74 F1				je	short mkdir_1	; beq 1b / yes, go back
					
 168B  AA				stosb	; movb r1,(r3)+ 
						; no, put the char in the u.dirbuf
 168C  EB EE				jmp 	short mkdir_1	; br 1b / get next char

					; 21/01/2020
 168E				mkdir_stc:
					; invalid file name, al="/", ah=0
 168E  B4 01				mov	ah, 1
 1690  F9				stc
 1691				@@:
 1691  C3				retn

 1692				mkdir_2: ;1
 1692  A1 27BE R			mov 	ax, word ptr [u_dirp] ; mov u.dirp,u.off
 1695  A3 27C2 R			mov 	word ptr [u_off], ax  ; pointer to empty current directory
						     		; slot to u.off
					; 20/01/2020
 1698  C7 06 27C4 R 0000		mov	word ptr [u_off+2], 0
 169E				wdir:
 169E  C7 06 27C0 R 27CA R		mov	word ptr [u_base], offset u_dirbuf
						; mov$u.dirbuf,u.base
						; u.base points to created file name
 16A4  C7 06 27C6 R 0010		mov	word ptr [u_count], 16 ; 04/12/2015 (10 -> 16)
						; mov $10.,u.count
 16AA  A1 27DA R		 	mov	ax, word ptr [ii] ; mov ii,r1 

						; r1 has i-number of current directory
				;	call	writei	; jsr r0,writei / write into directory
				;@@:	
				;	retn	; rts r0

					; 21/01/2020
					;jmp	short writei

 16AD				mkdir 	endp

 16AD				writei	proc near
					; 21/01/2020
					; 20/01/2020 (32 bit file pointer/offset)
					; 19/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode structure)
					; 18/11/2012
					; 11/11/2012
					; unixboot.asm (boot file configuration)
					; version of 'writei'
					;
					; 31/10/2012
					; 18/08/2012
					; 17/07/2012
					; BX = R1, i-number
				     	; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972
					;
					; RETRO UNIX v1 FS
					; initialization/format version
					;
					; writei: write file
					;
					; 8086 CPU & IBM PC architecture modifications by Erdogan Tan 
					;; return => if cf=1 error number in [Error]

					; input:
					; AX = R1 = I-Number
					; u.count = byte count
					; u.base = user buffer (offset)
					; u.off (u.fofp) = (pointer to) current file offset
				 
 16AD  33 D2				xor	dx,dx ; 0 ; clr u.nread	
 16AF  89 16 27C8 R			mov	word ptr [u_nread],dx
							; clear the number of bytes transmitted during
							; read or write calls 
							; tst u.count	
 16B3  39 16 27C6 R			cmp	word ptr [u_count],dx ; test the byte count specified by the user
					;ja	short write_1 ; 1f    ; bgt 1f / any bytes to output; yes, branch
					;retn	; rts 0 / no, return - no writing to do
					;jna	short write_inode_retn
					; 20/01/2020
 16B7  76 D8				jna	short @b ; 03/09/2019	
 16B9				dskw:
					; 21/01/2020
 16B9				write_1:
					; 20/01/2020
 16B9  57				push	di
 16BA  56				push	si

 16BB  50				push	ax	; save i-number on stack

 16BC  C6 06 28EB R FF			mov	byte ptr [Error],0FFh ; 21/01/2020

 16C1  E8 FC5A				call	iget	; jsr	r0,iget
							; write i-node out (if modified), read i-node 'r1'
							; into i-node area of core
					;jc	dskw_5 ; 01/03/2013
 16C4  73 02				jnc	short @f
 16C6  EB 7C				jmp	dskw_5
 16C8				@@:
					; 03/09/2019 - Retro UNIX 386 v2
 16C8  A0 2771 R			mov	al,byte ptr [inode_flgs+1]
 16CB  A8 80				test	al,80h		; regular file ?
 16CD  75 04				jnz	short dskw_8	; yes
 16CF  A8 20				test	al,20h 		; device file ?
					;;jnz	short dskw_7	; yes
					;jz	short dskw_8 
					;;test	al,40h		; directory ?
					;;jnz	short dskw_8	; yes
 16D1  75 1D				jnz	short dskw_7 	
 16D3				dskw_8:
					;mov	si,word ptr [u_fofp]
 16D3  BE 27C2 R			mov	si,offset u_off

					;mov	dx,word ptr [si] 
						; mov *u.fofp,r2 
						; put the file offset [(u.off) or the offset in
					; the fsp entry for this file] in r2
					;add	dx,word ptr [u_count]
						; add u.count,r2 
						; no. of bytes to be written + file offset is
					; put in r2

					;cmp	dx,word ptr [inode_size] ; cmp r2,i.size
						; is this greater than the present size of
						; the file?
					;jna	short dskw_1 ; blos 1f / no, branch

					;mov	word ptr [inode_size],dx ; mov	r2,i.size 
						; yes, increase the file size to file offset +
						; no. of data bytes

					; 32 bit file size
 16D6  8B 04				mov	ax,word ptr [si]
 16D8  8B 54 02				mov	dx,word ptr [si+2]

 16DB  03 06 27C6 R			add	ax,word ptr [u_count]
						; add u.count,r2 
						; no. of bytes to be written + file offset is
						; put in r2
 16DF  83 D2 00				adc	dx,0
					; is this greater than the present size of  the file?
 16E2  3B 16 277A R			cmp	dx,word ptr [inode_size+2]
 16E6  74 0B				je	short dskw_9	
 16E8  72 15				jb	short dskw_1
 16EA  89 16 277A R			mov	word ptr [inode_size+2],dx 
 16EE  EB 09				jmp	short dskw_10
 16F0				dskw_7:
 16F0  F9				stc
 16F1  EB 51				jmp	short dskw_5
 16F3				dskw_9:
 16F3  3B 06 2778 R			cmp	ax,word ptr [inode_size] ; is this greater than the present size of
 16F7  76 06				jna	short dskw_1	    ; the file?	
 16F9				dskw_10:  
 16F9  A3 2778 R			mov	word ptr [inode_size],ax ; yes, increase the file size to file offset +
						    ; no. of data bytes

 16FC  E8 FED0				call	setimod	; jsr r0,setimod 
							; set imod=1 (i.e., core inode has been
							; modified), stuff time of modification into
							; core image of i-node
 16FF				dskw_1: ; 1
 16FF  E8 FCAE			 	call	mget	; jsr r0,mget 
							; get the block no. in which to write the next data
							; byte
							; AX = R1 = Block Number
 1702  72 40				jc	short dskw_5 ; 01/03/2013

					; ax = Block/Sector number

					; 20/01/2020

					; Check current sector in the buffer

 1704  80 3E 27DF R 01			cmp	byte ptr [buff_m],1
 1709  72 19				jb	short dskw_12

 170B  8B 16 27E0 R			mov	dx,word ptr [buff_s]
					;or	dx,dx
					;jz	short dskw_12 ; buff_s = 0 is invalid	
					;cmp	dx,0FFFFh     ; buff_s = 0FFFFh is invalid
					;je	short dskw_12

					; write buffer content if sector is not same

 170F  3B C2				cmp	ax,dx
 1711  74 11				je	short dskw_12
 1713				dskw_11:
 1713  50				push	ax
					;mov	ax,word ptr [buff_s]
 1714  8B C2				mov	ax,dx
 1716  BB 3590 R			mov	bx,offset Buffer
 1719  E8 0053				call	dskwr
 171C  58				pop	ax
 171D  72 25				jc	short dskw_5
 171F  C6 06 27DF R 00			mov	byte ptr [buff_m],0
 1724				dskw_12:
					; 20/01/2020
					;mov	si,offset u_off
					;mov	bx,word ptr [si]

 1724  8B 1E 27C2 R			mov	bx,word ptr [u_off]
 1728  81 E3 01FF			and	bx,1FFh	; bit *u.fofp,$777
							; test the lower 9 bits of the file offset
 172C  BB 3590 R			mov	bx,offset Buffer ; 21/01/2020
 172F  75 08				jnz	short dskw_2 ; bne 2f 
							; if its non-zero, branch; if zero, file offset = 0,
							; 512, 1024,...(i.e., start of new block)
 1731  81 3E 27C6 R 0200		cmp	word ptr [u_count],512	; cmp u.count,$512.
							; if zero, is there enough data to fill an
							; entire block? (i.e., no. of
					;jnb	short dskw_6 ; bhis 3f / bytes to be written greater than 512.? 
						    ; Yes, branch. / Don't have to read block
 1737  73 0F				jnb	short dskw_3
 1739				dskw_2: ; 2
					; in as no past info. is to be saved (the entire block will be
				        ; overwritten).

					;mov	bx,offset Buffer
 1739  3B 06 27E0 R			cmp	ax,word ptr [buff_s]
					; 22/01/2020
 173D  74 09				je	short dskw_3
				;dskw_13:
 173F				dskw_6:
							; AX=R1 (block number)
 173F  E8 0034				call	dskrd	; jsr r0,dskrd 
							; no, must retain old info.. Hence, read block 'r1'
							; into an I/O buffer
					;jc	short dskw_5 ; 01/03/2013
					; 20/01/2020
 1742  73 04				jnc	short dskw_3
 1744				dskw_5:
 1744  58				pop	ax

 1745  5E				pop	si
 1746  5F				pop	di

 1747  C3				retn

 1748				dskw_3:
 1748				writeinode_sioreg:
					;call	wslot

					; 20/01/2020

 1748  E8 00A8				call	sioreg

					; SI = user data offset (r1)
					; DI = sector (I/O) buffer offset (r2)
					; CX = byte count (r3)

 174B				dskw_4: ; 2
 174B  F3/ A4				rep	movsb

 174D  C6 06 27DF R 01			mov	byte ptr [buff_m],1

 1752  A3 27E0 R			mov	word ptr [buff_s],ax

					;mov	bx,offset Buffer ; offset sector_buffer	
 1755  E8 0017				call	dskwr ; jsr r0,dskwr / write the block and the i-node
 1758  72 EA				jc	short dskw_5

 175A  C6 06 27DF R 00			mov	byte ptr [buff_m],0
					
 175F  83 3E 27C6 R 00		        cmp	word ptr [u_count],0 ; any more data to write?
					;ja	dskw_1 ; 1b   ; yes, branch
 1764  76 02				jna	short @f
 1766  EB 97				jmp	dskw_1
 1768				@@:
 1768  C6 06 28EB R 00			mov	byte ptr [Error],0
 176D  EB D5				jmp	short dskw_5

 176F				writei	endp

 176F				dskwr	proc near
					; 22/01/2020
					; 20/01/2020 - Retro UNIX 386 v2
					;
					; Disk (Sector) Write
					;
					; INPUT: 
					;	AX = Sector address/number (LBA)
					;	ES:BX = Buffer address
					; OUTPUT:
					;	CF = 0 -> succeeded
					;	CF = 1 -> Error, Error code in [Error]
					;
					; Modified registers: cx, dx

 176F  C6 06 27B1 R 03			mov	byte ptr [rw],3 ; write
 1774  EB 05				jmp	short diskio

 1776				dskwr	endp

 1776				dskrd	proc near
					; 24/01/2020
					; 22/01/2020
					; 20/01/2020 - Retro UNIX 386 v2
					;
					; Disk (Sector) Read
					;
					; INPUT: 
					;	AX = Sector address/number (LBA)
					;	ES:BX = Buffer address
					; OUTPUT:
					;	CF = 0 -> succeeded
					;	CF = 1 -> Error, Error code in [Error]
					;
					; Modified registers: cx, dx

 1776  C6 06 27B1 R 02			mov	byte ptr [rw],2 ; read
 177B				diskio:
					;mov	word ptr [Error],0 ; Reset error code
					; 24/01/2020
 177B  C6 06 28EB R 00			mov	byte ptr [Error],0 ; Reset error code

					; ax = sector/block number

 1780  80 3E 27DE R 90			cmp	byte ptr [PhysicalDriveNumber], 90h ; fd image file sign
 1785  73 3A				jnb	short image_file_rw ; 07/07/2015

 1787				chs_read_write:
					;xor	ch,ch
 1787  B1 04				mov	cl,4 ; Retry count
 1789				chs_rw_again:
 1789  50				push	ax ; *  ; sector address

 178A  51				push	cx ; ** ; (remain) retry count

 178B  BA 0012				mov	dx,18		; Sectors per track
 178E  F6 F2				div	dl	      
 1790  8A CC				mov	cl,ah		; Sector (zero based)
 1792  FE C1				inc	cl		; To make it 1 based
 1794  D0 E8				shr	al,1		; Convert Track to Cylinder
 1796  80 D6 00				adc	dh,0		; Heads (0 or 1)

 1799  8A 16 27DE R			mov	dl,byte ptr [PhysicalDriveNumber] 
 179D  8A E8				mov	ch,al

 179F  8A 26 27B1 R			mov	ah,byte ptr [rw] ; 2 = read, 3 = write 	
 17A3  B0 01				mov	al,1	; 1 sector
 17A5  CD 13				int	13h	; BIOS Service func ( ah ) = 2
							; Read disk sectors
							; BIOS Service func ( ah ) = 3
							; Write disk sectors
							; AL-sec num CH-cyl CL-sec
							; DH-head DL-drive ES:BX-buffer
							; CF-flag AH-stat AL-sec read
 17A7  59				pop	cx ; **
 17A8  73 15				jnc	short chs_rw_ok

 17AA  FE C9				dec	cl		
 17AC  74 0C				jz	short chs_rw_err

 17AE  80 FC 09				cmp	ah,09h ; DMA crossed 64K segment boundary
 17B1  74 07				je	short chs_rw_err

 17B3  32 E4				xor	ah,ah ; reset
 17B5  CD 13				int	13h

 17B7  58				pop	ax ; *

 17B8  EB CF				jmp	short chs_rw_again

 17BA				chs_rw_err:
 17BA  F9				stc
 17BB  88 26 28EB R			mov	byte ptr [Error],ah
 17BF				chs_rw_ok:	
 17BF  58				pop	ax ; *
 17C0  C3				retn

 17C1				dskrd	endp

 17C1				image_file_rw proc near
					; 24/01/2020
					; 20/01/2020
					; 19/09/2019 - Retro UNIX 386 v2
					; 14/07/2015
					; 07/07/2015
					; writing a block (sector) to floppy disk image file
					; INPUTS:
					; 	ax = sector/block number
				        ;	offset WriteBuffer = buffer address
					;       [img_file_handle] = file handle
					;	number of bytes to be written = 512

 17C1  50				push	ax ; * ; sector address ; 24/01/2020 

 17C2  53	push	bx ; buffer address ; 19/09/2019 
 17C3  BA 0200				mov	dx,512
 17C6  F7 E2				mul	dx
 17C8  8B CA				mov	cx,dx
 17CA  8B D0				mov	dx,ax
 17CC  2A C0				sub	al,al ; specified offset is from the beginning of the file
 17CE  B4 42				mov	ah,42h ; seek (move file pointer)	
 17D0  8B 1E 2758 R			mov 	bx,word ptr [img_file_handle]
 17D4  CD 21				int	21h
 17D6  5A				pop	dx ; buffer offset
 17D7  72 13				jc	short img_file_rw_err

					;mov	bx,word ptr [img_file_handle]
 17D9  B9 0200				mov	cx,512
					; ds:dx = buffer offset
 17DC  B4 3D				mov	ah,3Dh ; 3Fh = read from file, 40h = write to file
 17DE  02 26 27B1 R			add	ah,byte ptr [rw] ; 2 = read, 3 = write 
 17E2  CD 21				int	21h
 17E4  72 06				jc	short img_file_rw_err
 17E6  8B DA				mov	bx,dx ; buffer address
					;xor	dx,dx
 17E8  3B C1				cmp	ax,cx ; ax = actually written bytes
 17EA  73 05				jnb	short img_file_rw_ok
 17EC				img_file_rw_err:
 17EC  C6 06 28EB R FF			mov	byte ptr [Error],0FFh
 17F1				img_file_rw_ok:
 17F1  58				pop	ax ; * ; 24/01/2020
 17F2  C3				retn

 17F3				image_file_rw endp

 17F3				sioreg proc near
					; 20/01/2020
					; 19/11/2019 - Retro UNIX 386 v2 (32 bit file offset)
					; 04/09/2019 - RETRO UNIX v0.3 (Retro UNIX 386 v2)
					; 16/12/2012
					; 31/10/2012
					; 19/08/2012
					; 04/08/2012
					; Erdogan Tan - RETRO UNIX v0.1
					; input -> R5 (DX) = sector buffer (data) address
					;	  *u.fofp = file offset, to start writing
					;	  u.base = address of 1st byte of user data
					;	  u.count = byte count to be transferred
					;	  u.nread = number of bytes written out
					;	    previously.
					; output -> *u.fofp = last (written) byte + 1
					;	  u.count = number of bytes of data left
					;	    to be transferred.		
					;	  u.nread = updated to include the count
					;	   of bytes to be transferred.
					;	  R1 (SI) = address of 1st byte of data
					;	  R2 (DI) = specifies the byte in IO 
					;	    sector (I/O) buffer. (Offset)	
					;	  R3 (CX) = number of bytes of data to be
					;	   transferred to/from sector (I/O)
					;	   buffer.

					; Modified registers: cx, si, di	

					;mov	dx,offset Buffer ; R5
					; 31/10/2012	
				       ;mov	si,word ptr [u_fofp] ; mov *u.fofp,r2 
					; 29/12/2019
 17F3  BE 27C2 R			mov	si,offset u_off

 17F6  8B 3C				mov	di,word ptr [si] ; file offset (in bytes) is moved to r2
 17F8  8B CF				mov	cx,di	; mov r2,r3 / and also to r3

 17FA  81 C9 FE00			or	cx,0FE00h ; set bits 9...15 of file offset in R3
 17FE  81 E7 01FF			and	di,1FFh ; calculate file offset mod 512

					; 09/11/2019
					; 19/08/2012
 1802  81 C7 3590 R			add	di,offset Buffer ; DI/r2 now points to 1st byte in buffer
						; where data is to be placed
				        
					;mov	si,word ptr [u_base] ; address of data is in r1
 1806  F7 D9				neg	cx ; 512 - file offset(mod512) in R3 (cx)
						   ; the number of free bytes in the file block
 1808  3B 0E 27C6 R		        cmp	cx,word ptr [u_count] ; compare this with the number of data bytes
						 		      ; to be written to the file
 180C  76 04				jna	short @f ; 2f
						  ; if less than branch. Use the number of free bytes
					  	  ; in the file block as the number to be written
 180E  8B 0E 27C6 R		        mov	cx,word ptr [u_count]
						  ; if greater than, use the number of data bytes
					   	  ; as the number to be written
 1812				@@:	; 2
				;sioreg_1:	
 1812  01 0E 27C8 R			add	word ptr [u_nread],cx ; r3 + number of bytes
						; xmitted during write is put into
					 	; u.nread

 1816  29 0E 27C6 R		        sub	word ptr [u_count],cx
						; u.count = no. of bytes that still must be
					; written or read
					; 30/12/2019
					;;mov	si,word ptr [u_fofp]
				        ;; 29/12/2019
					;mov	si,offset u_off

 181A  01 0C				add	word ptr [si],cx ; new file offset = number
								 ; of bytes done + old file offset
					; 09/11/2019
 181C  83 54 02 00			adc	word ptr [si+2],0

					; Note: word ptr [u_base] + cx must not over 65535	

					; 16/12/2012 BugFix
 1820  8B 36 27C0 R			mov	si,word ptr [u_base] ; address of data is in SI/r1

 1824  01 0E 27C0 R		        add	word ptr [u_base],cx ; u.base points to 1st of remaining
						    		     ; data bytes
 1828  C3				retn

 1829				sioreg	endp 

 1829				epoch proc near
					; 14/11/2012
					; unixboot.asm (boot file configuration)
					; version of "epoch" procedure in "unixproc.asm"
					; 21/7/2012
					; 15/7/2012
					; 14/7/2012	
					; Erdogan Tan - RETRO UNIX v0.1
					; compute current date and time as UNIX Epoch/Time
					; UNIX Epoch: seconds since 1/1/1970 00:00:00

					; 21/7/2012
					;push	bx
					;push	cx

 1829  B4 02				mov	ah, 02h		; Return Current Time
 182B  CD 1A			        int	1Ah
 182D  86 E9			        xchg	ch, cl
 182F  89 0E 27E8 R		        mov	word ptr [hour], cx
 1833  86 F2			        xchg	dh, dl
 1835  89 16 27EC R		        mov	word ptr [second], dx

 1839  B4 04			        mov	ah, 04h		; Return Current Date
 183B  CD 1A			        int	1Ah
 183D  86 E9			        xchg	ch, cl
 183F  89 0E 27E2 R		        mov	word ptr [year], cx
 1843  86 F2			        xchg	dh, dl
 1845  89 16 27E4 R		        mov	word ptr [month], dx

 1849  B9 3030				mov	cx, 3030h
					
 184C  A0 27E8 R			mov	al, byte ptr [hour] ; Hour
					   	; AL <= BCD number)
 184F  D4 10			        db	0D4h, 10h	; Undocumented inst. AAM
								; AH = AL / 10h
								; AL = AL MOD 10h
 1851  D5 0A			        aad	; AX= AH*10+AL
					
 1853  A2 27E8 R			mov	byte ptr [hour], al

 1856  A0 27E9 R			mov	al, byte ptr [hour]+1 ; Minute
				           	; AL <= BCD number)
 1859  D4 10			        db	0D4h, 10h	; Undocumented inst. AAM
								; AH = AL / 10h
								; AL = AL MOD 10h
 185B  D5 0A			        aad	; AX= AH*10+AL
					
 185D  A2 27EA R			mov	byte ptr [minute], al

 1860  A0 27EC R			mov	al, byte ptr [second] ; Second
				            	; AL <= BCD number)
 1863  D4 10			        db	0D4h, 10h	; Undocumented inst. AAM
								; AH = AL / 10h
								; AL = AL MOD 10h
 1865  D5 0A			        aad	; AX= AH*10+AL
					
 1867  A2 27EC R			mov	byte ptr [second], al
					
 186A  A1 27E2 R			mov	ax, word ptr [year] ; Year (century)
 186D  50			        push	ax
					   	; AL <= BCD number)
 186E  D4 10			        db	0D4h, 10h	; Undocumented inst. AAM
								; AH = AL / 10h
								; AL = AL MOD 10h
 1870  D5 0A			        aad	; AX= AH*10+AL
					
 1872  B4 64				mov	ah, 100
 1874  F6 E4				mul	ah
 1876  A3 27E2 R			mov	word ptr [year], ax

 1879  58				pop	ax
 187A  8A C4				mov	al, ah
				           	; AL <= BCD number)
 187C  D4 10			        db	0D4h, 10h	; Undocumented inst. AAM
								; AH = AL / 10h
								; AL = AL MOD 10h
 187E  D5 0A			        aad	; AX= AH*10+AL
					
 1880  01 06 27E2 R			add	word ptr [year], ax

 1884  A0 27E4 R			mov	al, byte ptr [month] ; Month
				            	; AL <= BCD number)
 1887  D4 10			        db	0D4h, 10h	; Undocumented inst. AAM
								; AH = AL / 10h
								; AL = AL MOD 10h
 1889  D5 0A			        aad	; AX= AH*10+AL
					
 188B  A2 27E4 R			mov	byte ptr [month], al	

 188E  A0 27E5 R			mov	al, byte ptr [month]+1 ; Day
				            	; AL <= BCD number)
 1891  D4 10			        db	0D4h, 10h	; Undocumented inst. AAM
								; AH = AL / 10h
								; AL = AL MOD 10h
 1893  D5 0A			        aad	; AX= AH*10+AL

 1895  A2 27E6 R			mov	byte ptr [Day], al
					
 1898				convert_to_epoch:
					; Derived from DALLAS Semiconductor
					; Application Note 31 (DS1602/DS1603)
					; 6 May 1998

 1898  8B 16 27E2 R			mov	dx, word ptr [year]
 189C  81 EA 07B2			sub	dx, 1970
 18A0  B8 016D				mov	ax, 365
 18A3  F7 E2				mul	dx
 18A5  32 FF				xor	bh, bh
 18A7  8A 1E 27E4 R			mov	bl, byte ptr [month]
 18AB  FE CB				dec	bl
 18AD  D0 E3				shl	bl, 1
 18AF  8B 8F 27EE R			mov	cx, word ptr DMonth[BX]
 18B3  8A 1E 27E6 R			mov	bl, byte ptr [Day]
 18B7  FE CB				dec	bl
					
 18B9  03 C1				add	ax, cx
 18BB  83 D2 00				adc	dx, 0
 18BE  03 C3				add	ax, bx
 18C0  83 D2 00				adc	dx, 0
						; DX:AX = days since 1/1/1970
 18C3  8B 0E 27E2 R			mov	cx, word ptr [year]
 18C7  81 E9 07B1			sub	cx, 1969
 18CB  D1 E9				shr	cx, 1
 18CD  D1 E9				shr	cx, 1	
					; (year-1969)/4
 18CF  03 C1				add	ax, cx
 18D1  83 D2 00				adc	dx, 0
						; + leap days since 1/1/1970

 18D4  80 3E 27E4 R 02			cmp	byte ptr [month], 2 ; if past february
 18D9  76 0F				jna	short @f
 18DB  8B 0E 27E2 R			mov	cx, word ptr [year]
 18DF  83 E1 03				and	cx, 3 ; year mod 4
 18E2  75 06				jnz	short @f	
						; and if leap year
 18E4  83 C0 01				add	ax, 1 ; add this year's leap day (february 29)
 18E7  83 D2 00				adc	dx, 0
 18EA				@@: 		; compute seconds since 1/1/1970
 18EA  BB 0018				mov	bx, 24
 18ED  E8 00A4				call	mul32

 18F0  8A 1E 27E8 R			mov	bl, byte ptr [hour]
 18F4  03 C3				add	ax, bx
 18F6  83 D2 00				adc	dx, 0
					
 18F9  BB 003C				mov	bx, 60
 18FC  E8 0095				call	mul32

 18FF  8A 1E 27EA R			mov	bl, byte ptr [minute]
 1903  03 C3				add	ax, bx
 1905  83 D2 00				adc	dx, 0
					
 1908  BB 003C				mov	bx, 60
 190B  E8 0086				call	mul32

 190E  8A 1E 27EC R			mov	bl, byte ptr [second]
 1912  03 C3				add	ax, bx
 1914  83 D2 00			 	adc	dx, 0

					; DX:AX -> seconds since 1/1/1970 00:00:00

					; 21/7/2012
					;pop	cx
					;pop	bx
					
 1917  C3				retn

 1918				epoch endp

 1918				convert_from_epoch proc near
					; 30/11/2012
					; Derived from DALLAS Semiconductor
					; Application Note 31 (DS1602/DS1603)
					; 6 May 1998
					;
					; INPUT:
					; DX:AX = Unix (Epoch) Time
 1918  B9 003C				mov	cx, 60
 191B  E8 008A				call	div32
					;mov	word ptr [imin], ax   ; whole minutes
					;mov	word ptr [imin]+2, dx ; since 1/1/1970
 191E  89 1E 27EC R			mov	word ptr [second], bx ; leftover seconds
					;mov	cx, 60
 1922  E8 0083				call	div32
					;mov	word ptr [ihrs], ax   ; whole hours
					;mov	word ptr [ihrs]+2, dx ; since 1/1/1970
 1925  89 1E 27EA R			mov	word ptr [minute], bx ; leftover minutes
					;mov	cx, 24
 1929  B1 18				mov	cl, 24
 192B  E8 007A				call	div32
					;mov	word ptr [iday], ax ; whole hours
						   ; since 1/1/1970
					;mov	word ptr [iday]+2, dx ; DX = 0
 192E  89 1E 27E8 R			mov	word ptr [hour], bx   ; leftover hours
 1932  05 02DB				add	ax, 365+366	 ; whole day since
						 ; 1/1/1968 	
					;adc	dx, 0	;  DX = 0
					;mov	word ptr [iday], ax
 1935  50				push	ax
 1936  B9 05B5				mov	cx, (4*365)+1	; 4 years = 1461 days
 1939  E8 006C				call	div32
 193C  59				pop	cx
					;mov	word ptr [lday], ax ; count of quadyrs (4 years)
 193D  53				push	bx
					;mov	word ptr [qday], bx ; days since quadyr began
 193E  83 FB 3C				cmp	bx, 31 + 29	; if past feb 29 then
 1941  F5				cmc		 	; add this quadyr's leap day
 1942  83 D0 00				adc	ax, 0	 	; to # of qadyrs (leap days)
					;mov	word ptr [lday], ax ; since 1968		 
					;mov	cx, word ptr [iday]
 1945  91				xchg	cx, ax	 ; CX = lday, AX = iday	 
 1946  2B C1				sub	ax, cx	 ; iday - lday
 1948  B9 016D				mov	cx, 365
					;xor	dx, dx	 ; DX  = 0
					; AX = iday-lday, DX = 0
 194B  E8 005A				call	div32
					;mov	word ptr [iyrs], ax ; whole years since 1968
					; jday = iday - (iyrs*365) - lday
					;mov	word ptr [jday], bx ; days since 1/1 of current year
 194E  05 07B0				add	ax, 1968	 ; compute year
 1951  A3 27E2 R			mov	word ptr [year], ax
 1954  8B D0				mov	dx, ax	
					;mov	ax, word ptr [qday]
 1956  58				pop	ax
 1957  3D 016D				cmp	ax, 365		; if qday <= 365 and qday >= 60	
 195A  77 07				ja	short @f	; jday = jday +1
 195C  83 F8 3C				cmp	ax, 60		; if past 2/29 and leap year then
 195F  F5			        cmc			; add a leap day to the # of whole
 1960  83 D3 00				adc	bx, 0		; days since 1/1 of current year
 1963				@@:		
					;mov	word ptr [jday], bx
 1963  B9 000C				mov	cx, 12		; estimate month
 1966  87 CB				xchg	cx, bx		; CX = jday, BX = month 	
 1968  B8 016E				mov	ax, 366		; mday, max. days since 1/1 is 365
 196B  83 E2 03				and	dx, 11b		; year mod 4	(and dx, 3) 
 196E				@@:	; Month calculation	; 0 to 11  (11 to 0)	
 196E  3B C8				cmp	cx, ax		; mday = # of days passed from 1/1
 1970  73 15				jnb	short @f
 1972  4B				dec	bx	 ; month = month - 1
 1973  D1 E3				shl	bx, 1 
 1975  8B 87 27EE R			mov	ax, word ptr DMonth[BX] ; # elapsed days at 1st of month
 1979  D1 EB				shr	bx, 1	 ; bx = month - 1 (0 to 11)
 197B  83 FB 01				cmp	bx, 1	 	; if month > 2 and year mod 4  = 0	
 197E  76 EE				jna	short @b	; then mday = mday + 1
 1980  0A D2				or	dl, dl		; if past 2/29 and leap year then
 1982  75 EA				jnz	short @b	; add leap day (to mday)
 1984  40				inc	ax	 ; mday = mday + 1
 1985  EB E7				jmp	short @b
 1987				@@:
 1987  43				inc	bx 	 ; -> bx = month, 1 to 12
 1988  89 1E 27E4 R			mov	word ptr [month], bx
 198C  2B C8				sub	cx, ax	 ; day = jday - mday + 1	
 198E  41				inc	cx 		 
 198F  89 0E 27E6 R			mov	word ptr [day], cx
					
					; ax, bx, cx, dx is changed at return
					; output ->
					; [year], [month], [day], [hour], [minute], [second]
					; 

 1993  C3				retn

 1994				convert_from_epoch endp

 1994				mul32	proc near

					;push	cx

 1994  8B CB				mov	cx, bx
 1996  8B DA				mov	bx, dx

 1998  F7 E1				mul	cx

 199A  93				xchg	ax, bx

 199B  52				push	dx

 199C  F7 E1				mul	cx 

 199E  59				pop	cx 

 199F  03 C1				add	ax, cx 
 19A1  83 D2 00				adc	dx, 0

 19A4  93				xchg	bx, ax
 19A5  87 D3				xchg	dx, bx

					;pop	cx

 19A7  C3				retn

 19A8				mul32	endp

 19A8				div32	proc near
					; 1999
					; (Rx_Dos_Div32) 32 bit divide procedure 
					; by Erdogan Tan
					; Input -> DX_AX = 32 bit dividend
					;          CX = 16 bit divisor
					; output -> DX_AX = 32 bit quotient
					;          BX = 16 bit remainder
 19A8  8B DA				mov  bx, dx
 19AA  93				xchg ax, bx
 19AB  33 D2				xor  dx, dx
 19AD  F7 F1				div  cx         ; at first, divide DX
 19AF  93				xchg ax, bx     ; remainder is in DX
							; now, BX has quotient
							; save remainder
 19B0  F7 F1				div  cx         ; so, DX_AX divided and
							; AX has quotient
							; DX has remainder
 19B2  87 D3				xchg dx, bx     ; finally, BX has remainder
 19B4				sync_0:	; 19/09/2019
 19B4  C3				retn

 19B5				div32	endp

 19B5				sync 	proc near
					; 24/01/2020
					; 23/01/2020
					; 22/01/2020
					; 28/09/2019
					; 18/09/2019 - Retro UNIX 386 v2 (RUNIX v2 file system)
					;
					; 14/07/2015
					; 07/07/2015
					; 18/11/2012 unix boot file configuration version
					; of "sync" procedure of retro unix v1.0 by Erdogan Tan
					; 12/8/2012
					; updates superblock and the last i-node on disk 
					; if modified
					; e.g. smod = 1, imod = 1, buffer_m = 1
					;
					; RETRO UNIX v1 FS

 19B5  33 C0				xor	ax, ax ; mov ax, 0
 19B7  E8 F964				call	iget ; (write modified i-node)
 19BA  72 F8				jc	short sync_0 ; 19/09/2019

					; 22/01/2020
 19BC  80 3E 27DF R 00			cmp	byte ptr [buff_m], 0
 19C1  76 10				jna	short sync_1 ; 23/01/2020

 19C3  A1 27E0 R			mov	ax, word ptr [buff_s]
 19C6  BB 3590 R			mov	bx, offset Buffer
 19C9  E8 FDA3				call	dskwr
 19CC  72 E6				jc	short sync_0

 19CE  C6 06 27DF R 00			mov	byte ptr [buff_m], 0
 19D3				sync_1:
					; 29/09/2019
					; set superblock modification time
 19D3  E8 FE53				call	epoch
 19D6  A3 33EC R			mov	word ptr [systm.sb_ModifTime],ax
 19D9  89 16 33EE R			mov	word ptr [systm.sb_ModifTime+2],dx

					; 29/09/2019
					; set first free inode number and first free block number
					; if they are invalid (in sb)

 19DD  BA FFFF				mov	dx, 0FFFFh
 19E0  39 16 33C4 R			cmp	word ptr [systm.sb_FirstFreeIno], dx ; 0FFFFh
 19E4  75 09				jne	short @f
 19E6  39 16 33C6 R			cmp	word ptr [systm.sb_FirstFreeIno+2], dx ; 0FFFFh	
 19EA  75 03				jne	short @f
 19EC  E8 00E7				call	set_firstfreeinode	
 19EF				@@:
 19EF  39 16 33CC R			cmp	word ptr [systm.sb_FirstFreeBlk], dx ; 0FFFFh
 19F3  75 09				jne	short @f
 19F5  39 16 33CE R			cmp	word ptr [systm.sb_FirstFreeBlk+2], dx ; 0FFFFh	
 19F9  75 03				jne	short @f
 19FB  E8 0103				call	set_firstfreeblock
 19FE				@@:	
				        ; 14/07/2015
					; 07/07/2015
 19FE  8A 16 27DE R			mov	dl, byte ptr [PhysicalDriveNumber]
 1A02  80 FA 90				cmp	dl, 90h
					;jb	short sync_2 ; physical (real) disk
					; 22/01/2020
 1A05  73 03				jnb	short @f
 1A07  E9 0083				jmp	sync_2
 1A0A				@@:
					; 22/01/2020
 1A0A  2B D2				sub	dx, dx
 1A0C  8B CA				mov	cx, dx

 1A0E  BE 3190 R			mov	si, offset BSBuffer	
 1A11  BF 0400				mov	di, 1024

 1A14  80 3E 28EF R 00			cmp	byte ptr [bmod], 0
 1A19  77 06				ja	short @f

 1A1B  D1 EF				shr	di, 1 ; 512 

 1A1D  8B D7				mov	dx, di ; mov dx, 512 ; 24/01/2020
					;add	si, 512
 1A1F  03 F2				add	si, dx ; add si, 512 ; offset systm
					; cx:dx = file pointer = 512
 1A21				@@:
					; disk image file (virtual disk)
					;sub	dx, dx ; 0
					;mov	cx, dx ; 0
 1A21  2A C0				sub	al, al ; specified offset is from the beginning of the file
 1A23  B4 42				mov	ah, 42h ; seek (move file pointer)	
 1A25  8B 1E 2758 R			mov	bx, word ptr [img_file_handle]
 1A29  CD 21				int	21h
				        ;jc	loc_error
					; 27/03/2022
 1A2B  72 30				jc	short sync_err

 1A2D  8B CF				mov	cx, di ; byte count (512 or 1024)
 1A2F  8B D6				mov	dx, si ; buffer address (BSBuffer or systm)

					;mov	bx, word ptr [img_file_handle]
				        ;mov	cx, 1024 ; write 1024 bytes (2 sectors)
					;mov	dx, offset BSBuffer ; bootsector (& superblock) buffer
 1A31  B4 40				mov	ah, 40h ; write file
 1A33  CD 21				int	21h
					;jc	loc_error
					; 27/03/2022
 1A35  72 26				jc	short sync_err

					; 24/01/2020
 1A37  3B C1				cmp	ax, cx ; 512 or 1024
				        ;jne	loc_error
					; 27/03/2022
 1A39  75 22				jne	short sync_err

				        ;mov	bx, dx ; offset BSBuffer
					;retn

					; 18/09/2019 - Retro UNIX 386 v2
					; (following code is only valid for floppy disks)
					; (single sector free block map and inode map, no 'hidden sectors')
					; (NOTE: modified inodes are already written by 'iget' procedure)

					; 23/01/2020
 1A3B  8B 16 33B0 R			mov	dx, word ptr [systm.sb_InodeMapAddr]
 1A3F  33 C0				xor	ax, ax
 1A41  B9 0009				mov	cx, 9 ; 28/09/2019
					; ax:dx = 32 bit sector address	
 1A44  E8 007D				call	shl32
 1A47  8B C8				mov	cx, ax
					; cx:dx = 32 bit (byte) offset	

 1A49  2A C0				sub	al, al ; specified offset is from the beginning of the file
 1A4B  B4 42				mov	ah, 42h ; seek (move file pointer)	
					;mov	bx, word ptr [img_file_handle]
 1A4D  CD 21				int	21h
					;jc	loc_error
					; 27/03/2022
 1A4F  72 0C				jc	short sync_err

 1A51  BA 3D90 R			mov	dx, offset im_buffer ; inode map 
 1A54  B9 0200				mov	cx, 512  ; 1 sector
					;mov	bx, word ptr [img_file_handle]
 1A57  B4 40				mov	ah, 40h ; write file
 1A59  CD 21				int	21h
				        ;jc	loc_error
					; 27/03/2022
 1A5B  73 03				jnc	short @f
 1A5D				sync_err:
 1A5D  E9 E814				jmp	loc_error
 1A60				@@:
 1A60  3D 0200				cmp	ax, 512
					;jne	loc_error
 1A63  75 F8				jne	short sync_err

					; 23/01/2020
 1A65  8B 16 33A8 R			mov	dx, word ptr [systm.sb_FreeMapAddr]
 1A69  33 C0				xor	ax, ax
 1A6B  B9 0009				mov	cx, 9 ; 28/09/2019
					; ax:dx = 32 bit sector address	
 1A6E  E8 0053				call	shl32
 1A71  8B C8				mov cx, ax
					; cx:dx = 32 bit (byte) offset	

 1A73  2A C0				sub	al, al ; specified offset is from the beginning of the file
 1A75  B4 42				mov	ah, 42h ; seek (move file pointer)	
					;mov	bx, word ptr [img_file_handle]
 1A77  CD 21				int	21h
				       	;jc	loc_error
					; 27/03/2022
 1A79  72 E2				jc	short sync_err

 1A7B  BA 3F90 R			mov	dx, offset fbm_buffer ; free blocks map 
 1A7E  B9 0200				mov	cx, 512  ; 1 sector
					;mov	bx, word ptr [img_file_handle]
 1A81  B4 40				mov	ah, 40h ; write file
 1A83  CD 21				int	21h
				        ;jc	loc_error
					; 27/03/2022
 1A85  72 D6				jc	short sync_err

 1A87  3D 0200				cmp	ax, 512
				        ;jne	loc_error
					; 27/03/2022
 1A8A  75 D1				jne	short sync_err

 1A8C  C3				retn

 1A8D				sync_2:	
					; 22/01/2020
 1A8D  BB 3390 R			mov	bx, offset systm

 1A90  B8 0301			       	mov	ax, 0301h  ; Write superblock (only)
 1A93  B9 0002			       	mov	cx, 2      ; (sector to be written, superblock)  	

 1A96  80 3E 28EF R 00			cmp	byte ptr [bmod], 0
 1A9B  76 0C				jna	short @f

 1A9D  FE C0				inc	al ; ax = 0302h ; Write boot sector & superblock
 1A9F  FE C9				dec	cl ; cx = 1	; (1st sector to be written,boot sector)  
					
 1AA1  C6 06 28EF R 00			mov	byte ptr [bmod], 0 ; reset

					;sub	bx, 512

 1AA6  BB 3190 R			mov	bx, offset BSBuffer
 1AA9				@@:	
					; 22/01/2020
					;mov	bx, offset BSBuffer
					;mov	ax, 0302h  ; Write boot sector & superblock
					;mov	cx, 1
 1AA9  32 F6			        xor	dh, dh

				       ;mov	dl, byte ptr [PhysicalDriveNumber]
				       
 1AAB  CD 13				int	13h
 1AAD  72 14				jc	short sync_3

					; 18/09/2019 - Retro UNIX 386 v2
					; (following code is only valid for floppy disks)
					; (single sector free block map and inode map, no 'hidden sectors')
					; (NOTE: modified inodes are already written by 'iget' procedure)

 1AAF  BB 3D90 R			mov	bx, offset im_buffer ; inode map 
 1AB2  A1 33B0 R			mov	ax, word ptr [systm.sb_InodeMapAddr]
 1AB5  E8 FCB7				call	dskwr
 1AB8  72 09				jc	short sync_3

 1ABA  BB 3F90 R			mov	bx, offset fbm_buffer  ; free block map
 1ABD  A1 33A8 R			mov	ax, word ptr [systm.sb_FreeMapAddr]
 1AC0  E8 FCAC				call	dskwr
 1AC3				sync_3:
 1AC3  C3			        retn	

 1AC4				sync	endp

 1AC4				shl32	proc near
					; 23/01/2020
					; 18/09/2019
					; INPUT:
					;   CL = shift count
					;   ax:dx = 32 bit number to be shifted to left
					;xor	ch,ch
 1AC4  E3 06				jcxz	norotal
 1AC6				rotashftl:
 1AC6  D1 E2				shl	dx,1
 1AC8  D1 D0				rcl	ax,1
 1ACA  E2 FA				loop	rotashftl
 1ACC				norotal:
 1ACC  C3				retn

 1ACD				shl32	endp

 1ACD				shr32	proc near	
					; 22/01/2020
					; INPUT:
					;   CL = shift count
					;   dx:ax = 32 bit number to be shifted to right
					;xor	ch,ch
 1ACD  E3 06				jcxz	norotar
 1ACF				rotashftr:
 1ACF  D1 EA				shr	dx,1
 1AD1  D1 D8				rcr	ax,1
 1AD3  E2 FA				loop	rotashftr
 1AD5				norotar:
 1AD5  C3				retn

 1AD6				shr32	endp

 1AD6				set_firstfreeinode proc near
					; 23/03/2022 (BugFix)
					; 11/12/2021
					; 29/09/2019 - Retro UNIX 386 v2
					; set first free inode number in sb
					; (note: this procedure will also set free inodes again) 

 1AD6  BE 3D90 R			mov	si,offset im_buffer
 1AD9  8B 0E 33B4 R			mov	cx,word ptr [systm.sb_InodeMapSize]
 1ADD  33 D2				xor	dx,dx
 1ADF  33 DB				xor	bx,bx
 1AE1				sffi_1:
 1AE1  51				push	cx
 1AE2  AC				lodsb
 1AE3  B1 08				mov	cl,8
 1AE5				sffi_2:
 1AE5  43				inc	bx ; 23/03/2022 (BugFix) (1 based inode number)
 1AE6  D0 E8				shr	al,1
 1AE8  72 0D				jc	short sffi_4 ; 1 = (inode) allocated

 1AEA  23 D2				and	dx,dx
 1AEC  75 08				jnz	short sffi_3
 1AEE  89 1E 33C4 R			mov	word ptr [systm.sb_FirstFreeIno],bx
					; 11/12/2021
 1AF2  89 16 33C6 R			mov	word ptr [systm.sb_FirstFreeIno+2],dx ; 0
 1AF6				sffi_3:
 1AF6  42				inc	dx
 1AF7				sffi_4:
					;inc	bx
 1AF7  E2 EC				loop	sffi_2
 1AF9  59				pop	cx
 1AFA  E2 E5				loop	sffi_1
 1AFC				sffi_5:
 1AFC  89 16 33C0 R			mov	word ptr [systm.sb_FreeInodes],dx
 1B00  C3				retn

 1B01				set_firstfreeinode endp

 1B01				set_firstfreeblock proc near
					; 11/12/2021
					; 29/09/2019 - Retro UNIX 386 v2
					; set first free block number in sb
					; (note: this procedure will also set free blocks again)

 1B01  BE 3F90 R			mov	si,offset fbm_buffer
 1B04  8B 0E 33AC R			mov	cx,word ptr [systm.sb_FreeMapSize]
 1B08  33 D2				xor	dx,dx
 1B0A  33 DB				xor	bx,bx
 1B0C				sffb_1:
 1B0C  51				push	cx
 1B0D  AC				lodsb
 1B0E  B1 08				mov	cl,8
 1B10				sffb_2:
 1B10  D0 E8				shr	al,1
 1B12  73 0D				jnc	short sffb_4  ; 0 = (block) allocated

 1B14  23 D2				and	dx,dx
 1B16  75 08				jnz	short sffb_3
 1B18  89 1E 33CC R			mov	word ptr [systm.sb_FirstFreeBlk],bx
					; 11/12/2021
 1B1C  89 16 33CE R			mov	word ptr [systm.sb_FirstFreeBlk+2],dx ; 0
 1B20				sffb_3:
 1B20  42				inc	dx
 1B21				sffb_4:
 1B21  43				inc	bx
 1B22  E2 EC				loop	sffb_2
 1B24  59				pop	cx
 1B25  E2 E5				loop	sffb_1
 1B27				sffb_5:
 1B27  89 16 33C8 R			mov	word ptr [systm.sb_FreeBlocks],dx
 1B2B  C3				retn

 1B2C				set_firstfreeblock endp

 1B2C				find_bfn proc near
					; 12/12/2021
					; 22/01/2020
					; 20/01/2020
					; 18/09/2019 - Retro UNIX 386 v2 (modified unix v7 inodes)
					;
					; 04/12/2015 (14 byte file names)
					; 26/11/2012
					; 25/11/2012
					;
					; find boot file name by i-number (ax)
					;
					; cf -> 1 means error, ax = 0 -> not found

 1B2C  A3 276E R			mov	word ptr [uf_i_number], ax
 1B2F  56				push	si

 1B30  B8 0001				mov	ax, ROOT_DIR_INODE_NUMBER ; 41 (unix v1), 1 (runix v2)
 1B33  E8 F7E8				call	iget
 1B36  72 33				jc	short find_bfn_retn
					
					;test	word ptr [inode_flgs], 4000h ; directory i-node ?
					;jnz	short @f

					;mov	ah, 0FFh ; error number
					;stc
					;jmp	short find_bfn_retn
				;;@@:
					;xor	ax, ax 
					;mov	word ptr [u_off], ax ; u_off is file offset used by user
					;; 20/01/2020
					;mov	word ptr [u_off+2], ax
					; 22/01/2020
 1B38  33 D2				xor	dx, dx
 1B3A  89 16 27C2 R			mov	word ptr [u_off], dx ; 0
 1B3E  89 16 27C4 R			mov	word ptr [u_off+2], dx ; 0
					
					; ax = ROOT_DIR_INODE_NUMBER = 1

 1B42				find_bfn_1:
				;find_bfn_readi:
 1B42  C7 06 27C0 R 27CA R		mov	word ptr [u_base], offset u_dirbuf
							; u.dirbuff holds a file name copied from a directory	
 1B48  C7 06 27C6 R 0010		mov	word ptr [u_count], 16 ; 04/12/2015 (10 -> 16) 	
				 	
					; 22/01/2020
					;mov	ax, ROOT_DIR_INODE_NUMBER ; = 1 ; 18/09/2019

 1B4E  E8 F73F				call	readi ; read 16 bytes of file with i-number
					  	      ; i.e. read a directory entry
 1B51  72 18				jc	short find_bfn_retn

					;mov	ax, word ptr [u_nread]

					;or	ax, ax
					;jz	short find_bfn_3 ; gives error return 
					; 22/01/2020
 1B53  83 3E 27C8 R 10			cmp	word ptr [u_nread], 16
 1B58  72 11				jb	short find_bfn_retn ; cf = 1 ; error

 1B5A  A1 27CA R			mov	ax, word ptr [u_dirbuf]
					; 12/12/2021
 1B5D  3B 06 276E R			cmp	ax, word ptr [uf_i_number] ; Check i-number of directory entry
 1B61  74 05				je	short find_bfn_2  ; if same with specified uf_i_number
						   		  ; it is the boot file 
 1B63  B8 0001				mov	ax, ROOT_DIR_INODE_NUMBER ; = 1
 1B66  EB DA				jmp	short find_bfn_1
 1B68				find_bfn_2:
 1B68  E8 F7B3				call	iget
 1B6B				find_bfn_retn:
 1B6B  5E				pop	si
 1B6C  C3				retn

				;find_bfn_3:
				;	stc
				;	jmp	short find_bfn_retn
					
 1B6D				find_bfn endp

 1B6D				proc_display_startupfile_info proc near
					; 24/09/2019 - Retro UNIX 386 v2 (modified Unix v7 inode format)
					; 30/11/2012	
					; 29/11/2012 ; @@
					; 25/11/2012
				              
 1B6D  BE 25F9 R		 	mov	si, offset Msg_StartupFile_Name
 1B70  E8 E751				call	PRINT_MSG

 1B73  BE 275B R			mov	si, offset Boot_File_Name
 1B76  E8 E74B				call	PRINT_MSG

 1B79  BE 2806 R			mov	si, offset Str_Inode_Number
 1B7C  E8 E745				call	PRINT_MSG

 1B7F  BE 3190 R			mov	si, offset BSBuffer
 1B82  8B 44 12				mov	ax, word ptr [SI]+bs_bf_inode_num

 1B85  BE 2820 R			mov	si, offset Decimal_i_no_str
 1B88  B9 0005				mov	cx, 5
 1B8B  E8 0123				call	proc_bin_to_decimal

 1B8E  BE 2820 R			mov	si, offset Decimal_i_no_str 

 1B91  B9 0004				mov	cx, 4
 1B94				@@:
 1B94  80 3C 30				cmp	byte ptr [si], '0'
 1B97  77 03				ja	short @f
 1B99  46				inc	si
 1B9A  E2 F8				loop	@b 
 1B9C				@@:
 1B9C  E8 E725				call	PRINT_MSG

 1B9F  BE 2826 R			mov	si, offset Str_startup_file_size
 1BA2  E8 E71F				call	PRINT_MSG

 1BA5  A1 2778 R			mov	ax, word ptr [Inode_size]
 1BA8  BE 2844 R			mov	si, offset Decimal_size_str
					;mov	cx, 5
 1BAB  B1 05				mov	cl, 5
 1BAD  E8 0101				call	proc_bin_to_decimal

 1BB0  BE 2844 R			mov	si, offset Decimal_size_str

 1BB3  B1 04				mov	cl, 4
 1BB5				@@:
 1BB5  80 3C 30				cmp	byte ptr [si], '0'
 1BB8  77 03				ja	short @f
 1BBA  46				inc	si
 1BBB  E2 F8				loop	@b 
 1BBD				@@:
 1BBD  E8 E704				call	PRINT_MSG

 1BC0  BE 283D R			mov	si, offset Str_Bytes
 1BC3  E8 E6FE				call	PRINT_MSG

					; 24/09/2019
					
 1BC6  A1 27A4 R			mov	ax, word ptr [Inode_atim]
 1BC9  8B 16 27A6 R			mov	dx, word ptr [Inode_atim]+2

 1BCD  E8 FD48				call	convert_from_epoch
					
 1BD0  A1 27E2 R			mov	ax, word ptr [year]
 1BD3  BE 28CC R			mov	si, offset str_ayear
					;mov	cx, 4
 1BD6  B1 04				mov	cl, 4
 1BD8  E8 00D6				call	proc_bin_to_decimal
					
 1BDB  A1 27E4 R			mov	ax, word ptr [month]
 1BDE  BE 28C9 R			mov	si, offset str_amonth
 1BE1  B1 02				mov	cl, 2
 1BE3  E8 00CB				call	proc_bin_to_decimal

 1BE6  A1 27E6 R			mov	ax, word ptr [day]
 1BE9  BE 28C6 R			mov	si, offset str_aday
 1BEC  B1 02				mov	cl, 2
 1BEE  E8 00C0				call	proc_bin_to_decimal

 1BF1  A1 27E8 R			mov	ax, word ptr [hour]
 1BF4  BE 28D2 R			mov	si, offset str_ahour
 1BF7  B1 02				mov	cl, 2
 1BF9  E8 00B5				call	proc_bin_to_decimal

 1BFC  A1 27EA R			mov	ax, word ptr [minute]
 1BFF  BE 28D5 R			mov	si, offset str_aminute
 1C02  B1 02				mov	cl, 2
 1C04  E8 00AA				call	proc_bin_to_decimal

 1C07  A1 27EC R			mov	ax, word ptr [second]
 1C0A  BE 28D8 R			mov	si, offset str_asecond
 1C0D  B1 02				mov	cl, 2
 1C0F  E8 009F				call	proc_bin_to_decimal

 1C12  A1 27A8 R			mov	ax, word ptr [Inode_mtim]
 1C15  8B 16 27AA R			mov	dx, word ptr [Inode_mtim]+2

 1C19  E8 FCFC				call	convert_from_epoch
					
 1C1C  A1 27E2 R			mov	ax, word ptr [year]
 1C1F  BE 289C R			mov	si, offset str_myear
					;mov	cx, 4
 1C22  B1 04				mov	cl, 4
 1C24  E8 008A				call	proc_bin_to_decimal
					
 1C27  A1 27E4 R			mov	ax, word ptr [month]
 1C2A  BE 2899 R			mov	si, offset str_mmonth
 1C2D  B1 02				mov	cl, 2
 1C2F  E8 007F				call	proc_bin_to_decimal

 1C32  A1 27E6 R			mov	ax, word ptr [day]
 1C35  BE 2896 R			mov	si, offset str_mday
 1C38  B1 02				mov	cl, 2
 1C3A  E8 0074				call	proc_bin_to_decimal

 1C3D  A1 27E8 R			mov	ax, word ptr [hour]
 1C40  BE 28A2 R			mov	si, offset str_mhour
 1C43  B1 02				mov	cl, 2
 1C45  E8 0069				call	proc_bin_to_decimal

 1C48  A1 27EA R			mov	ax, word ptr [minute]
 1C4B  BE 28A5 R			mov	si, offset str_mminute
 1C4E  B1 02				mov	cl, 2
 1C50  E8 005E				call	proc_bin_to_decimal

 1C53  A1 27EC R			mov	ax, word ptr [second]
 1C56  BE 28A8 R			mov	si, offset str_msecond
 1C59  B1 02				mov	cl, 2
 1C5B  E8 0053				call	proc_bin_to_decimal

					; 30/11/2012
					
 1C5E  A1 27AC R			mov	ax, word ptr [Inode_ctim]
 1C61  8B 16 27AE R			mov	dx, word ptr [Inode_ctim]+2

 1C65  E8 FCB0				call	convert_from_epoch
					
 1C68  A1 27E2 R			mov	ax, word ptr [year]
 1C6B  BE 286C R			mov	si, offset str_cyear
					;mov	cx, 4
 1C6E  B1 04				mov	cl, 4
 1C70  E8 003E				call	proc_bin_to_decimal
					
 1C73  A1 27E4 R			mov	ax, word ptr [month]
 1C76  BE 2869 R			mov	si, offset str_cmonth
 1C79  B1 02				mov	cl, 2
 1C7B  E8 0033				call	proc_bin_to_decimal

 1C7E  A1 27E6 R			mov	ax, word ptr [day]
 1C81  BE 2866 R			mov	si, offset str_cday
 1C84  B1 02				mov	cl, 2
 1C86  E8 0028				call	proc_bin_to_decimal

 1C89  A1 27E8 R			mov	ax, word ptr [hour]
 1C8C  BE 2872 R			mov	si, offset str_chour
 1C8F  B1 02				mov	cl, 2
 1C91  E8 001D				call	proc_bin_to_decimal

 1C94  A1 27EA R			mov	ax, word ptr [minute]
 1C97  BE 2875 R			mov	si, offset str_cminute
 1C9A  B1 02				mov	cl, 2
 1C9C  E8 0012				call	proc_bin_to_decimal

 1C9F  A1 27EC R			mov	ax, word ptr [second]
 1CA2  BE 2878 R			mov	si, offset str_csecond
 1CA5  B1 02				mov	cl, 2
 1CA7  E8 0007				call	proc_bin_to_decimal

 1CAA  BE 284A R			mov	si, offset Str_SF_date_Time
 1CAD  E8 E614				call	PRINT_MSG
					
 1CB0  C3				retn  

 1CB1				proc_display_startupfile_info endp

 1CB1				proc_bin_to_decimal proc near
					; 30/11/2012 (CX input)	
					; 25/11/2012 unixboot.asm version	
					; 6-5-2009
					;  Erdogan Tan
					; INPUT: DS:SI = Target location
					;        AX = Binary Number
					;        CX = Number of digits	
					; OUTPUT: Decimal chars at DS:SI
					; CX, AX, DX will be changed.

					;push	bp
					;push	si
 1CB1				loc_reset_str_NumberInput:
 1CB1  C6 04 30				mov	byte ptr [si], "0"
 1CB4  46				inc	si
 1CB5  E2 FA				loop	loc_reset_str_NumberInput
 1CB7  8B EC				mov	bp, sp
 1CB9  33 D2				xor	dx, dx
 1CBB  B9 000A				mov	cx, 10
 1CBE				loc_rediv_NumberInput:
 1CBE  F7 F1				div	cx
 1CC0  80 C2 30				add	dl,'0'
 1CC3  52				push	dx
 1CC4  33 D2				xor	dx, dx
 1CC6  4E				dec	si
 1CC7  0B C0				or	ax, ax
 1CC9  75 F3				jnz	short loc_rediv_NumberInput
 1CCB				loop_popcx_NumberInput: 
 1CCB  5A				pop	dx
 1CCC  88 14				mov	byte ptr [si], dl
 1CCE  46				inc	si
 1CCF  3B EC				cmp	bp, sp
 1CD1  75 F8				jne	short loop_popcx_NumberInput
					;pop	si
					;pop	bp  
				 
 1CD3  C3				retn

 1CD4				proc_bin_to_decimal endp

 1CD4				imap	proc near
					; 22/01/2020
					; 25/09/2019
					; 18/09/2019 - Retro UNIX 386 v2 (modified unix v7 inodes)
					; 	(only for floppy disks, without 'hidden sectors')  
				        ; 02/12/2012
				        ; unix boot file configuration version
					; of "imap" procedure of retro unix v1.0 by Erdogan Tan
					; Derived from (original) UNIX v1 source code
					; PRELIMINARY release of Unix Implementation Document, 
					; 20/6/1972 
					; ('imap' procedure)

					; 18/09/2019
 1CD4  3B 06 33A4 R			cmp	ax,word ptr [systm.sb_InodeCount]
 1CD8  76 03				jna	short @f
					; Temporary (set inode number to the last inode)
 1CDA  A1 33A4 R			mov	ax,word ptr [systm.sb_InodeCount]
 1CDD				@@:
					; 11/11/2012 (maknod_imap location -> imap procedure)
 1CDD  8B D8			        mov	bx,ax	; BX = R2, AX = R1 (input, i-number)
					;sub	bx,41   ; BX has i-41

 1CDF  BA 0001			        mov	dx,1	; bit 0 = 1
				   
 1CE2  4B				dec	bx	; 18/09/2019 - Retro UNIX 386 V2 	
						; (root directory inode number = 1)
 1CE3  75 04				jnz	short @f ; inode map offset > 0

					; 25/09/2019
 1CE5  BB 3D90 R			mov	bx, offset im_buffer 
					
 1CE8  C3				retn
 1CE9				@@:	  
					;mov	dx,1
 1CE9  8A CB				mov	cl,bl   ; CX = R3   
 1CEB  80 E1 07				and	cl,7    ; CX has (i-41) mod 8 to get the bit position 		
					;jz	short @f ; 21/8/2012
					;shl	dx,cl   ; DX has 1 in the calculated bit position
 1CEE  D2 E2				shl	dl,cl ; 22/01/2020
 1CF0				@@:
 1CF0  D1 EB			        shr	bx,1
 1CF2  D1 EB			        shr	bx,1
 1CF4  D1 EB			        shr	bx,1	; BX has (i-41) base 8 of byte number
						; from the start of the (inode) map	

					;add	bx,word ptr [systm] ; superblock free map size + 4
					;add	bx,offset systm + 4 ; is inode map offset in superblock

					; Retro UNIX 386 v2
 1CF6  81 C3 3D90 R			add	bx, offset im_buffer ; 25/09/2019 

				        ; DX (MQ) has a 1 in the calculated bit position
				        ; BX (R2) has byte address of the byte with allocation bit

 1CFA  C3				retn

 1CFB				imap	endp

				; UNIX v7, x86 - iget.c (Robert Nordier, 1999)

 1CFB				itrunc proc near
					; 22/01/2020 ('itrunc' for Retro UNIX v2 bootable floppy disks)
					; 30/09/2019
					; 18/09/2019
					; 17/09/2019 - Retro UNIX v2
					; * Free all the disk blocks associated
					; * with the specified inode structure.
					;
					; (Simplified for Retro UNIX v2 bootable floppy disk...)
					; (< 32MB disks)

					; INPUT: 
					;	AX = inode number
					; OUTPUT: 
					;	inode will be modified (file size = 0)

					; 30/09/2019
 1CFB  E8 F620				call 	iget ; jsr r0,iget
 1CFE  72 43				jc	short itrunc_9 ; 30/09/2019

 1D00  F6 06 2771 R 80			test	byte ptr [inode_flgs+1],80h ; regular file or directory	
 1D05  74 38				jz	short itrunc_10 ; 22/01/2020

 1D07				itrunc_1:
 1D07  F6 06 2771 R 10			test	byte ptr [inode_flgs+1],10h ; large file (indirect blocks)
 1D0C  75 28				jnz	short itrunc_4
 1D0E  BE 277C R			mov	si,offset inode_dskp
 1D11				itrunc_2:
 1D11  AD				lodsw	
 1D12  23 C0				and	ax,ax
 1D14  74 12				jz	short itrunc_3
 1D16  E8 F874				call	free
					; 30/09/2019
 1D19  33 C0				xor	ax,ax
 1D1B  89 44 FE				mov	word ptr [si-2],ax ; 0
 1D1E  46				inc	si
 1D1F  46				inc	si
 1D20  81 FE 27A4 R			cmp	si,offset inode_dskp+40
 1D24  72 EB				jb	short itrunc_2
					; 30/09/2019
 1D26  33 C0				xor	ax,ax
 1D28				itrunc_3:
					;xor	ax,ax
 1D28  A3 2778 R			mov	word ptr [inode_size],ax ; 0
 1D2B  A3 277A R			mov	word ptr [inode_size+2],ax ; 0
					
					; 30/09/2019
					; Clear inode block addresses
					;mov	cx,20
					;mov	di,offset inode_dskp
					;rep	stosw

					; 30/09/2019
					; clear large file flag
 1D2E  80 26 2771 R EF			and     byte ptr [inode_flgs+1],0EFh ; 11101111b ;  not 10h
					
					;call	setimod
					;retn
 1D33  E9 F899				jmp	setimod

 1D36				itrunc_4:
					; free disk blocks by using triple indirect blocks at first
					;mov	ax,word ptr [inode_dskp+36]
					; 30/09/2019
 1D36  BE 27A0 R			mov	si,offset inode_dskp+36
 1D39  8B 04				mov	ax,word ptr [si]
					;
 1D3B  23 C0				and	ax,ax
 1D3D  74 05				jz	short itrunc_5 ; pass to double indirect blocks

					;mov	bx,2 ; Triple indirect sign
					;push	bx
					;push	ax
					;call	tloop
					;jc	short itrunc_0
					;; 30/09/2019
					;mov	word ptr [si],0
					;;mov	word ptr [si+2],0

					; 22/01/2020
					; Triple indirect block pointer must be 0 for 1.44MB fd

 1D3F				itrunc_10:
 1D3F  F9				stc ; error
 1D40				itrunc_0:
 1D40  B8 FFFF				mov	ax,0FFFFh
 1D43				itrunc_9:
 1D43  C3				retn
				 
 1D44				itrunc_5:
					; free disk blocks by using double indirect blocks at second
					;mov	ax,word ptr [inode_dskp+32]
					; 30/09/2019
 1D44  BE 279C R			mov	si,offset inode_dskp+32
 1D47  8B 04				mov	ax,word ptr [si]
					;
 1D49  23 C0				and	ax,ax
 1D4B  74 0E				jz	short itrunc_6 ; pass to single indirect blocks
 1D4D  BB 0001				mov	bx,1 ; Double indirect sign
 1D50  53				push	bx
 1D51  50				push	ax
 1D52  E8 0026				call	tloop
 1D55  72 E9				jc	short itrunc_0
					; 30/09/2019
 1D57  C7 04 0000			mov	word ptr [si],0
					;mov	word ptr [si+2],0
 1D5B				itrunc_6:
					; free disk blocks by using single indirect blocks at third
					;mov	si,offset inode_dskp+28
					; 30/09/2019
					; si = offset inode_dskp+32
					;mov	si,offset inode_dskp+32
 1D5B				itrunc_7:
 1D5B  83 EE 04				sub	si,4
 1D5E  8B 04				mov	ax,word ptr [si]
 1D60  23 C0				and	ax,ax
 1D62  74 0D				jz	short itrunc_8 ; skip
 1D64  2B DB				sub	bx,bx ; 0  ; Single indirect sign
 1D66  53				push	bx
 1D67  50				push	ax
 1D68  E8 0010				call	tloop
 1D6B  72 D3				jc	short itrunc_0
					; 30/09/2019
 1D6D  C7 04 0000			mov	word ptr [si],0
					;mov	word ptr [si+2],0
 1D71				itrunc_8:
					;sub	si,4	
 1D71  81 FE 277C R			cmp	si,offset inode_dskp
					;jnb	short itrunc_7
 1D75  77 E4				ja	short itrunc_7
 1D77  33 C0				xor	ax,ax
 1D79  EB AD				jmp	short itrunc_3
					
 1D7B				itrunc endp

 1D7B				tloop proc near
					; 22/01/2020 ('tloop' for Retro UNIX v2 bootable floppy disks)
					; 30/09/2019
					; 18/09/2019 - Retro UNIX v2
					; * Free all the disk blocks associated
					; * with the specified inode structure.
					;
					; (Simplified for Retro UNIX v2 bootable floppy disk...)

					; INPUT: 
					;	sp+2 = ax, indirect block number (sector address)
					;	sp+4 = bx, levels 
					;	(0 = indirect, 1 = double indr. 2 = triple indr.) 	
					
					; OUTPUT: indirect blocks will be released

 1D7B  59				pop	cx ; return address

 1D7C  58				pop	ax ; ++ indirect block number
 1D7D  5B				pop	bx ; + levels  ; 0 = single, 1 = double, 2 = triple 
						; 22/01/2020
						; Note: triple indirect block addressing 
						; is not applicable for 1.44MB floppy disks.
					; ( Double indirect limit = (8*64KB)+(128*64KB) = 8.5MB )
					
 1D7E  51				push	cx ; near call return address

 1D7F  57				push	di ; 30/09/2019
 1D80  56				push	si ; 30/09/2019

 1D81  55				push	bp ; **
 1D82  8B E8				mov	bp,ax ;*

					;call	bread
 1D84  53				push	bx ; 30/09/2019
 1D85  BB 3B90 R			mov	bx,offset WriteBuffer ; 22/01/2020
 1D88  E8 F9EB				call	dskrd
 1D8B  5B				pop	bx ; 30/09/2019
 1D8C  72 47				jc	short tloop_7
					; ax = block/sector number/address
 1D8E  BE 3B90 R			mov	si,offset WriteBuffer ; 24/09/2019
 1D91  83 FB 01				cmp	bx,1
 1D94  72 23				jb	short tloop_4
					; 22/01/2020
					;je	short tloop_1
					;mov	di,offset trpi_buffer
					;jmp	short tloop_2
 1D96				tloop_1:
 1D96  BF 4190 R			mov	di,offset dbli_buffer
 1D99				tloop_2:	
 1D99  B9 0100			 	mov	cx,256
 1D9C  57				push	di
 1D9D  F3/ A5				rep	movsw
 1D9F  B1 80				mov	cl,128
 1DA1  5E				pop	si
 1DA2  4B				dec	bx ; 2 -> 1, 1 -> 0
					; 30/09/2019
 1DA3  47				inc 	di
 1DA4  47				inc	di
 1DA5				tloop_3:
 1DA5  83 EF 04				sub	di,4
					;push	di
					;push	si
 1DA8  53				push	bx
 1DA9  51				push	cx	
 1DAA  8B 05				mov	ax,word ptr [di]
 1DAC  53				push	bx ;+
 1DAD  50				push	ax ;++
 1DAE  E8 FFCA				call	tloop
 1DB1  59				pop	cx
 1DB2  5B				pop	bx
					;pop	si
					;pop	di
 1DB3  72 20				jc	short tloop_7
 1DB5  E2 EE				loop	tloop_3

					; 22/01/2020
 1DB7  EB 17				jmp	short tloop_8
					
					; free blocks in current indirect block
 1DB9				tloop_4:
 1DB9  B9 0080				mov	cx,128
 1DBC  81 C6 01FC			add	si,508 ; 30/09/2019
 1DC0				tloop_5:
 1DC0  8B 04				mov	ax,word ptr [si]
 1DC2  0B C0				or	ax,ax
 1DC4  74 05				jz	short tloop_6
 1DC6  51				push	cx ; 30/09/2019
 1DC7  E8 F7C3				call	free
 1DCA  59				pop	cx ; 30/09/2019
 1DCB				tloop_6:
 1DCB  83 EE 04				sub	si,4
 1DCE  E2 F0				loop	tloop_5
 1DD0				tloop_8:	; 22/01/2020
 1DD0  8B C5				mov	ax,bp ;* ; free indirect block's itself
 1DD2  E8 F7B8				call	free
 1DD5				tloop_7:
 1DD5  5D				pop	bp ; **
 1DD6  5E				pop	si ; 30/09/2019
 1DD7  5F				pop	di ; 30/09/2019
 1DD8  C3				retn

 1DD9				tloop endp

 1DD9				chmode  proc near
					; 02/10/2019
					; 01/10/2019
					; 10/09/2019 - Retro UNIX 386 v2
					; 13/01/2013
					; 'change mode' procedure
					; Format: chmod <octal number> <unix file name>
					;
					; output -> cf=1 -> error
					; 	-> cf=0 -> word ptr [arg] > 0 -> mode (string, 2 chars)
					;	   word ptr [arg] = 0 -> ignored (none is done)	
				        
 1DD9  33 C0				xor	ax, ax
 1DDB  BF 249B R			mov	di, offset arg
 1DDE  89 05				mov	word ptr [di], ax ; 0  ; reset
 1DE0  88 45 02				mov	byte ptr [di+2], al ; 0 ; 01/10/2019
 1DE3  33 D2				xor	dx, dx ; 0
 1DE5				chmode_1:
 1DE5  AC				lodsb
 1DE6  3C 30				cmp	al, '0'
 1DE8  72 13				jb	short chmode_3
 1DEA  3C 37				cmp	al, '7'
 1DEC  77 0C				ja	short chmode_stc_retn

					; 02/10/2019
 1DEE  2C 30				sub	al,'0'
 1DF0  AA				stosb	
 1DF1  FE C2				inc	dl
 1DF3  80 FA 03				cmp	dl, 3
 1DF6  73 04				jnb	short chmode_2 ; 01/10/2019
 1DF8  EB EB				jmp	short chmode_1

 1DFA				chmode_stc_retn:
 1DFA  F5				cmc
 1DFB				chmode_retn:
 1DFB  C3				retn

 1DFC				chmode_2:
					; 01/10/2019
 1DFC  AC				lodsb
 1DFD				chmode_3:
 1DFD  0A D2				or	dl, dl
 1DFF  74 F9				jz	short chmode_stc_retn ; zero access rights or invalid !
 1E01  3C 20				cmp	al, 20h
 1E03  75 F5				jne	short chmode_stc_retn ; there is not a file name argument!
 1E05				chmode_4:
 1E05  38 04				cmp	byte ptr [si], al ; 20h
					; no error if the 4th character is a space
 1E07  77 05				ja	short chmode_5
 1E09  72 EF				jb	short chmode_stc_retn ; there is not a file name argument!
 1E0B  46				inc	si
 1E0C  EB F7				jmp	short chmode_4 
 1E0E				chmode_5:
					; 02/10/2019
 1E0E  B8 3030				mov	ax, '00'
 1E11  8A D8				mov	bl, al
 1E13  87 06 249B R			xchg	ax, word ptr [arg]
 1E17  86 1E 249D R			xchg	bl, byte ptr [arg+2]	
					; owner's permissions always must be more than group and others 
 1E1B  0A E3				or	ah, bl ; group's permissions must be more than others
 1E1D  0A C4			   	or	al, ah
 1E1F  01 06 249B R			add	word ptr [arg], ax
 1E23  00 1E 249D R			add	byte ptr [arg+2], bl
 1E27  8A D0				mov	dl, al
 1E29  D0 E2				shl	dl, 1
 1E2B  D0 E2				shl	dl, 1
 1E2D  D0 E2				shl	dl, 1
 1E2F  0A D4				or	dl, ah
 1E31  D0 E2				shl	dl, 1
 1E33  D0 E2				shl	dl, 1
 1E35  D1 E2				shl	dx, 1
 1E37  0A D3				or	dl, bl
 1E39  8B EA				mov	bp, dx  		
 1E3B				chmode_6:
 1E3B  89 36 27BC R			mov	word ptr [u_namep], si ; 02/10/2019
					;call	namei
 1E3F  E8 F3B9				call	namei_x ; 02/10/2019	
 1E42  72 B7				jc	short chmode_retn

					; ax = i-number
 1E44  E8 F4D7				call	iget
 1E47  72 B2				jc	short chmode_retn

					; 02/10/2019
 1E49  8B C5				mov	ax, bp
					;and	ax, 1FFh

 1E4B  BB 2770 R			mov	bx, offset inode_flgs
					; 01/10/2019
 1E4E  8B 17				mov	dx, word ptr [bx]
 1E50  81 E2 FE00			and	dx, 0FE00h ; clear permission bits

 1E54  0B C2				or	ax, dx  ; combine other feature bits with permission bits 
 1E56				chmode_7:
 1E56  89 07				mov	word ptr [bx], ax
 1E58  C6 06 27B2 R 01			mov	byte ptr [imod], 1
					; 19/09/2019
 1E5D  C6 06 27B3 R 01			mov	byte ptr [imodx], 1 ; 19/09/2019 - Retro UNIX 386 v2
						; (flag means file data is same
						;  but inode's itself is modified)
 1E62  EB 97				jmp	short chmode_retn	

 1E64				chmode  endp 

 1E64				chgroup proc near
					; 10/09/2019 - Retro UNIX 386 v2
					; 'change group' procedure
					; Format: chgrp <decimal number> <unix file name>
					;
					; output -> cf=1 -> error
					; 	-> cf=0 -> 
					; 	   BX > 0 -> offset arg == group (decimal string, 3 chars)
					;	   BX = 0 -> ignored (none is done)

 1E64  C6 06 1E6B R 01			mov	byte ptr [chg], 1  ; change group sign ; 1 = change group
 1E69  EB 06				jmp	short cg_og

 1E6B FF			chg:	db 0FFh ; Change signature/flag

 1E6C				chgroup endp

 1E6C				chowner proc near
					; 01/10/2019
					; 10/09/2019 - Retro UNIX 386 v2
					; 13/01/2013
					; 'change owner' procedure
					; Format: chown <decimal number> <unix file name>
					;
					; output -> cf=1 -> error
					; 	-> cf=0 -> 
					; 	   BX > 0 -> offset arg == owner (decimal string, 3 chars)
					; 	   BX = 0 -> ignored (none is done)	

 1E6C  C6 06 1E6B R 00			mov	byte ptr [chg], 0  ; change group sign ; 0 = change owner
 1E71				cg_og:
 1E71  33 C0				xor	ax, ax
 1E73  BF 249B R			mov	di, offset arg
 1E76  89 05				mov	word ptr [di], ax ; 0
 1E78  88 45 02				mov	byte ptr [di+2], al ; 0 ; 01/10/2019
 1E7B  33 DB				xor	bx, bx
					;mov	cx, 3
 1E7D  B9 3930				mov	cx, '90'
					;xor	dx, dx
 1E80  32 D2				xor	dl, dl
 1E82				chowner_1:
 1E82  AC				lodsb
 1E83  38 C8				cmp	al, cl ; '0'
 1E85  72 24				jb	short chowner_5
 1E87  38 E8				cmp	al, ch ; '9'
 1E89  77 1E				ja	short chowner_stc_retn ; cmc
 1E8B  FE C2				inc	dl
 1E8D				chowner_2:
 1E8D  0A DB				or	bl, bl
 1E8F  75 06				jnz	short chowner_3

 1E91  38 C8				cmp	al, cl ; '0'
 1E93  74 ED				je	short chowner_1
 1E95  EB 08				jmp	short chowner_4

 1E97				chowner_3:
 1E97  50				push	ax
 1E98  B0 0A				mov	al, 10
 1E9A  F6 E3				mul	bl
 1E9C  8B D8				mov	bx, ax
 1E9E  58				pop	ax
 1E9F				chowner_4:
 1E9F  2A C1				sub	al, cl ; '0'
 1EA1  03 D8				add	bx, ax
 1EA3  0A FF				or	bh, bh
 1EA5  74 11				jz	short chowner_7
 1EA7  33 DB				xor	bx, bx

 1EA9				chowner_stc_retn:
 1EA9  F5				cmc
 1EAA  C3				retn	

 1EAB				chowner_5:
 1EAB  22 D2				and	dl, dl
 1EAD  74 4A				jz	short chowner_retn	
 1EAF  3C 20				cmp	al, 20h
 1EB1  74 0A				je	short chowner_8
 1EB3				chowner_6:
 1EB3  BB 0000				mov	bx, 0
 1EB6  EB F1				jmp	short chowner_stc_retn

 1EB8				chowner_7:
 1EB8  02 C1				add	al, cl ;'0'
 1EBA  AA				stosb
 1EBB  EB C5				jmp	short chowner_1
					;loop	chowner_1
					;cmp	byte ptr [SI], 20h
					;; no error if the 4th character is a carriage return
					;jne	short chowner_6

					;inc	si
 1EBD				chowner_8:
 1EBD  89 36 27BC R			mov	word ptr [u_namep], si
 1EC1  AC				lodsb
 1EC2  3C 20				cmp	al, 20h
 1EC4  74 F7				je	short chowner_8
 1EC6  72 EB				jb	short chowner_6 ; no error (carriage return)

					;mov	byte ptr [u_uid], bl
 1EC8  53				push	bx
 1EC9  E8 F32B				call	namei
 1ECC  72 03				jc	short chowner_9

					; ax = i-number
 1ECE  E8 F44D				call	iget

 1ED1				chowner_9:
					;pushf
					;mov	bl, byte ptr [u_uid]
					;xor	bh, bh
					;mov	byte ptr [u_uid], bh ; 0
					;popf
 1ED1  5B				pop	bx
 1ED2  72 25				jc	short chowner_retn

					; 10/09/2019 - Retro UNIX 386 v2
					;mov	byte ptr [inode_uid], bl
 1ED4  80 3E 1E6B R 00			cmp	byte ptr [chg],0
 1ED9  76 06				jna	short chowner_10 ; change user ID
					; change group ID	
 1EDB  88 1E 2776 R			mov	byte ptr [inode_gid], bl
 1EDF  EB 04				jmp	short chowner_11	
 1EE1				chowner_10:
 1EE1  88 1E 2774 R			mov	byte ptr [inode_uid], bl
 1EE5				chowner_11:	;
 1EE5  C6 06 27B2 R 01			mov	byte ptr [imod], 1
					; 19/09/2019
 1EEA  C6 06 27B3 R 01			mov	byte ptr [imodx], 1 ; 19/09/2019 - Retro UNIX 386 v2
						; (flag means file data is same
						;  but inode's itself is modified)
 1EEF  0A DB				or	 bl, bl
 1EF1  75 06				jnz	short chowner_retn

 1EF3  B7 30				mov	bh, '0'
 1EF5  88 3E 249B R			mov	byte ptr [arg], bh 

 1EF9				chowner_retn:	
 1EF9  C3				retn
						
 1EFA				chowner endp

 1EFA				print_file_size proc near
					; 12/12/2021
					; 22/01/2020
 1EFA  A1 2778 R			mov	ax, word ptr [inode_size]
 1EFD  8B 16 277A R			mov	dx, word ptr [inode_size+2]
					;mov	cx, 11
 1F01  B1 0B				mov	cl, 11
 1F03  EB 02				jmp	short pdn0

 1F05				print_file_size endp

 1F05				print_decimal_number proc near
					; 12/12/2021
					; 22/01/2020 (32 bit binary number in dx:ax)
					; 03/02/2013
					; 21/01/2013 
					; print decimal number
					;
					; INPUT -> AX = Integer
					; 32/02/2013 CX = Number of decimal digits
					; OUTPUT -> decimal number as string

 1F05  33 D2				xor	dx,dx ; set high word of binary number to zero
 1F07				pdn0:
					; 15/01/2020
					;mov	si, offset dec_num
					;
					;mov	bx, si
					;dec	si ; 29/12/2019
					;add	si, cx ; 03/02/2013
					;mov	di, si
					;;mov	cx, 10
					;mov	cl, 10
					;mov	dl, '0'
				;@@: 
					;mov	byte ptr [bx], dl
					;inc	bx
					;loop	@b
					;
					;xor	dl, dl
					;mov	byte ptr [bx], dl

					; 15/01/2020
					;mov	bx, 10
					;xor	dx, dx
				;pdn_itoa:
					;div	bx
					; 03/02/2013
					;add	byte ptr [si], dl ; 03/02/2013
					;and	dl, dl
					;jnz	short @f
					;;and	al, al
					;; 10/01/2020
					;and	ax, ax
					;jz	short pdn_14
				;@@:	
					;dec	si
					;xor	dl, dl
					;jmp	short pdn_itoa

					; 22/01/2020
 1F07  BE 28DF R			mov	si, offset dec_num
					;
 1F0A  8B DE				mov	bx, si
 1F0C  4E				dec	si
 1F0D  03 F1				add	si, cx
 1F0F  8B FE				mov	di, si
					;;mov	cx, 11
					;mov	cl, 11
					;mov	ch, '0'
					; 12/12/2021
 1F11  B9 300B				mov	cx, 300Bh
 1F14				@@: 
 1F14  88 2F				mov	byte ptr [bx], ch
 1F16  43				inc	bx
 1F17  FE C9				dec	cl
 1F19  75 F9				jnz	short @b
					
					;xor	ch, ch
					;mov	byte ptr [bx], ch

					; ***** ; 22/01/2020

					; 22/01/2020
 1F1B  B9 000A				mov	cx, 10
 1F1E  0B D2				or	dx, dx
 1F20  75 11				jnz	short pfn_itoa	
 1F22				pdn_itoa:
 1F22  F7 F1				div	cx
					; 03/02/2013
 1F24  00 14				add	byte ptr [si], dl
 1F26  22 D2				and	dl, dl
 1F28  75 04				jnz	short @f
					;and	al, al
					; 10/01/2020
 1F2A  23 C0				and	ax, ax
 1F2C  74 19				jz	short pdn_14 ; *
 1F2E				@@:	
 1F2E  4E				dec	si
					;xor	dx, dx
 1F2F  32 D2				xor	dl, dl
 1F31  EB EF				jmp	short pdn_itoa
					
					; 22/01/2020
					;mov	cx, 10
 1F33				pfn_itoa:
 1F33  E8 FA72				call	div32
 1F36  00 1C				add	byte ptr [si], bl
 1F38  22 DB				and	bl, bl
 1F3A  75 08				jnz	short @f
 1F3C  23 C0				and	ax, ax
 1F3E  75 04				jnz	short @f
 1F40  23 D2				and	dx, dx
 1F42  74 03				jz	short pdn_14 ; *
 1F44				@@:	
 1F44  4E				dec	si
 1F45  EB EC				jmp	short pfn_itoa

					; ***** ; 22/01/2020

 1F47				pdn_14:
 1F47  BE 28DF R			mov	si, offset dec_num
 1F4A  8B DE				mov	bx, si
 1F4C				@@:	; leading zeros will not be printed
 1F4C  8A 07			        mov	al, byte ptr [bx] ; 03/02/2013
 1F4E  3C 30				cmp	al, '0'
 1F50  77 0B				ja	short @f
 1F52  3B DF				cmp	bx, di
 1F54  73 07				jnb	short @f
 1F56  B0 20				mov	al, 20h
 1F58  88 07				mov	byte ptr [bx], al 
 1F5A  43				inc	bx
 1F5B  EB EF				jmp	short @b
 1F5D				@@:
 1F5D				pdn_putc:
 1F5D  B4 0E				mov	ah, 0Eh
 1F5F  BB 0007				mov	bx, 07h
 1F62				@@:
 1F62  AC				lodsb
					
 1F63  CD 10				int	10h

 1F65  3B F7				cmp	si, di
 1F67  76 F9				jna	short @b

					;mov	al, 20h
					;int	10h
					
 1F69  C3				retn 
					
 1F6A				print_decimal_number endp

 1F6A				print_volume_info proc near
					; 12/12/2021
					; 24/09/2019 - Retro UNIX 386 v2
					;	      (modified unix v7 inode format)
					; 16/02/2013

 1F6A  BB 3190 R			mov	bx, offset BSBuffer
 1F6D  83 C3 08				add	bx, bsVolumeSerial+2
 1F70  B9 0002				mov	cx, 2
 1F73  BF 2948 R			mov	di, offset msgVolume_Serial
 1F76				@@:
 1F76  8B 07				mov	ax, word ptr [bx]
 1F78  E8 0064				call	proc_hex_double
 1F7B  AB				stosw
 1F7C  8B C2				mov	ax, dx
 1F7E  AB				stosw
 1F7F  49				dec	cx
 1F80  74 06				jz	short @f
 1F82  47				inc	di
 1F83  83 EB 02				sub	bx, 2	
 1F86  EB EE				jmp	short @b
 1F88				@@:
 1F88  BE 28F0 R			mov	si, offset msgVolume_Info
 1F8B  E8 E336				call	PRINT_MSG

					; 24/09/2019
 1F8E				@@:
 1F8E  BE 2955 R			mov	si, offset msgVol_Size_Hdr
 1F91  E8 E330				call PRINT_MSG
 1F94  A1 3398 R			mov	ax, word ptr [systm.sb_VolumeSize] ; total sectors
 1F97  B1 04				mov	cl, 4 ; mov cx, 4
 1F99  E8 FF69				call	print_decimal_number
 1F9C  BE 2964 R			mov	si, offset msgVolume_Size
 1F9F  E8 E322				call	PRINT_MSG

 1FA2  BE 296E R			mov	si, offset msgVol_freeblocks_Hdr
 1FA5  E8 E31C				call	PRINT_MSG
 1FA8  A1 33C8 R			mov	ax, word ptr [systm.sb_FreeBlocks] ; free sectors 
					;mov	cx, 4	
 1FAB  B1 04				mov	cl, 4 ; 12/12/2021
 1FAD  E8 FF55				call	print_decimal_number
 1FB0  BE 297D R			mov	si, offset msgVolume_freeblocks
 1FB3  E8 E30E				call	PRINT_MSG

 1FB6				@@:
 1FB6  BE 2987 R			mov	si, offset msgVol_icount_Hdr
 1FB9  E8 E308				call	PRINT_MSG
 1FBC  A1 33A4 R			mov	ax, word ptr [systm.sb_InodeCount] ; number of inodes
 1FBF  B1 04				mov	cl, 4 ; mov cx, 4
 1FC1  E8 FF41				call	print_decimal_number
 1FC4  BE 2996 R			mov	si, offset msgVolume_icount
 1FC7  E8 E2FA				call	PRINT_MSG

 1FCA  BE 2999 R			mov	si, offset msgVol_free_icount_Hdr
 1FCD  E8 E2F4				call	PRINT_MSG
 1FD0  A1 33C0 R			mov	ax, word ptr [systm.sb_FreeInodes] ; num of free inodes
					;mov	cx, 4	
 1FD3  B1 04				mov	cl, 4
 1FD5  E8 FF2D				call	print_decimal_number
 1FD8  BE 29A8 R			mov	si, offset msgVolume_free_icount
 1FDB  E8 E2E6				call	PRINT_MSG

 1FDE  C3				retn	
					
 1FDF				print_volume_info endp

 1FDF				proc_hex_double proc near
					; 16/02/2013 (AX:DX)
					; 28/01/2002 (DX:AX)
					; From binary (word) to hexadecimal (character) converter
					;
					; input -> 
					;	AX = word (binary number) to be converted
					; output ->
					;	AX = First 2 characters of hexadecimal number
					;	DX = Last 2 characters of hexadecimal number

 1FDF  51				push	cx
 1FE0  33 D2			        xor	dx, dx
 1FE2  B9 0010			        mov	cx, 10h
 1FE5  F7 F1			        div	cx	; Q in AX, R in DX (DL)
 1FE7  52			        push	dx	; DH= 0, R in DL <- CX= 10h 
 1FE8  32 D2			        xor	dl, dl
 1FEA  F7 F1			        div	cx	; DH= 0, R in DL, AX <= FFh
 1FEC  F6 F1			        div	cl	; AL <= 0Fh
							; R in AH, Q in AL
 1FEE  59			        pop	cx	; R in CL
 1FEF  8A F1				mov	dh, cl
					
 1FF1  81 CA 3030		        or	dx,'00'

 1FF5  80 FA 39			        cmp	dl,'9'
 1FF8  76 03			        jna	short pass_cc_dl
 1FFA  80 C2 07			        add	dl,7
 1FFD				pass_cc_dl:
 1FFD  80 FE 39			        cmp	dh,'9'
 2000  76 03			        jna	short pass_cc_dh
 2002  80 C6 07			        add	dh,7
 2005				pass_cc_dh:
 2005  0D 3030			        or	ax, '00'

 2008  3C 39			        cmp	al,'9'
 200A  76 02			        jna	short pass_cc_al
 200C  04 07			        add	al,7
 200E				pass_cc_al:
 200E  80 FC 39			        cmp	ah,'9'
 2011  76 03			        jna	short pass_cc_ah
 2013  80 C4 07			        add	ah,7
 2016				pass_cc_ah:
 2016  59			        pop	cx

 2017  C3			        retn

 2018				proc_hex_double endp

 2018				show_inode proc near
					; 24/09/2019
					; 20/09/2019 - Retro UNIX 386 v2 (modified unix v7 inode format)
					; 17/02/2013
					; print inode details
					; Format: inode <decimal number>, iget <decimal number>
					; INPUT -> AX <> 0 -> Current Inode [ii]
					;	AX = 0 -> use inode number input
					;
 2018  23 C0				and	ax, ax
 201A  75 4B				jnz	short show_inode_7
 201C  A3 249B R			mov	word ptr [arg], ax ; 0
 201F  33 D2				xor	dx, dx
 2021				show_inode_1:
 2021  AC				lodsb
 2022  3C 30				cmp	al, '0'
 2024  72 0E				jb	short show_inode_4
 2026  3C 39				cmp	al, '9'
 2028  77 12			        ja	short show_inode_stc_retn ; cmc
 202A  2C 30				sub	al, '0'
 202C				show_inode_2:
 202C  0B D2				or	dx, dx
 202E  75 0E				jnz	short show_inode_5
 2030				show_inode_3:
 2030  8B D0				mov	dx, ax
 2032  EB ED				jmp	short show_inode_1
 2034				show_inode_4:
 2034  0B D2				or	dx, dx
 2036  74 04				jz	short show_inode_stc_retn
 2038  3C 20				cmp	al, 20h
 203A  76 14				jna	short show_inode_6
 203C				show_inode_stc_retn:
 203C  F5				cmc
 203D				show_inode_retn:
 203D  C3				retn
 203E				show_inode_5:
 203E  81 FA 0100			cmp	dx, 256
 2042  73 F8				jnb	short show_inode_stc_retn
 2044  8A E2				mov	ah, dl
 2046  8A D0				mov	dl, al
 2048  B0 0A				mov	al, 10
 204A  F6 E4				mul	ah
 204C  03 D0				add	dx, ax 
 204E  EB D1				jmp	short show_inode_1
 2050				show_inode_6:
					;mov	bx, word ptr [systm]
					;add	bx, offset systm+2
					;mov	ax, word ptr [bx] ; inode map bytes
					
					; 20/09/2019 - Retro UNIX 386 v2
 2050  A1 33B4 R			mov	ax, word ptr [systm.sb_InodeMapSize]

 2053  D1 E0				shl	ax, 1
 2055  D1 E0				shl	ax, 1
 2057  D1 E0				shl	ax, 1 ; inode count

					; 20/09/2019 - Retro UNIX 386 v2	
					;add	ax, 40 ; + device file inodes
					
 2059  3B C2				cmp	ax, dx
 205B  72 E0				jb	short show_inode_retn ; not a valid i-number
 205D  8B C2				mov	ax, dx
 205F  A3 249B R			mov	word ptr [arg], ax
					; ax = i-number
 2062  E8 F2B9				call	iget
 2065  72 D6				jc	short show_inode_retn
 2067				show_inode_7:
					;mov	ax, word ptr [ii]
 2067  E8 FF75				call	proc_hex_double
 206A  A3 29FF R			mov	word ptr [txt_inode_number], ax
 206D  89 16 2A01 R			mov	word ptr [txt_inode_number+2], dx
 2071  A1 2770 R			mov	ax, word ptr [inode_flgs]
 2074  50				push	ax
 2075  E8 FF67				call	proc_hex_double
 2078  A3 2A10 R			mov	word ptr [txt_inode_flags_h], ax
 207B  89 16 2A12 R			mov	word ptr [txt_inode_flags_h+2], dx
 207F  5A				pop	dx
 2080  BF 2A17 R			mov	di, offset txt_inode_flags_b
 2083  B9 0010				mov	cx, 16
 2086				@@:
 2086  32 C0				xor	al, al ; 0
 2088  D1 E2				shl	dx, 1
 208A  14 30				adc	al, '0'
 208C  AA				stosb
 208D  E2 F7				loop @b

					; 24/09/2019
 208F  A1 2772 R			mov	ax, word ptr [inode_nlks]
 2092  E8 FF4A				call	proc_hex_double
 2095  A3 2A38 R			mov	word ptr [txt_inode_nlks], ax
 2098  89 16 2A3A R			mov	word ptr [txt_inode_nlks+2], dx

 209C  A1 2774 R			mov	ax, word ptr [inode_uid]
 209F  E8 FF3D				call	proc_hex_double
 20A2  A3 2A49 R			mov	word ptr [txt_inode_uid], ax
 20A5  89 16 2A4B R			mov	word ptr [txt_inode_uid+2], dx

 20A9  A1 2776 R			mov	ax, word ptr [inode_gid]  ; & size_h
 20AC  E8 FF30				call	proc_hex_double
 20AF  89 16 2A5B R			mov	word ptr [txt_inode_gid], dx
 20B3  A3 2A6A R			mov	word ptr [txt_inode_size_h], ax

 20B6  A1 277A R		        mov	ax, word ptr [inode_size+2]
 20B9  E8 FF23				call	proc_hex_double
 20BC  A3 2A76 R			mov	word ptr [txt_inode_size], ax
 20BF  89 16 2A78 R			mov	word ptr [txt_inode_size+2], dx

 20C3  A1 2778 R		        mov	ax, word ptr [inode_size]
 20C6  E8 FF16				call	proc_hex_double
 20C9  A3 2A7A R			mov	word ptr [txt_inode_size+4], ax
 20CC  89 16 2A7C R			mov	word ptr [txt_inode_size+6], dx

 20D0  B1 08				mov	cl, 8
 20D2  BE 277C R			mov	si, offset inode_dskp
 20D5  BF 2A91 R			mov	di, offset txt_inode_dskp
 20D8				show_indir_bn:
 20D8				@@:
 20D8  AD				lodsw
 20D9  8B D0				mov	dx,ax
 20DB  AD				lodsw
 20DC  52				push	dx	
 20DD  E8 FEFF				call	proc_hex_double	
 20E0  AB				stosw
 20E1  8B C2				mov	ax, dx
 20E3  AB				stosw
 20E4  58				pop	ax
 20E5  E8 FEF7				call	proc_hex_double	
 20E8  AB				stosw
 20E9  8B C2				mov	ax, dx
 20EB  AB				stosw
 20EC  FE C9				dec	cl
 20EE  74 04				jz	short @f
 20F0  47				inc	di
 20F1  47				inc	di
 20F2  EB E4				jmp	short @b
 20F4				@@:
 20F4  81 FE 279C R			cmp	si, offset inode_dskp+32
 20F8  77 07				ja	short @f	
 20FA  B1 02				mov	cl,2
 20FC  BF 2AE2 R			mov	di, offset txt_inode_dskp_i
 20FF  EB D7				jmp	short show_indir_bn
 2101				@@:
					;mov	si, offset inode_atim
 2101  8B 04				mov	ax, word ptr [si]
 2103  8B 54 02				mov	dx, word ptr [si+2]
 2106  52				push	dx
 2107  50				push	ax
 2108  52				push	dx
 2109  E8 FED3				call	proc_hex_double
 210C  A3 2B11 R			mov	word ptr [txt_inode_atim_h+4], ax	
 210F  89 16 2B13 R			mov	word ptr [txt_inode_atim_h+6], dx
 2113  58				pop	ax
 2114  E8 FEC8				call	proc_hex_double
 2117  A3 2B0D R			mov	word ptr [txt_inode_atim_h], ax	
 211A  89 16 2B0F R			mov	word ptr [txt_inode_atim_h+2], dx
 211E  58				pop	ax
 211F  5A				pop	dx
 2120  E8 F7F5				call	convert_from_epoch
 2123  A1 27E2 R			mov	ax, word ptr [year]
 2126  BE 2B1F R			mov	si, offset txt_inode_ayear
					;mov	cx, 4
 2129  B1 04				mov	cl, 4
 212B  E8 FB83				call	proc_bin_to_decimal
 212E  A1 27E4 R			mov	ax, word ptr [month]
 2131  BE 2B1C R			mov	si, offset txt_inode_amonth
 2134  B1 02				mov	cl, 2
 2136  E8 FB78				call	proc_bin_to_decimal
 2139  A1 27E6 R			mov	ax, word ptr [day]
 213C  BE 2B19 R			mov	si, offset txt_inode_aday
 213F  B1 02				mov	cl, 2
 2141  E8 FB6D				call	proc_bin_to_decimal
 2144  A1 27E8 R			mov	ax, word ptr [hour]
 2147  BE 2B24 R			mov	si, offset txt_inode_ahour
 214A  B1 02				mov	cl, 2
 214C  E8 FB62				call	proc_bin_to_decimal
 214F  A1 27EA R			mov	ax, word ptr [minute]
 2152  BE 2B27 R			mov	si, offset txt_inode_aminute
 2155  B1 02				mov	cl, 2
 2157  E8 FB57				call	proc_bin_to_decimal
 215A  A1 27EC R			mov	ax, word ptr [second]
 215D  BE 2B2A R			mov	si, offset txt_inode_asecond
 2160  B1 02				mov	cl, 2
 2162  E8 FB4C				call	proc_bin_to_decimal
 2165  BE 27A8 R			mov	si, offset inode_mtim
 2168  8B 04				mov	ax, word ptr [si]
 216A  8B 54 02				mov	dx, word ptr [si+2]
 216D  52				push	dx
 216E  50				push	ax
 216F  52				push	dx
 2170  E8 FE6C				call	proc_hex_double
 2173  A3 2B47 R			mov	word ptr [txt_inode_mtim_h+4], ax	
 2176  89 16 2B49 R			mov	word ptr [txt_inode_mtim_h+6], dx
 217A  58				pop	ax
 217B  E8 FE61				call	proc_hex_double
 217E  A3 2B43 R			mov	word ptr [txt_inode_mtim_h], ax	
 2181  89 16 2B45 R			mov	word ptr [txt_inode_mtim_h+2], dx
 2185  58				pop	ax
 2186  5A				pop	dx
 2187  E8 F78E				call	convert_from_epoch
 218A  A1 27E2 R			mov	ax, word ptr [year]
 218D  BE 2B55 R			mov	si, offset txt_inode_myear
					;mov	cx, 4
 2190  B1 04				mov	cl, 4
 2192  E8 FB1C				call	proc_bin_to_decimal
 2195  A1 27E4 R			mov	ax, word ptr [month]
 2198  BE 2B52 R			mov	si, offset txt_inode_mmonth
 219B  B1 02				mov	cl, 2
 219D  E8 FB11				call	proc_bin_to_decimal
 21A0  A1 27E6 R			mov	ax, word ptr [day]
 21A3  BE 2B4F R			mov	si, offset txt_inode_mday
 21A6  B1 02				mov	cl, 2
 21A8  E8 FB06				call	proc_bin_to_decimal
 21AB  A1 27E8 R			mov	ax, word ptr [hour]
 21AE  BE 2B5A R			mov	si, offset txt_inode_mhour
 21B1  B1 02				mov	cl, 2
 21B3  E8 FAFB				call	proc_bin_to_decimal
 21B6  A1 27EA R			mov	ax, word ptr [minute]
 21B9  BE 2B5D R			mov	si, offset txt_inode_mminute
 21BC  B1 02				mov	cl, 2
 21BE  E8 FAF0				call	proc_bin_to_decimal
 21C1  A1 27EC R			mov	ax, word ptr [second]
 21C4  BE 2B60 R			mov	si, offset txt_inode_msecond
 21C7  B1 02				mov	cl, 2
 21C9  E8 FAE5				call	proc_bin_to_decimal
 21CC  BE 27AC R			mov	si, offset inode_ctim
 21CF  8B 04				mov	ax, word ptr [si]
 21D1  8B 54 02				mov	dx, word ptr [si+2]
 21D4  52				push	dx
 21D5  50				push	ax
 21D6  52				push	dx
 21D7  E8 FE05				call	proc_hex_double
 21DA  A3 2B79 R			mov	word ptr [txt_inode_ctim_h+4], ax	
 21DD  89 16 2B7B R			mov	word ptr [txt_inode_ctim_h+6], dx
 21E1  58				pop	ax
 21E2  E8 FDFA				call	proc_hex_double
 21E5  A3 2B75 R			mov	word ptr [txt_inode_ctim_h], ax	
 21E8  89 16 2B77 R			mov	word ptr [txt_inode_ctim_h+2], dx
 21EC  58				pop	ax
 21ED  5A				pop	dx
 21EE  E8 F727				call	convert_from_epoch
 21F1  A1 27E2 R			mov	ax, word ptr [year]
 21F4  BE 2B87 R			mov	si, offset txt_inode_cyear
					;mov	cx, 4
 21F7  B1 04				mov	cl, 4
 21F9  E8 FAB5				call	proc_bin_to_decimal
 21FC  A1 27E4 R			mov	ax, word ptr [month]
 21FF  BE 2B84 R			mov	si, offset txt_inode_cmonth
 2202  B1 02				mov	cl, 2
 2204  E8 FAAA				call	proc_bin_to_decimal
 2207  A1 27E6 R			mov	ax, word ptr [day]
 220A  BE 2B81 R			mov	si, offset txt_inode_cday
 220D  B1 02				mov	cl, 2
 220F  E8 FA9F				call	proc_bin_to_decimal
 2212  A1 27E8 R			mov	ax, word ptr [hour]
 2215  BE 2B8C R			mov	si, offset txt_inode_chour
 2218  B1 02				mov	cl, 2
 221A  E8 FA94				call	proc_bin_to_decimal
 221D  A1 27EA R			mov	ax, word ptr [minute]
 2220  BE 2B8F R			mov	si, offset txt_inode_cminute
 2223  B1 02				mov	cl, 2
 2225  E8 FA89				call	proc_bin_to_decimal
 2228  A1 27EC R			mov	ax, word ptr [second]
 222B  BE 2B92 R			mov	si, offset txt_inode_csecond
 222E  B1 02				mov	cl, 2
 2230  E8 FA7E				call	proc_bin_to_decimal
 2233				@@:
 2233  BE 29CC R			mov	si, offset msg_inode_details	
 2236  E8 E08B				call	PRINT_MSG

					; 25/09/2019 - Retro UNIX 386 v2 (device inodes)
 2239  F6 06 2771 R 80			test	byte ptr [inode_flgs+1],80h
 223E  75 13				jnz	short @f
					
					; write device's major and minor number
 2240  A1 277C R		        mov	ax, word ptr [inode_dskp]
 2243  E8 FD99				call	proc_hex_double
 2246  A3 2BB1 R			mov	word ptr [txt_major], ax
 2249  89 16 2BC5 R			mov	word ptr [txt_minor], dx
 224D  BE 2B98 R			mov	si, offset txt_device
					;call	PRINT_MSG
 2250  E9 E071				jmp	PRINT_MSG	
 2253				@@:
 2253  C3				retn

 2254				show_inode endp

				; 22/01/2020
				;PhysicalDriveNumber: db 0
				;FileHandle: dw 0

				; 04/12/2015 (Retro UNIX 8086 v1 -> Retro UNIX 386 v1)

				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				;  messages
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 2254				UNIX_Welcome:
 2254  0D 0A				db 0Dh,0Ah
 2256  52 65 74 72 6F 20		db 'Retro UNIX 386 v2 FS File Import/Export Utility (for 1.44MB floppy disks)'
       55 4E 49 58 20 33
       38 36 20 76 32 20
       46 53 20 46 69 6C
       65 20 49 6D 70 6F
       72 74 2F 45 78 70
       6F 72 74 20 55 74
       69 6C 69 74 79 20
       28 66 6F 72 20 31
       2E 34 34 4D 42 20
       66 6C 6F 70 70 79
       20 64 69 73 6B 73
       29
 229F  0D 0A				db 0Dh,0Ah
 22A1  55 4E 49 58 43 4F		db 'UNIXCOPY by Erdogan TAN 2012 - [15/04/2022]'
       50 59 20 62 79 20
       45 72 64 6F 67 61
       6E 20 54 41 4E 20
       32 30 31 32 20 2D
       20 5B 31 35 2F 30
       34 2F 32 30 32 32
       5D
 22CC  0D 0A 00				db 0Dh,0Ah,0
 22CF				type_27h: ; 25/09/2019
 22CF  28 54 79 70 65 20		db '(Type ', 27h,'?',27h,' to see valid commands)'
       27 3F 27 20 74 6F
       20 73 65 65 20 76
       61 6C 69 64 20 63
       6F 6D 6D 61 6E 64
       73 29
 22EF  0D 0A				db 0Dh,0Ah
 22F1  0D 0A 00				db 0Dh,0Ah,0
 22F4				usage:
 22F4  0D 0A				db 0Dh,0Ah ; 25/09/2019
 22F6  55 73 61 67 65 3A		db 'Usage: unixcopy [Floppy Drive] ', 0Dh,0Ah
       20 75 6E 69 78 63
       6F 70 79 20 5B 46
       6C 6F 70 70 79 20
       44 72 69 76 65 5D
       20 0D 0A
 2317  20 20 20 20 20 20		db '       unixcopy -i [floppy disk image file name] '
       20 75 6E 69 78 63
       6F 70 79 20 2D 69
       20 5B 66 6C 6F 70
       70 79 20 64 69 73
       6B 20 69 6D 61 67
       65 20 66 69 6C 65
       20 6E 61 6D 65 5D
       20
 2348  0D 0A				db 0Dh,0Ah
 234A  0D 0A				db 0Dh,0Ah
 234C  46 6C 6F 70 70 79		db "Floppy Drive names:"
       20 44 72 69 76 65
       20 6E 61 6D 65 73
       3A
 235F  0D 0A				db 0Dh,0Ah
 2361  0D 0A				db 0Dh,0Ah
 2363  66 64 30 20 20 20		db "fd0    (Floppy Disk 1, A:)", 0Dh, 0Ah
       20 28 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 31 2C 20 41
       3A 29 0D 0A
 237F  66 64 31 20 20 20		db "fd1    (Floppy Disk 2, B:)", 0Dh, 0Ah
       20 28 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 32 2C 20 42
       3A 29 0D 0A
 239B  2E 2E 2E 0D 0A			db "...", 0Dh, 0Ah
 23A0  41 3A 20 20 20 20		db "A:     (Floppy Disk 1)", 0Dh,0Ah
       20 28 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 31 29 0D 0A
 23B8  42 3A 20 20 20 20		db "B:     (Floppy Disk 2)", 0Dh,0Ah
       20 28 46 6C 6F 70
       70 79 20 44 69 73
       6B 20 32 29 0D 0A
 23D0  0D 0A			      	db 0Dh,0Ah
 23D2  46 6C 6F 70 70 79		db "Floppy Disk Image File name examples:"
       20 44 69 73 6B 20
       49 6D 61 67 65 20
       46 69 6C 65 20 6E
       61 6D 65 20 65 78
       61 6D 70 6C 65 73
       3A
 23F7  0D 0A				db 0Dh,0Ah
 23F9  0D 0A				db 0Dh,0Ah
 23FB  66 64 30 2E 69 6D		db "fd0.img", 0Dh, 0Ah
       67 0D 0A
 2404  66 64 31 2E 69 6D		db "fd1.img", 0Dh, 0Ah
       67 0D 0A
 240D  72 75 6E 69 78 66		db "runixfd.img", 0Dh, 0Ah
       64 2E 69 6D 67 0D
       0A
 241A  00				db 0
 241B				unix_cdrv:
 241B				UNIX_FD_Name:
 241B  66 64				db 'fd'
 241D				UNIX_FD_Number:
 241D  30 3A 00				db '0:', 0
 2420				unix_img_cdir:
 2420  21				db '!'  ; 07/07/2015
 2421				unix_cdir:
 2421  2F				db '/'
 2422  0025 [				db 37 dup(0)
        00
       ]

 2447				CDirOffset:
 2447  0000				dw 0

 2449				unix_prompt_char:
 2449  3E				db '>'

 244A				CursorColumn:
 244A  0000				dw 0

 244C				CommandBuffer:
 244C  004A [				db 74 dup(0)
        00
       ]

 2496				program_exit:
 2496  00				db 0

 2497 0000			pdir:	dw 0 

 2499				msg_arg:
 2499  0D 0A				db 0Dh, 0Ah ; 13/01/2012 (chmod)
 249B 0000			arg: 	dw 0
 249D  0000				dw 0 ; 13/01/2012  ; 01/10/2019

 249F				msg_yes_no:
 249F  28 59 65 73 2F 4E		db '(Yes/No)? ', 0
       6F 29 3F 20 00

 24AA				msg_unix_drv_read_error:
 24AA  0D 0A				db 0Dh, 0Ah
 24AC  44 72 69 76 65 20		db "Drive not ready or read error!"
       6E 6F 74 20 72 65
       61 64 79 20 6F 72
       20 72 65 61 64 20
       65 72 72 6F 72 21
 24CA  0D 0A 00				db 0Dh, 0Ah, 0

 24CD				msg_inv_file_name: ; 07/07/2015
 24CD  0D 0A				db 0dh, 0Ah
 24CF  49 6E 76 61 6C 69		db "Invalid file name !", 0Dh, 0Ah
       64 20 66 69 6C 65
       20 6E 61 6D 65 20
       21 0D 0A
 24E4  28 46 69 6C 65 20		db "(File name must fit for 8.3 DOS format) !"
       6E 61 6D 65 20 6D
       75 73 74 20 66 69
       74 20 66 6F 72 20
       38 2E 33 20 44 4F
       53 20 66 6F 72 6D
       61 74 29 20 21
 250D  0D 0A 00				db 0Dh, 0Ah, 0  

 2510				msg_file_not_found: ; 07/07/2015
 2510  0D 0A				db 0Dh, 0Ah
 2512  46 69 6C 65 20 6E		db "File not found !", 0Dh, 0Ah
       6F 74 20 66 6F 75
       6E 64 20 21 0D 0A
 2524  28 46 69 6C 65 20		db "(File must be in current directory) !"
       6D 75 73 74 20 62
       65 20 69 6E 20 63
       75 72 72 65 6E 74
       20 64 69 72 65 63
       74 6F 72 79 29 20
       21
 2549  0D 0A 00				db 0Dh, 0Ah, 0

 254C				msg_inv_image_file: ; 07/07/2015
 254C  0D 0A				db 0Dh, 0Ah
 254E  49 6E 76 61 6C 69		db "Invalid floppy disk image file !", 0Dh, 0Ah
       64 20 66 6C 6F 70
       70 79 20 64 69 73
       6B 20 69 6D 61 67
       65 20 66 69 6C 65
       20 21 0D 0A
 2570  28 46 69 6C 65 20		db "(File size must be 1474560 bytes) !"
       73 69 7A 65 20 6D
       75 73 74 20 62 65
       20 31 34 37 34 35
       36 30 20 62 79 74
       65 73 29 20 21
 2593  0D 0A 00				db 0Dh, 0Ah, 0

 2596				Msg_Not_Unix_FS:
 2596  0D 0A				db 0Dh, 0Ah
 2598  44 72 69 76 65 20		db "Drive has not got a Retro UNIX v2 FS !"
       68 61 73 20 6E 6F
       74 20 67 6F 74 20
       61 20 52 65 74 72
       6F 20 55 4E 49 58
       20 76 32 20 46 53
       20 21
 25BE  0D 0A 00				db 0Dh, 0Ah, 0

 25C1				Msg_writing_file:
 25C1  0D 0A				db 0Dh, 0Ah
 25C3  57 72 69 74 69 6E		db "Writing file..."
       67 20 66 69 6C 65
       2E 2E 2E
 25D2  00				db 0

 25D3				Msg_Removing_file:
 25D3  0D 0A				db 0Dh, 0Ah
 25D5  44 65 6C 65 74 69		db "Deleting file..."
       6E 67 20 66 69 6C
       65 2E 2E 2E
 25E5  00				db 0

 25E6				Msg_DosFile_Name:
 25E6  0D 0A				db 0Dh, 0Ah
 25E8  44 4F 53 20 46 69		db "DOS File Name : ", 0
       6C 65 20 4E 61 6D
       65 20 3A 20 00

 25F9				Msg_StartupFile_Name:
 25F9  0D 0A				db 0Dh, 0Ah
 25FB  53 74 61 72 74 75		db "Startup File Name : ", 0
       70 20 46 69 6C 65
       20 4E 61 6D 65 20
       3A 20 00

 2610				Msg_3dot_OK:
 2610  2E 2E 2E				db "..."
 2613				Msg_OK:
 2613  20 4F 4B 2E 0D 0A		db ' OK.', 0Dh, 0Ah, 0
       00

 261A				msg_YES:
 261A  20 59 45 53			db ' YES'
 261E  00				db 0
 261F				msg_NO:
 261F  20 4E 4F				db ' NO'
 2622  00				db 0   
 2623				error_msg:
 2623  0D 0A				db 0Dh, 0Ah
 2625  45 72 72 6F 72 20		db 'Error !'
       21
 262C				UNIX_CRLF:
 262C  0D 0A 00				db 0Dh, 0Ah, 0

 262F				msg_making_directory:
 262F  0D 0A				db 0Dh, 0Ah
 2631  4D 61 6B 69 6E 67		db "Making directory..."
       20 64 69 72 65 63
       74 6F 72 79 2E 2E
       2E
 2644  00				db 0

 2645				msg_removing_directory:
 2645  0D 0A				db 0Dh, 0Ah
 2647  52 65 6D 6F 76 69		db "Removing directory..."
       6E 67 20 64 69 72
       65 63 74 6F 72 79
       2E 2E 2E
 265C  00				db 0

 265D				msg_unix_drv_write_error:
 265D  0D 0A				db 0Dh, 0Ah
 265F  44 72 69 76 65 20		db 'Drive not ready or write error!'
       6E 6F 74 20 72 65
       61 64 79 20 6F 72
       20 77 72 69 74 65
       20 65 72 72 6F 72
       21
 267E  0D 0A				db 0Dh, 0Ah
 2680  00				db 0
 2681				msg_Startup_File_Not_Exists:
 2681  0D 0A				db 0Dh, 0Ah
 2683  53 74 61 72 74 75		db 'Startup File is not configured yet ! '
       70 20 46 69 6C 65
       20 69 73 20 6E 6F
       74 20 63 6F 6E 66
       69 67 75 72 65 64
       20 79 65 74 20 21
       20
 26A8  0D 0A 00				db 0Dh, 0Ah, 0 

 26AB				msg_sf_configuration_set_ok:
 26AB  0D 0A				db 0Dh, 0Ah
 26AD  53 74 61 72 74 75		db "Startup file configuration SET is OK."
       70 20 66 69 6C 65
       20 63 6F 6E 66 69
       67 75 72 61 74 69
       6F 6E 20 53 45 54
       20 69 73 20 4F 4B
       2E
 26D2  0D 0A 00				db 0Dh, 0Ah, 0

 26D5				msg_sf_configuration_reset_ok:
 26D5  0D 0A				db 0Dh, 0Ah
 26D7  53 74 61 72 74 75		db "Startup file configuration RESET is OK."
       70 20 66 69 6C 65
       20 63 6F 6E 66 69
       67 75 72 61 74 69
       6F 6E 20 52 45 53
       45 54 20 69 73 20
       4F 4B 2E
 26FE  0D 0A 00				db 0Dh, 0Ah, 0

 2701				msg_overwrite_question1:
					; 1/12/2012
 2701  0D 0A				db 0Dh, 0Ah
 2703  44 6F 20 79 6F 75		db 'Do you want to overwrite '
       20 77 61 6E 74 20
       74 6F 20 6F 76 65
       72 77 72 69 74 65
       20
 271C  27				db 27h
 271D  00				db 0

 271E				msg_overwrite_question2: 
 271E  27				db 27h
 271F  20 66 69 6C 65 20		db ' file '
 2725  00				db 0	

 2726				msg_remove_question1:
					; 1/12/2012
 2726  0D 0A				db 0Dh, 0Ah
 2728  44 6F 20 79 6F 75		db 'Do you want to delete '
       20 77 61 6E 74 20
       74 6F 20 64 65 6C
       65 74 65 20
 273E  27				db 27h
 273F  00				db 0

 2740				msg_remove_question2: 
 2740  27				db 27h
 2741  20 66 69 6C 65 20		db ' file '
 2747  00				db 0
				align 2

 2748				RetryCount:
 2748  0000				dw 0

				; 07/07/2015
 274A				img_file_name:
 274A  000D [				db 13 dup(0)
        00
       ]
 2757  00				db 0
 2758				img_file_handle:
 2758  0000				dw 0
				;img_file_pos:
				;	dd 0 ; file (position) pointer
				;
 275A				DirFileName:
 275A  20				db 20h ; 06/01/2013
 275B  000E [			BOOT_FILE_NAME: db 14 dup(0) ; 04/12/2015 (9 -> 14+'?')
        00
       ]
 2769  3F				db '?' ; Here will be ZERO if name length is 14
					       ; (ci_move_bfn_3:)

 276A 00000000			uf_make_datetime: dd 0 ; 25/11/2012

 276E 0000			uf_i_number:	dw 0 ; 25/11/2012

				; 19/09/2019 - Retro UNIX 386 v2 inode format 
				;		(modified unix v7 inode format)
 2770				bootfile_inode: 
 2770				inode:
 2770 81B4			inode_flgs:	dw 81B4h ; Flags (1000000110110100b) (81B4h for UNIX v7)
 2772 0001			inode_nlks:	dw 1	; number of links 
 2774 0003			inode_uid:	dw 3	; user ID (3 = bin)
 2776 03			inode_gid:	db 3	; group ID (3 = bin)
 2777 00			inode_size_h:	db 0    ; file size bits 33-40 (=0)
 2778 00000000			inode_size:	dd 0	; file size
 277C  000A [			inode_dskp:	dd 10 dup (0) ; indirect or direct contents blocks
        00000000
       ]
 27A4 00000000			inode_atim:	dd 0	; lass access -inode modif.- date & time
 27A8 00000000			inode_mtim:	dd 0	; (file) modification date & time
 27AC 00000000			inode_ctim:	dd 0	; (file) creation date & time

				; 20/01/2020
 27B0 00			index:	db 0 ; disk sector/block address index (in indirect block)

 27B1 00			rw:	db 0

				; 20/09/2019
				; NOTE: word ptr [imod] is used to check inode modification in iget 

 27B2 00			imod:	db 0
 27B3 00			imodx:	db 0 ; 19/09/2019 - Retro UNIX 386 v2 
				;	     (extended flag for inode modification)	

				; 20/01/2020
 27B4 00			I_rw:	db 0 ; inode table read (0) or write (1)	
 27B5				I_valid:
 27B5  00				db 0 ; inode table buffer is valid (1) or not (0)
 27B6				I_sector:
 27B6  0000				dw 0 ; inode table sector index/offset

 27B8				U:
 27B8 00			u_uid:	db 0
 27B9 00			u_gid:	db 0 ; 19/09/2019 - Retro UNIX 386 v2
 27BA 0001			u_cdir: dw ROOT_DIR_INODE_NUMBER
 27BC				u_namep:
 27BC  0000				dw 0
 27BE 0000			u_dirp: dw 0  ; 16 bit for (retro unix bootable) flopppy disks 	
					;dw 0 ; 32 bit for hard disks (retro unix partitions)
 27C0 0000			u_base: dw 0
 27C2 0000			u_off:	dw 0
 27C4  0000				dw 0 ; 20/01/2020 (32 bit file pointer/offset)
 27C6				u_count:
 27C6  0000				dw 0
 27C8				u_nread:
 27C8  0000				dw 0
 27CA				u_dirbuf:
 27CA  0010 [				db 16 dup(0) ; 04/12/2015 (10 -> 16)
        00
       ]
 27DA 0000			ii:	dw 0

				; 22/01/2020
 27DC				FileHandle:
 27DC  0000				dw 0
				; 22/01/2020
 27DE				buff_d:
 27DE				PhysicalDriveNumber:
 27DE  00				db 0
 27DF				buff_m:
 27DF  00				db 0
 27E0 FFFF			buff_s: dw 0FFFFh  ; 16 bit for (retro unix bootable) flopppy disks	
					;dw 0FFFFh ; 32 bit for hard disks (retro unix partitions)

 27E2 07B2			year:	dw 1970
 27E4 0001			month:	dw 1
 27E6 0001			day:	dw 1
 27E8 0000			hour:	dw 0
 27EA 0000			minute:	dw 0
 27EC 0000			second:	dw 0

 27EE				DMonth:
 27EE  0000				dw 0
 27F0  001F				dw 31
 27F2  003B				dw 59
 27F4  005A				dw 90
 27F6  0078				dw 120
 27F8  0097				dw 151
 27FA  00B5				dw 181
 27FC  00D4				dw 212
 27FE  00F3				dw 243
 2800  0111				dw 273
 2802  0130				dw 304
 2804  014E				dw 334

				; 30/11/2012
				;imin:	dd 0
				;ihrs:	dd 0
				;iday:	dw 0
				;lday:	dw 0
				;qday:	dw 0
				;iyrs:	dw 0
				;jday:	dw 0
				;mday:	dw 0

				; 25/11/2012
 2806				str_inode_number:
 2806  0D 0A				db 0Dh, 0Ah
 2808  53 74 61 72 74 75		db 'Startup File I-Number: ', 0
       70 20 46 69 6C 65
       20 49 2D 4E 75 6D
       62 65 72 3A 20 00
 2820				Decimal_i_no_str:	
 2820  0006 [				db 6 dup (0)
        00
       ]

 2826				Str_startup_file_size:
 2826  0D 0A				db 0Dh, 0Ah
 2828  53 74 61 72 74 75		db 'Startup File Size : ', 0
       70 20 46 69 6C 65
       20 53 69 7A 65 20
       3A 20 00
 283D				Str_Bytes:
 283D  20 62 79 74 65 73		db ' bytes', 0
       00

 2844  0006 [			Decimal_size_str: db 6 dup (0)
        00
       ]

 284A				Str_sf_date_time:
 284A  0D 0A				db 0Dh, 0Ah
 284C  43 72 65 61 74 69		db 'Creating Date & Time    : '
       6E 67 20 44 61 74
       65 20 26 20 54 69
       6D 65 20 20 20 20
       3A 20
 2866				Str_cday:
 2866  30 30				db '00'
 2868  2F				db '/'
 2869				Str_cmonth:
 2869  30 30				db '00'
 286B  2F				db '/'
 286C				Str_cyear:
 286C  30 30 30 30			db '0000'
 2870  20 20				db 20h, 20h
 2872				Str_chour:
 2872  30 30				db '00'
 2874  3A				db ':'
 2875				Str_cminute:
 2875  30 30				db '00'
 2877  3A				db ':'
 2878				Str_csecond:
 2878  30 30				db '00'
 287A  0D 0A				db 0Dh, 0Ah
 287C  4C 61 73 74 20 4D		db 'Last Modif. Date & Time : '
       6F 64 69 66 2E 20
       44 61 74 65 20 26
       20 54 69 6D 65 20
       3A 20
 2896				Str_mday:
 2896  30 30				db '00'
 2898  2F				db '/'
 2899				Str_mmonth:
 2899  30 30				db '00'
 289B  2F				db '/'
 289C				Str_myear:
 289C  30 30 30 30			db '0000'
 28A0  20 20				db 20h, 20h
 28A2				Str_mhour:
 28A2  30 30				db '00'
 28A4  3A				db ':'
 28A5				Str_mminute:
 28A5  30 30				db '00'
 28A7  3A				db ':'
 28A8				Str_msecond:
 28A8  30 30				db '00'
 28AA  0D 0A				db 0Dh, 0Ah
 28AC  4D 6F 64 65 20 43		db 'Mode Change Date & Time : '
       68 61 6E 67 65 20
       44 61 74 65 20 26
       20 54 69 6D 65 20
       3A 20
 28C6				Str_aday:
 28C6  30 30				db '00'
 28C8  2F				db '/'
 28C9				Str_amonth:
 28C9  30 30				db '00'
 28CB  2F				db '/'
 28CC				Str_ayear:
 28CC  30 30 30 30			db '0000'
 28D0  20 20				db 20h, 20h
 28D2				Str_ahour:
 28D2  30 30				db '00'
 28D4  3A				db ':'
 28D5				Str_aminute:
 28D5  30 30				db '00'
 28D7  3A				db ':'
 28D8				Str_asecond:
 28D8  30 30			  	db '00'
 28DA  0D 0A 00				db 0Dh, 0Ah, 0

				;23/02/2013
 28DD				list_count:
 28DD  FF				db 0FFh
				; 20/01/2013
 28DE				ls_option:
 28DE  00				db 0
				; 21/01/2013
				;dec_num:
				;	db 10 dup(20h) ; 03/02/2013, 3 bytes -> 10 bytes
				;	db 0
				; 22/01/2020
 28DF				dec_num: 
 28DF  000B [				db 11 dup(20h)
        20
       ]
 28EA  00				db 0
				; 21/01/2020
 28EB 00			Error:	db 0 ; Disk r/w error code

				;30/12/2012
 28EC 2E			DotDot: db '.'
 28ED 2E			Dot:	db '.'
 28EE  00				db 0

				; 22/01/2020
 28EF 00			bmod:	db 0 ; boot sector (bs_bf_inode_num) modified flag
					
				;24/09/2019
				;16/02/2013
 28F0				msgVolume_Info:
 28F0  0D 0A				db 0Dh, 0Ah
 28F2  52 65 74 72 6F 20		db "Retro UNIX 386 v2 (RUFS) File System", 0Dh, 0Ah
       55 4E 49 58 20 33
       38 36 20 76 32 20
       28 52 55 46 53 29
       20 46 69 6C 65 20
       53 79 73 74 65 6D
       0D 0A
 2918  62 79 20 45 72 64		db "by Erdogan Tan (2013-2022)"
       6F 67 61 6E 20 54
       61 6E 20 28 32 30
       31 33 2D 32 30 32
       32 29
 2932  0D 0A 0D 0A			db 0Dh, 0Ah, 0Dh, 0Ah
 2936  56 6F 6C 75 6D 65		db "Volume Serial No: "
       20 53 65 72 69 61
       6C 20 4E 6F 3A 20
 2948				msgVolume_Serial:
 2948  30 30 30 30 2D 30		db "0000-0000h"
       30 30 30 68
 2952  0D 0A 00				db 0Dh, 0Ah, 0
 2955				msgVol_Size_Hdr:
 2955  56 6F 6C 75 6D 65		db "Volume Size : ", 0
       20 53 69 7A 65 20
       3A 20 00
 2964				msgVolume_Size:
					;db "0000" 
 2964  20 62 6C 6F 63 6B		db " blocks", 0Dh, 0Ah, 0
       73 0D 0A 00
 296E				msgVol_freeblocks_Hdr:
 296E  46 72 65 65 20 43		db "Free Count  : ", 0
       6F 75 6E 74 20 20
       3A 20 00
 297D				msgVolume_freeblocks:
					;db "0000" 
 297D  20 62 6C 6F 63 6B		db " blocks", 0Dh, 0Ah, 0	
       73 0D 0A 00
 2987				msgVol_icount_Hdr:
 2987  23 20 6F 66 20 49		db "# of Inodes : ", 0
       6E 6F 64 65 73 20
       3A 20 00
 2996				msgVolume_icount:
					;db "0000" 
 2996  0D 0A 00				db 0Dh, 0Ah, 0
 2999				msgVol_free_icount_Hdr:
 2999  46 72 65 65 20 49		db 'Free Inodes : ', 0
       6E 6F 64 65 73 20
       3A 20 00
 29A8				msgVolume_free_icount:
					;db "0000" 
 29A8  0D 0A 00				db 0Dh, 0Ah, 0

 29AB				NotFound_msg:
 29AB  0D 0A				db 0Dh, 0Ah
 29AD  4E 6F 74 20 66 6F		db "Not found !"
       75 6E 64 20 21
 29B8  0D 0A 00				db 0Dh, 0Ah, 0
 29BB				msgINumber:
 29BB  0D 0A				db 0Dh, 0Ah
 29BD  49 6E 6F 64 65 20		db "Inode Number :", 0
       4E 75 6D 62 65 72
       20 3A 00

				; 21/09/2019
 29CC				msg_inode_details:
 29CC  0D 0A				db 0Dh, 0Ah
 29CE  52 45 54 52 4F 20		db "RETRO UNIX V2 I-NODE STRUCTURE DETAILS OF I-NODE "
       55 4E 49 58 20 56
       32 20 49 2D 4E 4F
       44 45 20 53 54 52
       55 43 54 55 52 45
       20 44 45 54 41 49
       4C 53 20 4F 46 20
       49 2D 4E 4F 44 45
       20
 29FF				txt_inode_number:
 29FF  30 30 30 30 68			db "0000h"
 2A04  0D 0A 0D 0A			db 0Dh, 0Ah, 0Dh, 0Ah
 2A08  46 6C 61 67 73 20		db "Flags : "
       3A 20
 2A10				txt_inode_flags_h:
 2A10  30 30 30 30 68			db "0000h"
 2A15  20				db 20h
 2A16  5B				db "["
 2A17				txt_inode_flags_b:
 2A17  30 30 30 30 30 30		db "0000000000000000b"
       30 30 30 30 30 30
       30 30 30 30 62
 2A28  5D				db "]"
 2A29  0D 0A				db 0Dh, 0Ah
 2A2B  23 20 6F 66 20 4C		db "# of Links : "
       69 6E 6B 73 20 3A
       20
 2A38				txt_inode_nlks:
 2A38  30 30 30 30 68			db "0000h"
 2A3D  0D 0A				db 0Dh, 0Ah
 2A3F  55 73 65 72 20 49		db "User ID : "
       44 20 3A 20
 2A49				txt_inode_uid:
 2A49  30 30 30 30 68			db "0000h"
 2A4E  0D 0A				db 0Dh, 0Ah
 2A50  47 72 6F 75 70 20		db "Group ID : "
       49 44 20 3A 20
 2A5B				txt_inode_gid:
 2A5B  30 30 68				db "00h"
 2A5E  0D 0A				db 0Dh, 0Ah
 2A60  53 69 7A 65 20 68		db "Size hb : "
       62 20 3A 20
 2A6A				txt_inode_size_h:
 2A6A  30 30 68				db "00h"
 2A6D  0D 0A				db 0Dh, 0Ah
 2A6F  53 69 7A 65 20 3A		db "Size : "
       20
 2A76				txt_inode_size:
 2A76  30 30 30 30 30 30		db "00000000h"
       30 30 68
 2A7F  0D 0A				db 0Dh, 0Ah
 2A81  44 69 73 6B 20 42		db "Disk Blocks : "
       6C 6F 63 6B 73 20
       3A 20
 2A8F  0D 0A				db 0Dh,0Ah ; 24/09/2019
 2A91				txt_inode_dskp:	
 2A91  30 30 30 30 30 30		db "00000000h 00000000h 00000000h 00000000h "
       30 30 68 20 30 30
       30 30 30 30 30 30
       68 20 30 30 30 30
       30 30 30 30 68 20
       30 30 30 30 30 30
       30 30 68 20
 2AB9  30 30 30 30 30 30		db "00000000h 00000000h 00000000h 00000000h"
       30 30 68 20 30 30
       30 30 30 30 30 30
       68 20 30 30 30 30
       30 30 30 30 68 20
       30 30 30 30 30 30
       30 30 68
 2AE0  0D 0A				db 0Dh,0Ah
 2AE2				txt_inode_dskp_i:
 2AE2  30 30 30 30 30 30		db "00000000h 00000000h"
       30 30 68 20 30 30
       30 30 30 30 30 30
       68
 2AF5  0D 0A				db 0Dh, 0Ah
 2AF7  49 6E 6F 64 65 20		db "Inode Changing Time : "
       43 68 61 6E 67 69
       6E 67 20 54 69 6D
       65 20 3A 20
 2B0D				txt_inode_atim_h:
 2B0D  30 30 30 30 30 30		db "00000000h"
       30 30 68
 2B16  20 20				db 20h, 20h
 2B18  5B				db "["
 2B19				txt_inode_aday:	
 2B19  30 30				db "00"
 2B1B  2F				db "/"
 2B1C				txt_inode_amonth:
 2B1C  30 30				db "00"
 2B1E  2F				db "/"
 2B1F				txt_inode_ayear:
 2B1F  30 30 30 30			db "0000"
 2B23  2C				db ","
 2B24				txt_inode_ahour:
 2B24  30 30				db "00"
 2B26  3A				db ":"
 2B27				txt_inode_aminute:
 2B27  30 30				db "00"
 2B29  3A				db ":"
 2B2A				txt_inode_asecond:	
 2B2A  30 30				db "00"
 2B2C  5D				db "]"
 2B2D  0D 0A				db 0Dh, 0Ah
 2B2F  4D 6F 64 69 66 69		db "Modification Time : "
       63 61 74 69 6F 6E
       20 54 69 6D 65 20
       3A 20
 2B43				txt_inode_mtim_h:
 2B43  30 30 30 30 30 30		db "00000000h"
       30 30 68
 2B4C  20 20				db 20h, 20h
 2B4E  5B				db "["
 2B4F				txt_inode_mday:	
 2B4F  30 30				db "00"
 2B51  2F				db "/"
 2B52				txt_inode_mmonth:
 2B52  30 30				db "00"
 2B54  2F				db "/"
 2B55				txt_inode_myear:
 2B55  30 30 30 30			db "0000"
 2B59  2C				db ","
 2B5A				txt_inode_mhour:
 2B5A  30 30				db "00"
 2B5C  3A				db ":"
 2B5D				txt_inode_mminute:
 2B5D  30 30				db "00"
 2B5F  3A				db ":"
 2B60				txt_inode_msecond:	
 2B60  30 30				db "00"
 2B62  5D				db "]"
 2B63  0D 0A				db 0Dh, 0Ah
 2B65  43 72 65 61 74 69		db "Creation Time : "
       6F 6E 20 54 69 6D
       65 20 3A 20
 2B75				txt_inode_ctim_h:
 2B75  30 30 30 30 30 30		db "00000000h"
       30 30 68
 2B7E  20 20				db 20h, 20h
 2B80  5B				db "["
 2B81				txt_inode_cday:
 2B81  30 30				db "00"
 2B83  2F				db "/"
 2B84				txt_inode_cmonth:
 2B84  30 30				db "00"
 2B86  2F				db "/"
 2B87				txt_inode_cyear:
 2B87  30 30 30 30			db "0000"
 2B8B  2C				db ","
 2B8C				txt_inode_chour:
 2B8C  30 30				db "00"
 2B8E  3A				db ":"
 2B8F				txt_inode_cminute:
 2B8F  30 30				db "00"
 2B91  3A				db ":"
 2B92				txt_inode_csecond:	
 2B92  30 30				db "00"
 2B94  5D				db "]"
 2B95  0D 0A 00				db 0Dh, 0Ah, 0
				; 25/09/2019
 2B98				txt_device: 
 2B98  0D 0A				db 0Dh,0Ah	
 2B9A  44 45 56 49 43 45		db "DEVICE", 0Dh,0Ah 
       0D 0A
 2BA2  4D 61 6A 6F 72 20		db "Major Number : " 	
       4E 75 6D 62 65 72
       20 3A 20
 2BB1				txt_major:
 2BB1  30 30 68 0D 0A			db "00h", 0Dh,0Ah
 2BB6  4D 69 6E 6F 72 20		db "Minor Number : "
       4E 75 6D 62 65 72
       20 3A 20
 2BC5				txt_minor:
 2BC5  30 30 68 0D 0A 00		db "00h", 0Dh,0Ah, 0

 2BCB				UNIXCOPY_Commands: ; 23/02/2013
 2BCB  0D 0A			db 0Dh, 0Ah
 2BCD  55 4E 49 58 43 4F	db "UNIXCOPY COMMANDS      [", 27h, "/", 27h, " means alternative, ",  27h, "<...>", 27h, " means command argument]", 0Dh, 0Ah
       50 59 20 43 4F 4D
       4D 41 4E 44 53 20
       20 20 20 20 20 5B
       27 2F 27 20 6D 65
       61 6E 73 20 61 6C
       74 65 72 6E 61 74
       69 76 65 2C 20 27
       3C 2E 2E 2E 3E 27
       20 6D 65 61 6E 73
       20 63 6F 6D 6D 61
       6E 64 20 61 72 67
       75 6D 65 6E 74 5D
       0D 0A
 2C1D  64 69 72 20 3C 64	db "dir <directory name>   : print directory entries without details", 0Dh, 0Ah 
       69 72 65 63 74 6F
       72 79 20 6E 61 6D
       65 3E 20 20 20 3A
       20 70 72 69 6E 74
       20 64 69 72 65 63
       74 6F 72 79 20 65
       6E 74 72 69 65 73
       20 77 69 74 68 6F
       75 74 20 64 65 74
       61 69 6C 73 0D 0A
 2C5F  6C 73 20 3C 64 69	db "ls <directory name>    : print directory entries, ", 27h, "/",  27h," means entry is directory", 0Dh, 0Ah
       72 65 63 74 6F 72
       79 20 6E 61 6D 65
       3E 20 20 20 20 3A
       20 70 72 69 6E 74
       20 64 69 72 65 63
       74 6F 72 79 20 65
       6E 74 72 69 65 73
       2C 20 27 2F 27 20
       6D 65 61 6E 73 20
       65 6E 74 72 79 20
       69 73 20 64 69 72
       65 63 74 6F 72 79
       0D 0A
 2CAF  6C 73 20 2D 6C 20	db "ls -l <directory name> : print directory entries with details", 0Dh, 0Ah
       3C 64 69 72 65 63
       74 6F 72 79 20 6E
       61 6D 65 3E 20 3A
       20 70 72 69 6E 74
       20 64 69 72 65 63
       74 6F 72 79 20 65
       6E 74 72 69 65 73
       20 77 69 74 68 20
       64 65 74 61 69 6C
       73 0D 0A
 2CEE  63 68 64 69 72 2F	db "chdir/cd <directory name> : change directory", 0Dh, 0Ah
       63 64 20 3C 64 69
       72 65 63 74 6F 72
       79 20 6E 61 6D 65
       3E 20 3A 20 63 68
       61 6E 67 65 20 64
       69 72 65 63 74 6F
       72 79 0D 0A
 2D1C  66 72 6F 6D 64 6F	db "fromdos <dos file name> <unix file name> : copy/import dos file to unix fs", 0Dh, 0Ah
       73 20 3C 64 6F 73
       20 66 69 6C 65 20
       6E 61 6D 65 3E 20
       3C 75 6E 69 78 20
       66 69 6C 65 20 6E
       61 6D 65 3E 20 3A
       20 63 6F 70 79 2F
       69 6D 70 6F 72 74
       20 64 6F 73 20 66
       69 6C 65 20 74 6F
       20 75 6E 69 78 20
       66 73 0D 0A
 2D68  74 6F 64 6F 73 20	db "todos <unix file name> <dos file name>   : copy/export unix file to dos fs", 0Dh, 0Ah  
       3C 75 6E 69 78 20
       66 69 6C 65 20 6E
       61 6D 65 3E 20 3C
       64 6F 73 20 66 69
       6C 65 20 6E 61 6D
       65 3E 20 20 20 3A
       20 63 6F 70 79 2F
       65 78 70 6F 72 74
       20 75 6E 69 78 20
       66 69 6C 65 20 74
       6F 20 64 6F 73 20
       66 73 0D 0A
 2DB4  72 6D 20 3C 66 69	db "rm <file name>         : remove/delete/unlink file", 0Dh, 0Ah 
       6C 65 20 6E 61 6D
       65 3E 20 20 20 20
       20 20 20 20 20 3A
       20 72 65 6D 6F 76
       65 2F 64 65 6C 65
       74 65 2F 75 6E 6C
       69 6E 6B 20 66 69
       6C 65 0D 0A
 2DE8  6D 6B 64 69 72 20	db "mkdir <directory name> : make new sub directory", 0Dh, 0Ah
       3C 64 69 72 65 63
       74 6F 72 79 20 6E
       61 6D 65 3E 20 3A
       20 6D 61 6B 65 20
       6E 65 77 20 73 75
       62 20 64 69 72 65
       63 74 6F 72 79 0D
       0A
 2E19  72 6D 64 69 72 20	db "rmdir <directory name> : remove/delete sub directory", 0Dh, 0Ah
       3C 64 69 72 65 63
       74 6F 72 79 20 6E
       61 6D 65 3E 20 3A
       20 72 65 6D 6F 76
       65 2F 64 65 6C 65
       74 65 20 73 75 62
       20 64 69 72 65 63
       74 6F 72 79 0D 0A
 2E4F  6C 69 6E 6B 20 3C	db "link <source file name> <destination file name> : link file to file", 0Dh, 0Ah 
       73 6F 75 72 63 65
       20 66 69 6C 65 20
       6E 61 6D 65 3E 20
       3C 64 65 73 74 69
       6E 61 74 69 6F 6E
       20 66 69 6C 65 20
       6E 61 6D 65 3E 20
       3A 20 6C 69 6E 6B
       20 66 69 6C 65 20
       74 6F 20 66 69 6C
       65 0D 0A
 2E94  65 78 69 74 20 20	db "exit                   : return to dos", 0Dh, 0Ah
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 3A
       20 72 65 74 75 72
       6E 20 74 6F 20 64
       6F 73 0D 0A
 2EBC  73 68 6F 77 20 3C	db "show <file name>       : show file, print/display file contents", 0Dh, 0Ah
       66 69 6C 65 20 6E
       61 6D 65 3E 20 20
       20 20 20 20 20 3A
       20 73 68 6F 77 20
       66 69 6C 65 2C 20
       70 72 69 6E 74 2F
       64 69 73 70 6C 61
       79 20 66 69 6C 65
       20 63 6F 6E 74 65
       6E 74 73 0D 0A
 2EFD  69 6E 6F 64 65 2F	db "inode/iget <inode number> : print inode details for (decimal) inode number", 0Dh, 0Ah
       69 67 65 74 20 3C
       69 6E 6F 64 65 20
       6E 75 6D 62 65 72
       3E 20 3A 20 70 72
       69 6E 74 20 69 6E
       6F 64 65 20 64 65
       74 61 69 6C 73 20
       66 6F 72 20 28 64
       65 63 69 6D 61 6C
       29 20 69 6E 6F 64
       65 20 6E 75 6D 62
       65 72 0D 0A
 2F49  63 68 6D 6F 64 20	db "chmod <mode> <file name>  : change file mode (according to octal number)", 0Dh, 0Ah
       3C 6D 6F 64 65 3E
       20 3C 66 69 6C 65
       20 6E 61 6D 65 3E
       20 20 3A 20 63 68
       61 6E 67 65 20 66
       69 6C 65 20 6D 6F
       64 65 20 28 61 63
       63 6F 72 64 69 6E
       67 20 74 6F 20 6F
       63 74 61 6C 20 6E
       75 6D 62 65 72 29
       0D 0A
 2F93  63 68 6F 77 6E 20	db "chown <owner> <file name> : change file's owner (according to decimal number)", 0Dh, 0Ah
       3C 6F 77 6E 65 72
       3E 20 3C 66 69 6C
       65 20 6E 61 6D 65
       3E 20 3A 20 63 68
       61 6E 67 65 20 66
       69 6C 65 27 73 20
       6F 77 6E 65 72 20
       28 61 63 63 6F 72
       64 69 6E 67 20 74
       6F 20 64 65 63 69
       6D 61 6C 20 6E 75
       6D 62 65 72 29 0D
       0A
 2FE2  63 68 67 72 70 20	db "chgrp <group> <file name> : change file's group (according to decimal number)", 0Dh, 0Ah  ; Retro UNIX 386 v2
       3C 67 72 6F 75 70
       3E 20 3C 66 69 6C
       65 20 6E 61 6D 65
       3E 20 3A 20 63 68
       61 6E 67 65 20 66
       69 6C 65 27 73 20
       67 72 6F 75 70 20
       28 61 63 63 6F 72
       64 69 6E 67 20 74
       6F 20 64 65 63 69
       6D 61 6C 20 6E 75
       6D 62 65 72 29 0D
       0A
 3031  6E 61 6D 65 69 20	db "namei <file name>      : return/print inode number of file (as decimal)", 0Dh, 0Ah 
       3C 66 69 6C 65 20
       6E 61 6D 65 3E 20
       20 20 20 20 20 3A
       20 72 65 74 75 72
       6E 2F 70 72 69 6E
       74 20 69 6E 6F 64
       65 20 6E 75 6D 62
       65 72 20 6F 66 20
       66 69 6C 65 20 28
       61 73 20 64 65 63
       69 6D 61 6C 29 0D
       0A
 307A  66 73 2F 76 6F 6C	db "fs/volume              : print (current) unix fs (super block) info", 0Dh, 0Ah
       75 6D 65 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 3A
       20 70 72 69 6E 74
       20 28 63 75 72 72
       65 6E 74 29 20 75
       6E 69 78 20 66 73
       20 28 73 75 70 65
       72 20 62 6C 6F 63
       6B 29 20 69 6E 66
       6F 0D 0A
 30BF  62 6F 6F 74 66 69	db "bootfile <file name>   : select/configure file as startup/boot file", 0Dh, 0Ah
       6C 65 20 3C 66 69
       6C 65 20 6E 61 6D
       65 3E 20 20 20 3A
       20 73 65 6C 65 63
       74 2F 63 6F 6E 66
       69 67 75 72 65 20
       66 69 6C 65 20 61
       73 20 73 74 61 72
       74 75 70 2F 62 6F
       6F 74 20 66 69 6C
       65 0D 0A
 3104  6E 6F 62 6F 6F 74	db "nobootfile             : reset/cancel bootfile configuration", 0Dh, 0Ah
       66 69 6C 65 20 20
       20 20 20 20 20 20
       20 20 20 20 20 3A
       20 72 65 73 65 74
       2F 63 61 6E 63 65
       6C 20 62 6F 6F 74
       66 69 6C 65 20 63
       6F 6E 66 69 67 75
       72 61 74 69 6F 6E
       0D 0A
 3142  3F 2F 68 65 6C 70	db "?/help                 : print/display UNIXCOPY commands summary (as above)", 0Dh, 0Ah, 0
       20 20 20 20 20 20
       20 20 20 20 20 20
       20 20 20 20 20 3A
       20 70 72 69 6E 74
       2F 64 69 73 70 6C
       61 79 20 55 4E 49
       58 43 4F 50 59 20
       63 6F 6D 6D 61 6E
       64 73 20 73 75 6D
       6D 61 72 79 20 28
       61 73 20 61 62 6F
       76 65 29 0D 0A 00

				align 16

				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				;  buffers
				;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 3190				boot_sector:
 3190  0200 [			BSBUFFER:	db 512 dup(0)
        00
       ]
				; superblock
 3390				super_block:
 3390  0200 [			systm:		db 512 dup(0)
        00
       ]

				; 22/01/2020
 3590				Buffer:
 3590  0200 [			sector_buffer:	db 512 dup(0) ; Masterboot sector & common buffer
        00
       ]

				; 20/01/2020
 3790  0200 [			I_buffer:	db 512 dup(0)	; Inode table sector buffer
        00
       ]

 3990  0200 [			ReadBuffer:     db 512 dup(0)
        00
       ]
 3B90  0200 [			WriteBuffer:    db 512 dup(0)
        00
       ]

				; 24/09/2019
 3D90  0200 [			im_buffer:	db 512 dup(0)	; Inode map sector buffer
        00
       ]
 3F90  0200 [			fbm_buffer:	db 512 dup(0)	; Free blocks map sector buffer
        00
       ]
 4190  0200 [			dbli_buffer:	db 512 dup(0)
        00
       ]
				; 22/01/2020 (triple indirect addressing is not applicable for 1.44MB floppy disks)
				;trpi_buffer:	db 512 dup(0)

 4390 = 0001432C		SizeOfFile      equ $-100
					
 4390				UNIXCOPY  ends

				          end  START_CODE
Microsoft (R) Macro Assembler Version 6.14.8444		    04/15/22 18:10:23
unixcopy.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

SuperBlock . . . . . . . . . . .	 0200
  sb_Header  . . . . . . . . . .	 0000	     DWord
  sb_BootSectAddr  . . . . . . .	 0004	     DWord
  sb_VolumeSize  . . . . . . . .	 0008	     DWord
  sb_Version . . . . . . . . . .	 000C	     DWord
  sb_BlockSize . . . . . . . . .	 0010	     DWord
  sb_InodeCount  . . . . . . . .	 0014	     DWord
  sb_FreeMapAddr . . . . . . . .	 0018	     DWord
  sb_FreeMapSize . . . . . . . .	 001C	     DWord
  sb_InodeMapAddr  . . . . . . .	 0020	     DWord
  sb_InodeMapSize  . . . . . . .	 0024	     DWord
  sb_InodeTblAddr  . . . . . . .	 0028	     DWord
  sb_InodeTblSize  . . . . . . .	 002C	     DWord
  sb_FreeInodes  . . . . . . . .	 0030	     DWord
  sb_FirstFreeIno  . . . . . . .	 0034	     DWord
  sb_FreeBlocks  . . . . . . . .	 0038	     DWord
  sb_FirstFreeBlk  . . . . . . .	 003C	     DWord
  sb_BootSecParms  . . . . . . .	 0040	     Byte
  sb_BSExtension . . . . . . . .	 0053	     Byte
  sb_Status  . . . . . . . . . .	 0058	     DWord
  sb_ModifTime . . . . . . . . .	 005C	     DWord
  sb_ExtdVolTbl  . . . . . . . .	 0060	     DWord
  sb_ExtdVolSize . . . . . . . .	 0064	     DWord
  sb_LBA_rw  . . . . . . . . . .	 0068	     Byte
  sb_ClusterSize . . . . . . . .	 0069	     Byte
  sb_ReadOnly  . . . . . . . . .	 006A	     Byte
  sb_Mounted . . . . . . . . . .	 006B	     Byte
  sb_MountInode  . . . . . . . .	 006C	     DWord
  sb_DevMajor  . . . . . . . . .	 0070	     Byte
  sb_DevMinor  . . . . . . . . .	 0071	     Byte
  sb_LongName  . . . . . . . . .	 0072	     Byte
  sb_Direntry32  . . . . . . . .	 0073	     Byte
  sb_Reserved  . . . . . . . . .	 0074	     Byte
  sb_Footer  . . . . . . . . . .	 01FC	     DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

UNIXCOPY . . . . . . . . . . . .	16 Bit	 4390	  Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

PRINT_MSG  . . . . . . . . . . .	P Near	 02C4	  UNIXCOPY	Length= 000F Private
alloc  . . . . . . . . . . . . .	P Near	 1520	  UNIXCOPY	Length= 006D Private
anyi . . . . . . . . . . . . . .	P Near	 1110	  UNIXCOPY	Length= 002C Private
chgroup  . . . . . . . . . . . .	P Near	 1E64	  UNIXCOPY	Length= 0008 Private
chmode . . . . . . . . . . . . .	P Near	 1DD9	  UNIXCOPY	Length= 008B Private
chowner  . . . . . . . . . . . .	P Near	 1E6C	  UNIXCOPY	Length= 008E Private
clear  . . . . . . . . . . . . .	P Near	 1620	  UNIXCOPY	Length= 000D Private
command_interpreter  . . . . . .	P Near	 03F8	  UNIXCOPY	Length= 0893 Private
convert_from_epoch . . . . . . .	P Near	 1918	  UNIXCOPY	Length= 007C Private
div32  . . . . . . . . . . . . .	P Near	 19A8	  UNIXCOPY	Length= 000D Private
dskrd  . . . . . . . . . . . . .	P Near	 1776	  UNIXCOPY	Length= 004B Private
dskwr  . . . . . . . . . . . . .	P Near	 176F	  UNIXCOPY	Length= 0007 Private
epoch  . . . . . . . . . . . . .	P Near	 1829	  UNIXCOPY	Length= 00EF Private
find_bfn . . . . . . . . . . . .	P Near	 1B2C	  UNIXCOPY	Length= 0041 Private
free . . . . . . . . . . . . . .	P Near	 158D	  UNIXCOPY	Length= 0042 Private
icalc  . . . . . . . . . . . . .	P Near	 134E	  UNIXCOPY	Length= 0062 Private
iget . . . . . . . . . . . . . .	P Near	 131E	  UNIXCOPY	Length= 0030 Private
image_file_rw  . . . . . . . . .	P Near	 17C1	  UNIXCOPY	Length= 0032 Private
imap . . . . . . . . . . . . . .	P Near	 1CD4	  UNIXCOPY	Length= 0027 Private
itrunc . . . . . . . . . . . . .	P Near	 1CFB	  UNIXCOPY	Length= 0080 Private
mak_nod  . . . . . . . . . . . .	P Near	 0F93	  UNIXCOPY	Length= 00B2 Private
make_directory . . . . . . . . .	P Near	 162D	  UNIXCOPY	Length= 003E Private
mget . . . . . . . . . . . . . .	P Near	 13B0	  UNIXCOPY	Length= 0170 Private
mkdir  . . . . . . . . . . . . .	P Near	 166B	  UNIXCOPY	Length= 0042 Private
mul32  . . . . . . . . . . . . .	P Near	 1994	  UNIXCOPY	Length= 0014 Private
namei  . . . . . . . . . . . . .	P Near	 11F7	  UNIXCOPY	Length= 0099 Private
print_decimal_number . . . . . .	P Near	 1F05	  UNIXCOPY	Length= 0065 Private
print_directory_list . . . . . .	P Near	 0D07	  UNIXCOPY	Length= 021D Private
print_file_size  . . . . . . . .	P Near	 1EFA	  UNIXCOPY	Length= 000B Private
print_volume_info  . . . . . . .	P Near	 1F6A	  UNIXCOPY	Length= 0075 Private
proc_bin_to_decimal  . . . . . .	P Near	 1CB1	  UNIXCOPY	Length= 0023 Private
proc_display_startupfile_info  .	P Near	 1B6D	  UNIXCOPY	Length= 0144 Private
proc_hex_double  . . . . . . . .	P Near	 1FDF	  UNIXCOPY	Length= 0039 Private
proc_rw_char . . . . . . . . . .	P Near	 0371	  UNIXCOPY	Length= 0087 Private
proc_start . . . . . . . . . . .	P Near	 0100	  UNIXCOPY	Length= 01C4 Private
readi  . . . . . . . . . . . . .	P Near	 1290	  UNIXCOPY	Length= 008E Private
remove_directory . . . . . . . .	P Near	 1045	  UNIXCOPY	Length= 009E Private
set_firstfreeblock . . . . . . .	P Near	 1B01	  UNIXCOPY	Length= 002B Private
set_firstfreeinode . . . . . . .	P Near	 1AD6	  UNIXCOPY	Length= 002B Private
setimod  . . . . . . . . . . . .	P Near	 15CF	  UNIXCOPY	Length= 0051 Private
shl32  . . . . . . . . . . . . .	P Near	 1AC4	  UNIXCOPY	Length= 0009 Private
show_file  . . . . . . . . . . .	P Near	 113C	  UNIXCOPY	Length= 00BB Private
show_inode . . . . . . . . . . .	P Near	 2018	  UNIXCOPY	Length= 023C Private
shr32  . . . . . . . . . . . . .	P Near	 1ACD	  UNIXCOPY	Length= 0009 Private
sioreg . . . . . . . . . . . . .	P Near	 17F3	  UNIXCOPY	Length= 0036 Private
sync . . . . . . . . . . . . . .	P Near	 19B5	  UNIXCOPY	Length= 010F Private
sys_chdir  . . . . . . . . . . .	P Near	 0F24	  UNIXCOPY	Length= 001E Private
sys_mkdir  . . . . . . . . . . .	P Near	 0F42	  UNIXCOPY	Length= 0051 Private
tloop  . . . . . . . . . . . . .	P Near	 1D7B	  UNIXCOPY	Length= 005E Private
unix_prompt  . . . . . . . . . .	P Near	 02D3	  UNIXCOPY	Length= 009E Private
unlink . . . . . . . . . . . . .	P Near	 10E3	  UNIXCOPY	Length= 002D Private
update_cdir_string . . . . . . .	P Near	 0C8B	  UNIXCOPY	Length= 007C Private
writei . . . . . . . . . . . . .	P Near	 16AD	  UNIXCOPY	Length= 00C2 Private


Symbols:

                N a m e                 Type     Value    Attr

BOOT_FILE_NAME . . . . . . . . .	L Near	 275B	  UNIXCOPY	
BSBUFFER . . . . . . . . . . . .	L Near	 3190	  UNIXCOPY	
Buffer . . . . . . . . . . . . .	L Near	 3590	  UNIXCOPY	
CDirOffset . . . . . . . . . . .	L Near	 2447	  UNIXCOPY	
CommandBuffer  . . . . . . . . .	L Near	 244C	  UNIXCOPY	
CursorColumn . . . . . . . . . .	L Near	 244A	  UNIXCOPY	
DMonth . . . . . . . . . . . . .	L Near	 27EE	  UNIXCOPY	
DTA_Attrib . . . . . . . . . . .	Number	 0095h	 
DTA_Date . . . . . . . . . . . .	Number	 0098h	 
DTA_FileName . . . . . . . . . .	Number	 009Eh	 
DTA_FileSize . . . . . . . . . .	Number	 009Ah	 
DTA_Time . . . . . . . . . . . .	Number	 0096h	 
Decimal_i_no_str . . . . . . . .	L Near	 2820	  UNIXCOPY	
Decimal_size_str . . . . . . . .	L Near	 2844	  UNIXCOPY	
DirFileName  . . . . . . . . . .	L Near	 275A	  UNIXCOPY	
DotDot . . . . . . . . . . . . .	L Near	 28EC	  UNIXCOPY	
Dot  . . . . . . . . . . . . . .	L Near	 28ED	  UNIXCOPY	
Error  . . . . . . . . . . . . .	L Near	 28EB	  UNIXCOPY	
FileHandle . . . . . . . . . . .	L Near	 27DC	  UNIXCOPY	
I_buffer . . . . . . . . . . . .	L Near	 3790	  UNIXCOPY	
I_rw . . . . . . . . . . . . . .	L Near	 27B4	  UNIXCOPY	
I_sector . . . . . . . . . . . .	L Near	 27B6	  UNIXCOPY	
I_valid  . . . . . . . . . . . .	L Near	 27B5	  UNIXCOPY	
Msg_3dot_OK  . . . . . . . . . .	L Near	 2610	  UNIXCOPY	
Msg_DosFile_Name . . . . . . . .	L Near	 25E6	  UNIXCOPY	
Msg_Not_Unix_FS  . . . . . . . .	L Near	 2596	  UNIXCOPY	
Msg_OK . . . . . . . . . . . . .	L Near	 2613	  UNIXCOPY	
Msg_Removing_file  . . . . . . .	L Near	 25D3	  UNIXCOPY	
Msg_StartupFile_Name . . . . . .	L Near	 25F9	  UNIXCOPY	
Msg_writing_file . . . . . . . .	L Near	 25C1	  UNIXCOPY	
NotFound_msg . . . . . . . . . .	L Near	 29AB	  UNIXCOPY	
PRINT_MSG_LOOP . . . . . . . . .	L Near	 02C4	  UNIXCOPY	
PRINT_MSG_OK . . . . . . . . . .	L Near	 02D2	  UNIXCOPY	
PhysicalDriveNumber  . . . . . .	L Near	 27DE	  UNIXCOPY	
ROOT_DIR_INODE_NUMBER  . . . . .	Number	 0001h	 
ReadBuffer . . . . . . . . . . .	L Near	 3990	  UNIXCOPY	
RetryCount . . . . . . . . . . .	L Near	 2748	  UNIXCOPY	
START_CODE . . . . . . . . . . .	L Near	 0100	  UNIXCOPY	
SizeOfFile . . . . . . . . . . .	Number	 0001432Ch   
Str_Bytes  . . . . . . . . . . .	L Near	 283D	  UNIXCOPY	
Str_aday . . . . . . . . . . . .	L Near	 28C6	  UNIXCOPY	
Str_ahour  . . . . . . . . . . .	L Near	 28D2	  UNIXCOPY	
Str_aminute  . . . . . . . . . .	L Near	 28D5	  UNIXCOPY	
Str_amonth . . . . . . . . . . .	L Near	 28C9	  UNIXCOPY	
Str_asecond  . . . . . . . . . .	L Near	 28D8	  UNIXCOPY	
Str_ayear  . . . . . . . . . . .	L Near	 28CC	  UNIXCOPY	
Str_cday . . . . . . . . . . . .	L Near	 2866	  UNIXCOPY	
Str_chour  . . . . . . . . . . .	L Near	 2872	  UNIXCOPY	
Str_cminute  . . . . . . . . . .	L Near	 2875	  UNIXCOPY	
Str_cmonth . . . . . . . . . . .	L Near	 2869	  UNIXCOPY	
Str_csecond  . . . . . . . . . .	L Near	 2878	  UNIXCOPY	
Str_cyear  . . . . . . . . . . .	L Near	 286C	  UNIXCOPY	
Str_mday . . . . . . . . . . . .	L Near	 2896	  UNIXCOPY	
Str_mhour  . . . . . . . . . . .	L Near	 28A2	  UNIXCOPY	
Str_mminute  . . . . . . . . . .	L Near	 28A5	  UNIXCOPY	
Str_mmonth . . . . . . . . . . .	L Near	 2899	  UNIXCOPY	
Str_msecond  . . . . . . . . . .	L Near	 28A8	  UNIXCOPY	
Str_myear  . . . . . . . . . . .	L Near	 289C	  UNIXCOPY	
Str_sf_date_time . . . . . . . .	L Near	 284A	  UNIXCOPY	
Str_startup_file_size  . . . . .	L Near	 2826	  UNIXCOPY	
UNIXCOPY_Commands  . . . . . . .	L Near	 2BCB	  UNIXCOPY	
UNIX_CRLF  . . . . . . . . . . .	L Near	 262C	  UNIXCOPY	
UNIX_FD_Name . . . . . . . . . .	L Near	 241B	  UNIXCOPY	
UNIX_FD_Number . . . . . . . . .	L Near	 241D	  UNIXCOPY	
UNIX_Welcome . . . . . . . . . .	L Near	 2254	  UNIXCOPY	
U  . . . . . . . . . . . . . . .	L Near	 27B8	  UNIXCOPY	
WriteBuffer  . . . . . . . . . .	L Near	 3B90	  UNIXCOPY	
alloc_1  . . . . . . . . . . . .	L Near	 1521	  UNIXCOPY	
alloc_2  . . . . . . . . . . . .	L Near	 1530	  UNIXCOPY	
alloc_3  . . . . . . . . . . . .	L Near	 1544	  UNIXCOPY	
alloc_4  . . . . . . . . . . . .	L Near	 154B	  UNIXCOPY	
alloc_5  . . . . . . . . . . . .	L Near	 1567	  UNIXCOPY	
alloc_6  . . . . . . . . . . . .	L Near	 158B	  UNIXCOPY	
alloc_7  . . . . . . . . . . . .	L Near	 158B	  UNIXCOPY	
alloc_free_3 . . . . . . . . . .	L Near	 154B	  UNIXCOPY	
anyi_1 . . . . . . . . . . . . .	L Near	 1110	  UNIXCOPY	
anyi_2 . . . . . . . . . . . . .	L Near	 1137	  UNIXCOPY	
arg  . . . . . . . . . . . . . .	L Near	 249B	  UNIXCOPY	
blockdev . . . . . . . . . . . .	L Near	 0E22	  UNIXCOPY	
bmod . . . . . . . . . . . . . .	L Near	 28EF	  UNIXCOPY	
boot_sector  . . . . . . . . . .	L Near	 3190	  UNIXCOPY	
bootfile_inode . . . . . . . . .	L Near	 2770	  UNIXCOPY	
bsDriveNumber  . . . . . . . . .	Number	 000Ch	 
bsFDSign . . . . . . . . . . . .	Number	 000Ah	 
bsFSystemID  . . . . . . . . . .	Number	 0002h	 
bsHeads  . . . . . . . . . . . .	Number	 000Fh	 
bsHiddenSects  . . . . . . . . .	Number	 0016h	 
bsInfoEndsign  . . . . . . . . .	Number	 0014h	 
bsMagic  . . . . . . . . . . . .	Number	 0014h	 
bsPartitionID  . . . . . . . . .	Number	 0015h	 
bsReserved . . . . . . . . . . .	Number	 000Dh	 
bsSecPerTrack  . . . . . . . . .	Number	 000Eh	 
bsTracks . . . . . . . . . . . .	Number	 0010h	 
bsVolumeSerial . . . . . . . . .	Number	 0006h	 
bs_bf_inode_num  . . . . . . . .	Number	 0012h	 
buff_d . . . . . . . . . . . . .	L Near	 27DE	  UNIXCOPY	
buff_m . . . . . . . . . . . . .	L Near	 27DF	  UNIXCOPY	
buff_s . . . . . . . . . . . . .	L Near	 27E0	  UNIXCOPY	
cap_file_name  . . . . . . . . .	L Near	 01A8	  UNIXCOPY	
cg_og  . . . . . . . . . . . . .	L Near	 1E71	  UNIXCOPY	
char_return  . . . . . . . . . .	L Near	 03C0	  UNIXCOPY	
chardev  . . . . . . . . . . . .	L Near	 0E1E	  UNIXCOPY	
check_fdi_opt_loop . . . . . . .	L Near	 017F	  UNIXCOPY	
check_fdi_option . . . . . . . .	L Near	 016D	  UNIXCOPY	
chg  . . . . . . . . . . . . . .	L Near	 1E6B	  UNIXCOPY	
chmode_1 . . . . . . . . . . . .	L Near	 1DE5	  UNIXCOPY	
chmode_2 . . . . . . . . . . . .	L Near	 1DFC	  UNIXCOPY	
chmode_3 . . . . . . . . . . . .	L Near	 1DFD	  UNIXCOPY	
chmode_4 . . . . . . . . . . . .	L Near	 1E05	  UNIXCOPY	
chmode_5 . . . . . . . . . . . .	L Near	 1E0E	  UNIXCOPY	
chmode_6 . . . . . . . . . . . .	L Near	 1E3B	  UNIXCOPY	
chmode_7 . . . . . . . . . . . .	L Near	 1E56	  UNIXCOPY	
chmode_retn  . . . . . . . . . .	L Near	 1DFB	  UNIXCOPY	
chmode_stc_retn  . . . . . . . .	L Near	 1DFA	  UNIXCOPY	
chowner_10 . . . . . . . . . . .	L Near	 1EE1	  UNIXCOPY	
chowner_11 . . . . . . . . . . .	L Near	 1EE5	  UNIXCOPY	
chowner_1  . . . . . . . . . . .	L Near	 1E82	  UNIXCOPY	
chowner_2  . . . . . . . . . . .	L Near	 1E8D	  UNIXCOPY	
chowner_3  . . . . . . . . . . .	L Near	 1E97	  UNIXCOPY	
chowner_4  . . . . . . . . . . .	L Near	 1E9F	  UNIXCOPY	
chowner_5  . . . . . . . . . . .	L Near	 1EAB	  UNIXCOPY	
chowner_6  . . . . . . . . . . .	L Near	 1EB3	  UNIXCOPY	
chowner_7  . . . . . . . . . . .	L Near	 1EB8	  UNIXCOPY	
chowner_8  . . . . . . . . . . .	L Near	 1EBD	  UNIXCOPY	
chowner_9  . . . . . . . . . . .	L Near	 1ED1	  UNIXCOPY	
chowner_retn . . . . . . . . . .	L Near	 1EF9	  UNIXCOPY	
chowner_stc_retn . . . . . . . .	L Near	 1EA9	  UNIXCOPY	
chs_read_write . . . . . . . . .	L Near	 1787	  UNIXCOPY	
chs_rw_again . . . . . . . . . .	L Near	 1789	  UNIXCOPY	
chs_rw_err . . . . . . . . . . .	L Near	 17BA	  UNIXCOPY	
chs_rw_ok  . . . . . . . . . . .	L Near	 17BF	  UNIXCOPY	
ci_? . . . . . . . . . . . . . .	L Near	 0500	  UNIXCOPY	
ci_bf_namei  . . . . . . . . . .	L Near	 0C15	  UNIXCOPY	
ci_cd_getarg . . . . . . . . . .	L Near	 0527	  UNIXCOPY	
ci_chgrp_getarg  . . . . . . . .	L Near	 059D	  UNIXCOPY	
ci_chgrp_print . . . . . . . . .	L Near	 0564	  UNIXCOPY	
ci_chmod_getarg  . . . . . . . .	L Near	 0554	  UNIXCOPY	
ci_chmod_print . . . . . . . . .	L Near	 0564	  UNIXCOPY	
ci_chown_getarg  . . . . . . . .	L Near	 057C	  UNIXCOPY	
ci_chown_print . . . . . . . . .	L Near	 0564	  UNIXCOPY	
ci_error . . . . . . . . . . . .	L Near	 089B	  UNIXCOPY	
ci_iget_getarg . . . . . . . . .	L Near	 04E4	  UNIXCOPY	
ci_mkdir_getarg1 . . . . . . . .	L Near	 0754	  UNIXCOPY	
ci_mkdir_getarg2 . . . . . . . .	L Near	 075F	  UNIXCOPY	
ci_move_bfn_1  . . . . . . . . .	L Near	 0BFF	  UNIXCOPY	
ci_move_bfn_2  . . . . . . . . .	L Near	 0C08	  UNIXCOPY	
ci_move_bfn_3  . . . . . . . . .	L Near	 0C10	  UNIXCOPY	
ci_no_bootfile . . . . . . . . .	L Near	 0BF1	  UNIXCOPY	
ci_rmdir_getarg1 . . . . . . . .	L Near	 078C	  UNIXCOPY	
ci_rmdir_getarg2 . . . . . . . .	L Near	 0799	  UNIXCOPY	
ci_sync_exit . . . . . . . . . .	L Near	 0BA4	  UNIXCOPY	
cl10 . . . . . . . . . . . . . .	L Near	 0C41	  UNIXCOPY	
cl1  . . . . . . . . . . . . . .	L Near	 08A2	  UNIXCOPY	
cl2  . . . . . . . . . . . . . .	L Near	 08C3	  UNIXCOPY	
cl3  . . . . . . . . . . . . . .	L Near	 086A	  UNIXCOPY	
cl4  . . . . . . . . . . . . . .	L Near	 03F9	  UNIXCOPY	
cl5_or_above . . . . . . . . . .	L Near	 0419	  UNIXCOPY	
cl5  . . . . . . . . . . . . . .	L Near	 0507	  UNIXCOPY	
cl6  . . . . . . . . . . . . . .	L Near	 09D3	  UNIXCOPY	
cl7  . . . . . . . . . . . . . .	L Near	 09EF	  UNIXCOPY	
cl8  . . . . . . . . . . . . . .	L Near	 0BB9	  UNIXCOPY	
close_img_file . . . . . . . . .	L Near	 02AE	  UNIXCOPY	
cls  . . . . . . . . . . . . . .	L Near	 08AE	  UNIXCOPY	
convert_to_epoch . . . . . . . .	L Near	 1898	  UNIXCOPY	
day  . . . . . . . . . . . . . .	L Near	 27E6	  UNIXCOPY	
dbli_buffer  . . . . . . . . . .	L Near	 4190	  UNIXCOPY	
dec_num  . . . . . . . . . . . .	L Near	 28DF	  UNIXCOPY	
dir_getarg . . . . . . . . . . .	L Near	 0881	  UNIXCOPY	
dir_namei  . . . . . . . . . . .	L Near	 088C	  UNIXCOPY	
dir_print  . . . . . . . . . . .	L Near	 0896	  UNIXCOPY	
diskio . . . . . . . . . . . . .	L Near	 177B	  UNIXCOPY	
dskw_10  . . . . . . . . . . . .	L Near	 16F9	  UNIXCOPY	
dskw_11  . . . . . . . . . . . .	L Near	 1713	  UNIXCOPY	
dskw_12  . . . . . . . . . . . .	L Near	 1724	  UNIXCOPY	
dskw_1 . . . . . . . . . . . . .	L Near	 16FF	  UNIXCOPY	
dskw_2 . . . . . . . . . . . . .	L Near	 1739	  UNIXCOPY	
dskw_3 . . . . . . . . . . . . .	L Near	 1748	  UNIXCOPY	
dskw_4 . . . . . . . . . . . . .	L Near	 174B	  UNIXCOPY	
dskw_5 . . . . . . . . . . . . .	L Near	 1744	  UNIXCOPY	
dskw_6 . . . . . . . . . . . . .	L Near	 173F	  UNIXCOPY	
dskw_7 . . . . . . . . . . . . .	L Near	 16F0	  UNIXCOPY	
dskw_8 . . . . . . . . . . . . .	L Near	 16D3	  UNIXCOPY	
dskw_9 . . . . . . . . . . . . .	L Near	 16F3	  UNIXCOPY	
dskw . . . . . . . . . . . . . .	L Near	 16B9	  UNIXCOPY	
error_msg  . . . . . . . . . . .	L Near	 2623	  UNIXCOPY	
fbm_buffer . . . . . . . . . . .	L Near	 3F90	  UNIXCOPY	
find_bfn_1 . . . . . . . . . . .	L Near	 1B42	  UNIXCOPY	
find_bfn_2 . . . . . . . . . . .	L Near	 1B68	  UNIXCOPY	
find_bfn_retn  . . . . . . . . .	L Near	 1B6B	  UNIXCOPY	
free_1 . . . . . . . . . . . . .	L Near	 15A3	  UNIXCOPY	
free_3 . . . . . . . . . . . . .	L Near	 158D	  UNIXCOPY	
free_4 . . . . . . . . . . . . .	L Near	 1561	  UNIXCOPY	
fromdos_afow_input . . . . . . .	L Near	 0AA6	  UNIXCOPY	
fromdos_afow_no  . . . . . . . .	L Near	 0ABC	  UNIXCOPY	
fromdos_afow_yes . . . . . . . .	L Near	 0AC9	  UNIXCOPY	
fromdos_afow . . . . . . . . . .	L Near	 0A79	  UNIXCOPY	
fromdos_cf_err . . . . . . . . .	L Near	 0BA9	  UNIXCOPY	
fromdos_cf . . . . . . . . . . .	L Near	 0B8D	  UNIXCOPY	
fromdos_df1  . . . . . . . . . .	L Near	 0A14	  UNIXCOPY	
fromdos_df2  . . . . . . . . . .	L Near	 0A1F	  UNIXCOPY	
fromdos_err  . . . . . . . . . .	L Near	 0A4B	  UNIXCOPY	
fromdos_fdf  . . . . . . . . . .	L Near	 0A3E	  UNIXCOPY	
fromdos_fuf  . . . . . . . . . .	L Near	 0A4E	  UNIXCOPY	
fromdos_maknod . . . . . . . . .	L Near	 0FED	  UNIXCOPY	
fromdos_odf_err  . . . . . . . .	L Near	 0B3B	  UNIXCOPY	
fromdos_odf  . . . . . . . . . .	L Near	 0B2F	  UNIXCOPY	
fromdos_retn . . . . . . . . . .	L Near	 0BAC	  UNIXCOPY	
fromdos_s_fs_mdt . . . . . . . .	L Near	 0AE0	  UNIXCOPY	
fromdos_sync_err . . . . . . . .	L Near	 0BA9	  UNIXCOPY	
fromdos_uf1  . . . . . . . . . .	L Near	 0A29	  UNIXCOPY	
fromdos_uf2  . . . . . . . . . .	L Near	 0A34	  UNIXCOPY	
fromdos_uf_itrunc  . . . . . . .	L Near	 0AD5	  UNIXCOPY	
fromdos_wf_msg . . . . . . . . .	L Near	 0B5A	  UNIXCOPY	
fs_info_print  . . . . . . . . .	L Near	 09CF	  UNIXCOPY	
get_fdi_name_nxt_chr . . . . . .	L Near	 018F	  UNIXCOPY	
get_fdi_name_ok  . . . . . . . .	L Near	 01A5	  UNIXCOPY	
get_fdi_name . . . . . . . . . .	L Near	 018C	  UNIXCOPY	
hour . . . . . . . . . . . . . .	L Near	 27E8	  UNIXCOPY	
icalc_0  . . . . . . . . . . . .	L Near	 1373	  UNIXCOPY	
icalc_1  . . . . . . . . . . . .	L Near	 1384	  UNIXCOPY	
icalc_2  . . . . . . . . . . . .	L Near	 139F	  UNIXCOPY	
icalc_3  . . . . . . . . . . . .	L Near	 13AD	  UNIXCOPY	
icalc_4  . . . . . . . . . . . .	L Near	 13AF	  UNIXCOPY	
iget_1 . . . . . . . . . . . . .	L Near	 1324	  UNIXCOPY	
iget_2 . . . . . . . . . . . . .	L Near	 1340	  UNIXCOPY	
iget_3 . . . . . . . . . . . . .	L Near	 134A	  UNIXCOPY	
iget_4 . . . . . . . . . . . . .	L Near	 134D	  UNIXCOPY	
ii . . . . . . . . . . . . . . .	L Near	 27DA	  UNIXCOPY	
im_buffer  . . . . . . . . . . .	L Near	 3D90	  UNIXCOPY	
img_file_handle  . . . . . . . .	L Near	 2758	  UNIXCOPY	
img_file_name  . . . . . . . . .	L Near	 274A	  UNIXCOPY	
img_file_rw_err  . . . . . . . .	L Near	 17EC	  UNIXCOPY	
img_file_rw_ok . . . . . . . . .	L Near	 17F1	  UNIXCOPY	
imodx  . . . . . . . . . . . . .	L Near	 27B3	  UNIXCOPY	
imod . . . . . . . . . . . . . .	L Near	 27B2	  UNIXCOPY	
index  . . . . . . . . . . . . .	L Near	 27B0	  UNIXCOPY	
inode_atim . . . . . . . . . . .	L Near	 27A4	  UNIXCOPY	
inode_ctim . . . . . . . . . . .	L Near	 27AC	  UNIXCOPY	
inode_dskp . . . . . . . . . . .	L Near	 277C	  UNIXCOPY	
inode_flgs . . . . . . . . . . .	L Near	 2770	  UNIXCOPY	
inode_getarg1  . . . . . . . . .	L Near	 084A	  UNIXCOPY	
inode_getarg2  . . . . . . . . .	L Near	 0858	  UNIXCOPY	
inode_gid  . . . . . . . . . . .	L Near	 2776	  UNIXCOPY	
inode_mtim . . . . . . . . . . .	L Near	 27A8	  UNIXCOPY	
inode_nlks . . . . . . . . . . .	L Near	 2772	  UNIXCOPY	
inode_size_h . . . . . . . . . .	L Near	 2777	  UNIXCOPY	
inode_size . . . . . . . . . . .	L Near	 2778	  UNIXCOPY	
inode_uid  . . . . . . . . . . .	L Near	 2774	  UNIXCOPY	
inode  . . . . . . . . . . . . .	L Near	 2770	  UNIXCOPY	
itrunc_0 . . . . . . . . . . . .	L Near	 1D40	  UNIXCOPY	
itrunc_10  . . . . . . . . . . .	L Near	 1D3F	  UNIXCOPY	
itrunc_1 . . . . . . . . . . . .	L Near	 1D07	  UNIXCOPY	
itrunc_2 . . . . . . . . . . . .	L Near	 1D11	  UNIXCOPY	
itrunc_3 . . . . . . . . . . . .	L Near	 1D28	  UNIXCOPY	
itrunc_4 . . . . . . . . . . . .	L Near	 1D36	  UNIXCOPY	
itrunc_5 . . . . . . . . . . . .	L Near	 1D44	  UNIXCOPY	
itrunc_6 . . . . . . . . . . . .	L Near	 1D5B	  UNIXCOPY	
itrunc_7 . . . . . . . . . . . .	L Near	 1D5B	  UNIXCOPY	
itrunc_8 . . . . . . . . . . . .	L Near	 1D71	  UNIXCOPY	
itrunc_9 . . . . . . . . . . . .	L Near	 1D43	  UNIXCOPY	
link_df1 . . . . . . . . . . . .	L Near	 0472	  UNIXCOPY	
link_df2 . . . . . . . . . . . .	L Near	 047D	  UNIXCOPY	
link_err . . . . . . . . . . . .	L Near	 04AF	  UNIXCOPY	
link_fdf . . . . . . . . . . . .	L Near	 048F	  UNIXCOPY	
link_fsf . . . . . . . . . . . .	L Near	 0487	  UNIXCOPY	
link_sf1 . . . . . . . . . . . .	L Near	 045D	  UNIXCOPY	
link_sf2 . . . . . . . . . . . .	L Near	 0468	  UNIXCOPY	
list_count . . . . . . . . . . .	L Near	 28DD	  UNIXCOPY	
load_boot_sector_ok  . . . . . .	L Near	 024A	  UNIXCOPY	
load_boot_sector . . . . . . . .	L Near	 0244	  UNIXCOPY	
load_fd_img_boot_sect_ok . . . .	L Near	 0259	  UNIXCOPY	
loc_arrow  . . . . . . . . . . .	L Near	 03B4	  UNIXCOPY	
loc_back . . . . . . . . . . . .	L Near	 0381	  UNIXCOPY	
loc_beep . . . . . . . . . . . .	L Near	 038D	  UNIXCOPY	
loc_bootfile_err . . . . . . . .	L Near	 0BFC	  UNIXCOPY	
loc_call_unix_prompt . . . . . .	L Near	 02B9	  UNIXCOPY	
loc_cap_file_name0 . . . . . . .	L Near	 01AF	  UNIXCOPY	
loc_cap_file_name1 . . . . . . .	L Near	 01BE	  UNIXCOPY	
loc_cap_file_name2 . . . . . . .	L Near	 01C1	  UNIXCOPY	
loc_cap_file_name3 . . . . . . .	L Near	 01CA	  UNIXCOPY	
loc_cap_file_name4 . . . . . . .	L Near	 01E2	  UNIXCOPY	
loc_chdir_err  . . . . . . . . .	L Near	 0561	  UNIXCOPY	
loc_check_fd_name  . . . . . . .	L Near	 012C	  UNIXCOPY	
loc_check_fd_sign  . . . . . . .	L Near	 0279	  UNIXCOPY	
loc_check_img_option . . . . . .	L Near	 0128	  UNIXCOPY	
loc_chgrp_err  . . . . . . . . .	L Near	 0561	  UNIXCOPY	
loc_chk_dos_fname  . . . . . . .	L Near	 014E	  UNIXCOPY	
loc_chk_image_file_features  . .	L Near	 01FE	  UNIXCOPY	
loc_chk_image_file_size  . . . .	L Near	 0209	  UNIXCOPY	
loc_chmod_err  . . . . . . . . .	L Near	 0561	  UNIXCOPY	
loc_chown_err  . . . . . . . . .	L Near	 0561	  UNIXCOPY	
loc_close_file_then_terminate  .	L Near	 02A6	  UNIXCOPY	
loc_cmd_bootfile . . . . . . . .	L Near	 0BC1	  UNIXCOPY	
loc_cmd_cd . . . . . . . . . . .	L Near	 08C8	  UNIXCOPY	
loc_cmd_chdir  . . . . . . . . .	L Near	 050F	  UNIXCOPY	
loc_cmd_chgrp  . . . . . . . . .	L Near	 058E	  UNIXCOPY	
loc_cmd_chmod  . . . . . . . . .	L Near	 0545	  UNIXCOPY	
loc_cmd_chown  . . . . . . . . .	L Near	 056D	  UNIXCOPY	
loc_cmd_dir  . . . . . . . . . .	L Near	 086F	  UNIXCOPY	
loc_cmd_exit . . . . . . . . . .	L Near	 0403	  UNIXCOPY	
loc_cmd_fromdos  . . . . . . . .	L Near	 09F9	  UNIXCOPY	
loc_cmd_fs . . . . . . . . . . .	L Near	 09C5	  UNIXCOPY	
loc_cmd_help . . . . . . . . . .	L Near	 04F0	  UNIXCOPY	
loc_cmd_iget . . . . . . . . . .	L Near	 04D4	  UNIXCOPY	
loc_cmd_inode  . . . . . . . . .	L Near	 0835	  UNIXCOPY	
loc_cmd_link . . . . . . . . . .	L Near	 044A	  UNIXCOPY	
loc_cmd_ls . . . . . . . . . . .	L Near	 08D5	  UNIXCOPY	
loc_cmd_mkdir  . . . . . . . . .	L Near	 073F	  UNIXCOPY	
loc_cmd_namei  . . . . . . . . .	L Near	 07DD	  UNIXCOPY	
loc_cmd_nobootfile . . . . . . .	L Near	 0C46	  UNIXCOPY	
loc_cmd_rmdir  . . . . . . . . .	L Near	 0777	  UNIXCOPY	
loc_cmd_rm . . . . . . . . . . .	L Near	 0905	  UNIXCOPY	
loc_cmd_show . . . . . . . . . .	L Near	 041C	  UNIXCOPY	
loc_cmd_todos  . . . . . . . . .	L Near	 05AF	  UNIXCOPY	
loc_cmd_volume . . . . . . . . .	L Near	 09D8	  UNIXCOPY	
loc_drv_read_error . . . . . . .	L Near	 02B4	  UNIXCOPY	
loc_error  . . . . . . . . . . .	L Near	 0274	  UNIXCOPY	
loc_escape . . . . . . . . . . .	L Near	 03F2	  UNIXCOPY	
loc_find_image_file  . . . . . .	L Near	 01E7	  UNIXCOPY	
loc_get_args . . . . . . . . . .	L Near	 0121	  UNIXCOPY	
loc_inode_err  . . . . . . . . .	L Near	 081D	  UNIXCOPY	
loc_inv_fname  . . . . . . . . .	L Near	 019F	  UNIXCOPY	
loc_inv_image_file . . . . . . .	L Near	 0217	  UNIXCOPY	
loc_jmp_loc_err  . . . . . . . .	L Near	 0207	  UNIXCOPY	
loc_mkdir_err  . . . . . . . . .	L Near	 072F	  UNIXCOPY	
loc_namei_err  . . . . . . . . .	L Near	 081D	  UNIXCOPY	
loc_no_valid_args  . . . . . . .	L Near	 011E	  UNIXCOPY	
loc_not_fd_rufs  . . . . . . . .	L Near	 026F	  UNIXCOPY	
loc_open_image_file  . . . . . .	L Near	 021D	  UNIXCOPY	
loc_rediv_NumberInput  . . . . .	L Near	 1CBE	  UNIXCOPY	
loc_reset_str_NumberInput  . . .	L Near	 1CB1	  UNIXCOPY	
loc_rm_err . . . . . . . . . . .	L Near	 0955	  UNIXCOPY	
loc_rmdir_err  . . . . . . . . .	L Near	 07BA	  UNIXCOPY	
loc_unix_welcome . . . . . . . .	L Near	 0296	  UNIXCOPY	
loc_write_it . . . . . . . . . .	L Near	 03AA	  UNIXCOPY	
loop_popcx_NumberInput . . . . .	L Near	 1CCB	  UNIXCOPY	
ls_getarg1 . . . . . . . . . . .	L Near	 08E4	  UNIXCOPY	
ls_getarg2 . . . . . . . . . . .	L Near	 08EB	  UNIXCOPY	
ls_getarg3 . . . . . . . . . . .	L Near	 0888	  UNIXCOPY	
ls_getarg4 . . . . . . . . . . .	L Near	 08F4	  UNIXCOPY	
ls_option  . . . . . . . . . . .	L Near	 28DE	  UNIXCOPY	
makdir_1 . . . . . . . . . . . .	L Near	 0F48	  UNIXCOPY	
makdir_2 . . . . . . . . . . . .	L Near	 0F55	  UNIXCOPY	
makdir_3 . . . . . . . . . . . .	L Near	 0F6A	  UNIXCOPY	
makdir_4 . . . . . . . . . . . .	L Near	 0F7A	  UNIXCOPY	
maknod_1 . . . . . . . . . . . .	L Near	 0F9B	  UNIXCOPY	
maknod_2 . . . . . . . . . . . .	L Near	 0FAB	  UNIXCOPY	
maknod_3 . . . . . . . . . . . .	L Near	 0FAA	  UNIXCOPY	
maknod_4 . . . . . . . . . . . .	L Near	 100B	  UNIXCOPY	
mget_0 . . . . . . . . . . . . .	L Near	 13B0	  UNIXCOPY	
mget_10  . . . . . . . . . . . .	L Near	 14A1	  UNIXCOPY	
mget_11  . . . . . . . . . . . .	L Near	 14AB	  UNIXCOPY	
mget_12  . . . . . . . . . . . .	L Near	 14AC	  UNIXCOPY	
mget_13  . . . . . . . . . . . .	L Near	 14B1	  UNIXCOPY	
mget_14  . . . . . . . . . . . .	L Near	 14C9	  UNIXCOPY	
mget_15  . . . . . . . . . . . .	L Near	 14E5	  UNIXCOPY	
mget_16  . . . . . . . . . . . .	L Near	 14ED	  UNIXCOPY	
mget_17  . . . . . . . . . . . .	L Near	 151D	  UNIXCOPY	
mget_18  . . . . . . . . . . . .	L Near	 151F	  UNIXCOPY	
mget_1 . . . . . . . . . . . . .	L Near	 1402	  UNIXCOPY	
mget_2 . . . . . . . . . . . . .	L Near	 1417	  UNIXCOPY	
mget_3 . . . . . . . . . . . . .	L Near	 1418	  UNIXCOPY	
mget_4 . . . . . . . . . . . . .	L Near	 1436	  UNIXCOPY	
mget_5 . . . . . . . . . . . . .	L Near	 1444	  UNIXCOPY	
mget_6 . . . . . . . . . . . . .	L Near	 13E1	  UNIXCOPY	
mget_7 . . . . . . . . . . . . .	L Near	 13E1	  UNIXCOPY	
mget_8 . . . . . . . . . . . . .	L Near	 1466	  UNIXCOPY	
mget_9 . . . . . . . . . . . . .	L Near	 146D	  UNIXCOPY	
minute . . . . . . . . . . . . .	L Near	 27EA	  UNIXCOPY	
mkdir_0  . . . . . . . . . . . .	L Near	 166B	  UNIXCOPY	
mkdir_1  . . . . . . . . . . . .	L Near	 167C	  UNIXCOPY	
mkdir_2  . . . . . . . . . . . .	L Near	 1692	  UNIXCOPY	
mkdir_inc_nlinks . . . . . . . .	L Near	 1664	  UNIXCOPY	
mkdir_stc  . . . . . . . . . . .	L Near	 168E	  UNIXCOPY	
month  . . . . . . . . . . . . .	L Near	 27E4	  UNIXCOPY	
msgINumber . . . . . . . . . . .	L Near	 29BB	  UNIXCOPY	
msgVol_Size_Hdr  . . . . . . . .	L Near	 2955	  UNIXCOPY	
msgVol_free_icount_Hdr . . . . .	L Near	 2999	  UNIXCOPY	
msgVol_freeblocks_Hdr  . . . . .	L Near	 296E	  UNIXCOPY	
msgVol_icount_Hdr  . . . . . . .	L Near	 2987	  UNIXCOPY	
msgVolume_Info . . . . . . . . .	L Near	 28F0	  UNIXCOPY	
msgVolume_Serial . . . . . . . .	L Near	 2948	  UNIXCOPY	
msgVolume_Size . . . . . . . . .	L Near	 2964	  UNIXCOPY	
msgVolume_free_icount  . . . . .	L Near	 29A8	  UNIXCOPY	
msgVolume_freeblocks . . . . . .	L Near	 297D	  UNIXCOPY	
msgVolume_icount . . . . . . . .	L Near	 2996	  UNIXCOPY	
msg_NO . . . . . . . . . . . . .	L Near	 261F	  UNIXCOPY	
msg_Startup_File_Not_Exists  . .	L Near	 2681	  UNIXCOPY	
msg_YES  . . . . . . . . . . . .	L Near	 261A	  UNIXCOPY	
msg_arg  . . . . . . . . . . . .	L Near	 2499	  UNIXCOPY	
msg_file_not_found . . . . . . .	L Near	 2510	  UNIXCOPY	
msg_inode_details  . . . . . . .	L Near	 29CC	  UNIXCOPY	
msg_inv_file_name  . . . . . . .	L Near	 24CD	  UNIXCOPY	
msg_inv_image_file . . . . . . .	L Near	 254C	  UNIXCOPY	
msg_making_directory . . . . . .	L Near	 262F	  UNIXCOPY	
msg_overwrite_question1  . . . .	L Near	 2701	  UNIXCOPY	
msg_overwrite_question2  . . . .	L Near	 271E	  UNIXCOPY	
msg_remove_question1 . . . . . .	L Near	 2726	  UNIXCOPY	
msg_remove_question2 . . . . . .	L Near	 2740	  UNIXCOPY	
msg_removing_directory . . . . .	L Near	 2645	  UNIXCOPY	
msg_sf_configuration_reset_ok  .	L Near	 26D5	  UNIXCOPY	
msg_sf_configuration_set_ok  . .	L Near	 26AB	  UNIXCOPY	
msg_unix_drv_read_error  . . . .	L Near	 24AA	  UNIXCOPY	
msg_unix_drv_write_error . . . .	L Near	 265D	  UNIXCOPY	
msg_yes_no . . . . . . . . . . .	L Near	 249F	  UNIXCOPY	
namei_0  . . . . . . . . . . . .	L Near	 120D	  UNIXCOPY	
namei_1  . . . . . . . . . . . .	L Near	 1212	  UNIXCOPY	
namei_2  . . . . . . . . . . . .	L Near	 1230	  UNIXCOPY	
namei_3  . . . . . . . . . . . .	L Near	 125F	  UNIXCOPY	
namei_4  . . . . . . . . . . . .	L Near	 127B	  UNIXCOPY	
namei_5  . . . . . . . . . . . .	L Near	 1285	  UNIXCOPY	
namei_6  . . . . . . . . . . . .	L Near	 121E	  UNIXCOPY	
namei_7  . . . . . . . . . . . .	L Near	 1221	  UNIXCOPY	
namei_fsf  . . . . . . . . . . .	L Near	 0807	  UNIXCOPY	
namei_iget . . . . . . . . . . .	L Near	 0818	  UNIXCOPY	
namei_print_inum . . . . . . . .	L Near	 081F	  UNIXCOPY	
namei_sf1  . . . . . . . . . . .	L Near	 07F2	  UNIXCOPY	
namei_sf2  . . . . . . . . . . .	L Near	 07FD	  UNIXCOPY	
namei_x  . . . . . . . . . . . .	L Near	 11FB	  UNIXCOPY	
norotal  . . . . . . . . . . . .	L Near	 1ACC	  UNIXCOPY	
norotar  . . . . . . . . . . . .	L Near	 1AD5	  UNIXCOPY	
pass_cc_ah . . . . . . . . . . .	L Near	 2016	  UNIXCOPY	
pass_cc_al . . . . . . . . . . .	L Near	 200E	  UNIXCOPY	
pass_cc_dh . . . . . . . . . . .	L Near	 2005	  UNIXCOPY	
pass_cc_dl . . . . . . . . . . .	L Near	 1FFD	  UNIXCOPY	
pass_escape  . . . . . . . . . .	L Near	 03E3	  UNIXCOPY	
pdir . . . . . . . . . . . . . .	L Near	 2497	  UNIXCOPY	
pdl_0  . . . . . . . . . . . . .	L Near	 0D0B	  UNIXCOPY	
pdl_10 . . . . . . . . . . . . .	L Near	 0DB9	  UNIXCOPY	
pdl_11 . . . . . . . . . . . . .	L Near	 0D91	  UNIXCOPY	
pdl_12 . . . . . . . . . . . . .	L Near	 0EE2	  UNIXCOPY	
pdl_13 . . . . . . . . . . . . .	L Near	 0DBD	  UNIXCOPY	
pdl_14 . . . . . . . . . . . . .	L Near	 0DBB	  UNIXCOPY	
pdl_15 . . . . . . . . . . . . .	L Near	 0EFD	  UNIXCOPY	
pdl_16 . . . . . . . . . . . . .	L Near	 0F07	  UNIXCOPY	
pdl_17 . . . . . . . . . . . . .	L Near	 0D8A	  UNIXCOPY	
pdl_18 . . . . . . . . . . . . .	L Near	 0DE5	  UNIXCOPY	
pdl_1  . . . . . . . . . . . . .	L Near	 0D1F	  UNIXCOPY	
pdl_2  . . . . . . . . . . . . .	L Near	 0D23	  UNIXCOPY	
pdl_3  . . . . . . . . . . . . .	L Near	 0D2E	  UNIXCOPY	
pdl_4  . . . . . . . . . . . . .	L Near	 0D55	  UNIXCOPY	
pdl_5  . . . . . . . . . . . . .	L Near	 0D5E	  UNIXCOPY	
pdl_6  . . . . . . . . . . . . .	L Near	 0D66	  UNIXCOPY	
pdl_7  . . . . . . . . . . . . .	L Near	 0D77	  UNIXCOPY	
pdl_8  . . . . . . . . . . . . .	L Near	 0EEA	  UNIXCOPY	
pdl_9  . . . . . . . . . . . . .	L Near	 0F1C	  UNIXCOPY	
pdn0 . . . . . . . . . . . . . .	L Near	 1F07	  UNIXCOPY	
pdn_14 . . . . . . . . . . . . .	L Near	 1F47	  UNIXCOPY	
pdn_itoa . . . . . . . . . . . .	L Near	 1F22	  UNIXCOPY	
pdn_putc . . . . . . . . . . . .	L Near	 1F5D	  UNIXCOPY	
pfn_itoa . . . . . . . . . . . .	L Near	 1F33	  UNIXCOPY	
prev_column  . . . . . . . . . .	L Near	 0395	  UNIXCOPY	
program_exit . . . . . . . . . .	L Near	 2496	  UNIXCOPY	
putc . . . . . . . . . . . . . .	L Near	 0F1D	  UNIXCOPY	
read_next_char . . . . . . . . .	L Near	 0371	  UNIXCOPY	
readinode_1  . . . . . . . . . .	L Near	 129C	  UNIXCOPY	
readinode_2  . . . . . . . . . .	L Near	 12D3	  UNIXCOPY	
readinode_3  . . . . . . . . . .	L Near	 12B3	  UNIXCOPY	
readinode_4  . . . . . . . . . .	L Near	 12B5	  UNIXCOPY	
readinode_5  . . . . . . . . . .	L Near	 12B2	  UNIXCOPY	
readinode_6  . . . . . . . . . .	L Near	 12F8	  UNIXCOPY	
readinode_retn . . . . . . . . .	L Near	 12B4	  UNIXCOPY	
readinode_sioreg . . . . . . . .	L Near	 1309	  UNIXCOPY	
regular_f  . . . . . . . . . . .	L Near	 0E2D	  UNIXCOPY	
regular  . . . . . . . . . . . .	L Near	 0E26	  UNIXCOPY	
rm_a_no  . . . . . . . . . . . .	L Near	 099B	  UNIXCOPY	
rm_a_yes . . . . . . . . . . . .	L Near	 09A8	  UNIXCOPY	
rm_getarg  . . . . . . . . . . .	L Near	 0912	  UNIXCOPY	
rm_move_fn . . . . . . . . . . .	L Near	 0958	  UNIXCOPY	
rm_namei . . . . . . . . . . . .	L Near	 091D	  UNIXCOPY	
rm_unlink  . . . . . . . . . . .	L Near	 09B4	  UNIXCOPY	
rm_yn_input  . . . . . . . . . .	L Near	 0985	  UNIXCOPY	
rmdir_1  . . . . . . . . . . . .	L Near	 1074	  UNIXCOPY	
rmdir_readi_loop . . . . . . . .	L Near	 107C	  UNIXCOPY	
rmdir_stc_retn . . . . . . . . .	L Near	 1072	  UNIXCOPY	
rmdir_unlink . . . . . . . . . .	L Near	 10C1	  UNIXCOPY	
rotashftl  . . . . . . . . . . .	L Near	 1AC6	  UNIXCOPY	
rotashftr  . . . . . . . . . . .	L Near	 1ACF	  UNIXCOPY	
rwxugo . . . . . . . . . . . . .	L Near	 0E3C	  UNIXCOPY	
rw . . . . . . . . . . . . . . .	L Near	 27B1	  UNIXCOPY	
sb_HiddenSects . . . . . . . . .	Text   	 sb_BootSecAddr
sb_TotalSects  . . . . . . . . .	Text   	 sb_VolumeSize
second . . . . . . . . . . . . .	L Near	 27EC	  UNIXCOPY	
sector_buffer  . . . . . . . . .	L Near	 3590	  UNIXCOPY	
set_cursor_pos . . . . . . . . .	L Near	 0397	  UNIXCOPY	
setimod_1  . . . . . . . . . . .	L Near	 15E4	  UNIXCOPY	
setimod_2  . . . . . . . . . . .	L Near	 15F1	  UNIXCOPY	
setimod_3  . . . . . . . . . . .	L Near	 1601	  UNIXCOPY	
setimod_4  . . . . . . . . . . .	L Near	 15FF	  UNIXCOPY	
setimod_5  . . . . . . . . . . .	L Near	 15F8	  UNIXCOPY	
setimod_6  . . . . . . . . . . .	L Near	 15F0	  UNIXCOPY	
sffb_1 . . . . . . . . . . . . .	L Near	 1B0C	  UNIXCOPY	
sffb_2 . . . . . . . . . . . . .	L Near	 1B10	  UNIXCOPY	
sffb_3 . . . . . . . . . . . . .	L Near	 1B20	  UNIXCOPY	
sffb_4 . . . . . . . . . . . . .	L Near	 1B21	  UNIXCOPY	
sffb_5 . . . . . . . . . . . . .	L Near	 1B27	  UNIXCOPY	
sffi_1 . . . . . . . . . . . . .	L Near	 1AE1	  UNIXCOPY	
sffi_2 . . . . . . . . . . . . .	L Near	 1AE5	  UNIXCOPY	
sffi_3 . . . . . . . . . . . . .	L Near	 1AF6	  UNIXCOPY	
sffi_4 . . . . . . . . . . . . .	L Near	 1AF7	  UNIXCOPY	
sffi_5 . . . . . . . . . . . . .	L Near	 1AFC	  UNIXCOPY	
show_indir_bn  . . . . . . . . .	L Near	 20D8	  UNIXCOPY	
show_inode_1 . . . . . . . . . .	L Near	 2021	  UNIXCOPY	
show_inode_2 . . . . . . . . . .	L Near	 202C	  UNIXCOPY	
show_inode_3 . . . . . . . . . .	L Near	 2030	  UNIXCOPY	
show_inode_4 . . . . . . . . . .	L Near	 2034	  UNIXCOPY	
show_inode_5 . . . . . . . . . .	L Near	 203E	  UNIXCOPY	
show_inode_6 . . . . . . . . . .	L Near	 2050	  UNIXCOPY	
show_inode_7 . . . . . . . . . .	L Near	 2067	  UNIXCOPY	
show_inode_retn  . . . . . . . .	L Near	 203D	  UNIXCOPY	
show_inode_stc_retn  . . . . . .	L Near	 203C	  UNIXCOPY	
show_uf1 . . . . . . . . . . . .	L Near	 042C	  UNIXCOPY	
show_uf2 . . . . . . . . . . . .	L Near	 0437	  UNIXCOPY	
show_uf3 . . . . . . . . . . . .	L Near	 0441	  UNIXCOPY	
str_inode_number . . . . . . . .	L Near	 2806	  UNIXCOPY	
suf_0  . . . . . . . . . . . . .	L Near	 1166	  UNIXCOPY	
suf_10 . . . . . . . . . . . . .	L Near	 11DC	  UNIXCOPY	
suf_11 . . . . . . . . . . . . .	L Near	 11E6	  UNIXCOPY	
suf_12 . . . . . . . . . . . . .	L Near	 11F0	  UNIXCOPY	
suf_13 . . . . . . . . . . . . .	L Near	 11D2	  UNIXCOPY	
suf_14 . . . . . . . . . . . . .	L Near	 11D7	  UNIXCOPY	
suf_1  . . . . . . . . . . . . .	L Near	 1168	  UNIXCOPY	
suf_2  . . . . . . . . . . . . .	L Near	 1175	  UNIXCOPY	
suf_3  . . . . . . . . . . . . .	L Near	 1195	  UNIXCOPY	
suf_4  . . . . . . . . . . . . .	L Near	 11A1	  UNIXCOPY	
suf_5  . . . . . . . . . . . . .	L Near	 11A7	  UNIXCOPY	
suf_6  . . . . . . . . . . . . .	L Near	 11AA	  UNIXCOPY	
suf_7  . . . . . . . . . . . . .	L Near	 11B6	  UNIXCOPY	
suf_8  . . . . . . . . . . . . .	L Near	 11BA	  UNIXCOPY	
suf_9  . . . . . . . . . . . . .	L Near	 11BE	  UNIXCOPY	
super_block  . . . . . . . . . .	L Near	 3390	  UNIXCOPY	
sync_0 . . . . . . . . . . . . .	L Near	 19B4	  UNIXCOPY	
sync_1 . . . . . . . . . . . . .	L Near	 19D3	  UNIXCOPY	
sync_2 . . . . . . . . . . . . .	L Near	 1A8D	  UNIXCOPY	
sync_3 . . . . . . . . . . . . .	L Near	 1AC3	  UNIXCOPY	
sync_err . . . . . . . . . . . .	L Near	 1A5D	  UNIXCOPY	
syschdir_0 . . . . . . . . . . .	L Near	 0F24	  UNIXCOPY	
syschdir_1 . . . . . . . . . . .	L Near	 0F29	  UNIXCOPY	
syschdir_2 . . . . . . . . . . .	L Near	 0F2E	  UNIXCOPY	
syschdir_3 . . . . . . . . . . .	L Near	 0F3A	  UNIXCOPY	
syschdir_4 . . . . . . . . . . .	L Near	 0F3E	  UNIXCOPY	
syschdir_5 . . . . . . . . . . .	L Near	 0F41	  UNIXCOPY	
sysmkdir_0 . . . . . . . . . . .	L Near	 0F6E	  UNIXCOPY	
sysmkdir_1 . . . . . . . . . . .	L Near	 0F75	  UNIXCOPY	
sysmkdir_flags . . . . . . . . .	L Near	 0F8A	  UNIXCOPY	
sysmkdir_maknod  . . . . . . . .	L Near	 0F8D	  UNIXCOPY	
systm  . . . . . . . . . . . . .	L Near	 3390	  UNIXCOPY	
terminate  . . . . . . . . . . .	L Near	 02B2	  UNIXCOPY	
tloop_1  . . . . . . . . . . . .	L Near	 1D96	  UNIXCOPY	
tloop_2  . . . . . . . . . . . .	L Near	 1D99	  UNIXCOPY	
tloop_3  . . . . . . . . . . . .	L Near	 1DA5	  UNIXCOPY	
tloop_4  . . . . . . . . . . . .	L Near	 1DB9	  UNIXCOPY	
tloop_5  . . . . . . . . . . . .	L Near	 1DC0	  UNIXCOPY	
tloop_6  . . . . . . . . . . . .	L Near	 1DCB	  UNIXCOPY	
tloop_7  . . . . . . . . . . . .	L Near	 1DD5	  UNIXCOPY	
tloop_8  . . . . . . . . . . . .	L Near	 1DD0	  UNIXCOPY	
todos_afow_input . . . . . . . .	L Near	 0631	  UNIXCOPY	
todos_afow_no  . . . . . . . . .	L Near	 0647	  UNIXCOPY	
todos_afow_yes . . . . . . . . .	L Near	 0654	  UNIXCOPY	
todos_afow . . . . . . . . . . .	L Near	 0619	  UNIXCOPY	
todos_cdf  . . . . . . . . . . .	L Near	 06DA	  UNIXCOPY	
todos_chk_err  . . . . . . . . .	L Near	 0609	  UNIXCOPY	
todos_crdf_err . . . . . . . . .	L Near	 0677	  UNIXCOPY	
todos_crdf . . . . . . . . . . .	L Near	 0660	  UNIXCOPY	
todos_df1  . . . . . . . . . . .	L Near	 05DC	  UNIXCOPY	
todos_df2  . . . . . . . . . . .	L Near	 05E7	  UNIXCOPY	
todos_err  . . . . . . . . . . .	L Near	 05F6	  UNIXCOPY	
todos_fdf  . . . . . . . . . . .	L Near	 05FC	  UNIXCOPY	
todos_fuf  . . . . . . . . . . .	L Near	 05F1	  UNIXCOPY	
todos_iget . . . . . . . . . . .	L Near	 0688	  UNIXCOPY	
todos_odf_err  . . . . . . . . .	L Near	 0677	  UNIXCOPY	
todos_odf  . . . . . . . . . . .	L Near	 066B	  UNIXCOPY	
todos_read_unix_sf_1 . . . . . .	L Near	 0693	  UNIXCOPY	
todos_read_unix_sf_2 . . . . . .	L Near	 06AE	  UNIXCOPY	
todos_retn . . . . . . . . . . .	L Near	 0732	  UNIXCOPY	
todos_ruf_wdf  . . . . . . . . .	L Near	 067A	  UNIXCOPY	
todos_set_dfdt . . . . . . . . .	L Near	 06DD	  UNIXCOPY	
todos_uf1  . . . . . . . . . . .	L Near	 05C7	  UNIXCOPY	
todos_uf2  . . . . . . . . . . .	L Near	 05D2	  UNIXCOPY	
todos_wf_msg . . . . . . . . . .	L Near	 0682	  UNIXCOPY	
txt_device . . . . . . . . . . .	L Near	 2B98	  UNIXCOPY	
txt_inode_aday . . . . . . . . .	L Near	 2B19	  UNIXCOPY	
txt_inode_ahour  . . . . . . . .	L Near	 2B24	  UNIXCOPY	
txt_inode_aminute  . . . . . . .	L Near	 2B27	  UNIXCOPY	
txt_inode_amonth . . . . . . . .	L Near	 2B1C	  UNIXCOPY	
txt_inode_asecond  . . . . . . .	L Near	 2B2A	  UNIXCOPY	
txt_inode_atim_h . . . . . . . .	L Near	 2B0D	  UNIXCOPY	
txt_inode_ayear  . . . . . . . .	L Near	 2B1F	  UNIXCOPY	
txt_inode_cday . . . . . . . . .	L Near	 2B81	  UNIXCOPY	
txt_inode_chour  . . . . . . . .	L Near	 2B8C	  UNIXCOPY	
txt_inode_cminute  . . . . . . .	L Near	 2B8F	  UNIXCOPY	
txt_inode_cmonth . . . . . . . .	L Near	 2B84	  UNIXCOPY	
txt_inode_csecond  . . . . . . .	L Near	 2B92	  UNIXCOPY	
txt_inode_ctim_h . . . . . . . .	L Near	 2B75	  UNIXCOPY	
txt_inode_cyear  . . . . . . . .	L Near	 2B87	  UNIXCOPY	
txt_inode_dskp_i . . . . . . . .	L Near	 2AE2	  UNIXCOPY	
txt_inode_dskp . . . . . . . . .	L Near	 2A91	  UNIXCOPY	
txt_inode_flags_b  . . . . . . .	L Near	 2A17	  UNIXCOPY	
txt_inode_flags_h  . . . . . . .	L Near	 2A10	  UNIXCOPY	
txt_inode_gid  . . . . . . . . .	L Near	 2A5B	  UNIXCOPY	
txt_inode_mday . . . . . . . . .	L Near	 2B4F	  UNIXCOPY	
txt_inode_mhour  . . . . . . . .	L Near	 2B5A	  UNIXCOPY	
txt_inode_mminute  . . . . . . .	L Near	 2B5D	  UNIXCOPY	
txt_inode_mmonth . . . . . . . .	L Near	 2B52	  UNIXCOPY	
txt_inode_msecond  . . . . . . .	L Near	 2B60	  UNIXCOPY	
txt_inode_mtim_h . . . . . . . .	L Near	 2B43	  UNIXCOPY	
txt_inode_myear  . . . . . . . .	L Near	 2B55	  UNIXCOPY	
txt_inode_nlks . . . . . . . . .	L Near	 2A38	  UNIXCOPY	
txt_inode_number . . . . . . . .	L Near	 29FF	  UNIXCOPY	
txt_inode_size_h . . . . . . . .	L Near	 2A6A	  UNIXCOPY	
txt_inode_size . . . . . . . . .	L Near	 2A76	  UNIXCOPY	
txt_inode_uid  . . . . . . . . .	L Near	 2A49	  UNIXCOPY	
txt_major  . . . . . . . . . . .	L Near	 2BB1	  UNIXCOPY	
txt_minor  . . . . . . . . . . .	L Near	 2BC5	  UNIXCOPY	
type_27h . . . . . . . . . . . .	L Near	 22CF	  UNIXCOPY	
u_base . . . . . . . . . . . . .	L Near	 27C0	  UNIXCOPY	
u_cdir . . . . . . . . . . . . .	L Near	 27BA	  UNIXCOPY	
u_count  . . . . . . . . . . . .	L Near	 27C6	  UNIXCOPY	
u_dirbuf . . . . . . . . . . . .	L Near	 27CA	  UNIXCOPY	
u_dirp . . . . . . . . . . . . .	L Near	 27BE	  UNIXCOPY	
u_gid  . . . . . . . . . . . . .	L Near	 27B9	  UNIXCOPY	
u_namep  . . . . . . . . . . . .	L Near	 27BC	  UNIXCOPY	
u_nread  . . . . . . . . . . . .	L Near	 27C8	  UNIXCOPY	
u_off  . . . . . . . . . . . . .	L Near	 27C2	  UNIXCOPY	
u_uid  . . . . . . . . . . . . .	L Near	 27B8	  UNIXCOPY	
ucds_0 . . . . . . . . . . . . .	L Near	 0C8B	  UNIXCOPY	
ucds_1 . . . . . . . . . . . . .	L Near	 0CC1	  UNIXCOPY	
ucds_2 . . . . . . . . . . . . .	L Near	 0CD0	  UNIXCOPY	
ucds_3 . . . . . . . . . . . . .	L Near	 0CE7	  UNIXCOPY	
ucds_4 . . . . . . . . . . . . .	L Near	 0CE4	  UNIXCOPY	
ucds_5 . . . . . . . . . . . . .	L Near	 0CF1	  UNIXCOPY	
ucds_6 . . . . . . . . . . . . .	L Near	 0CAF	  UNIXCOPY	
ucds_7 . . . . . . . . . . . . .	L Near	 0D02	  UNIXCOPY	
ucds_8 . . . . . . . . . . . . .	L Near	 0CAE	  UNIXCOPY	
ucds_9 . . . . . . . . . . . . .	L Near	 0CFC	  UNIXCOPY	
uf_i_number  . . . . . . . . . .	L Near	 276E	  UNIXCOPY	
uf_make_datetime . . . . . . . .	L Near	 276A	  UNIXCOPY	
unix_cdir  . . . . . . . . . . .	L Near	 2421	  UNIXCOPY	
unix_cdrv  . . . . . . . . . . .	L Near	 241B	  UNIXCOPY	
unix_img_cdir  . . . . . . . . .	L Near	 2420	  UNIXCOPY	
unix_prompt_0  . . . . . . . . .	L Near	 02D3	  UNIXCOPY	
unix_prompt_10 . . . . . . . . .	L Near	 0339	  UNIXCOPY	
unix_prompt_11 . . . . . . . . .	L Near	 0349	  UNIXCOPY	
unix_prompt_12 . . . . . . . . .	L Near	 034C	  UNIXCOPY	
unix_prompt_13 . . . . . . . . .	L Near	 0360	  UNIXCOPY	
unix_prompt_14 . . . . . . . . .	L Near	 0370	  UNIXCOPY	
unix_prompt_15 . . . . . . . . .	L Near	 02FA	  UNIXCOPY	
unix_prompt_1  . . . . . . . . .	L Near	 02F1	  UNIXCOPY	
unix_prompt_2  . . . . . . . . .	L Near	 02F7	  UNIXCOPY	
unix_prompt_3  . . . . . . . . .	L Near	 02FD	  UNIXCOPY	
unix_prompt_4  . . . . . . . . .	L Near	 0302	  UNIXCOPY	
unix_prompt_5  . . . . . . . . .	L Near	 030A	  UNIXCOPY	
unix_prompt_6  . . . . . . . . .	L Near	 0316	  UNIXCOPY	
unix_prompt_7  . . . . . . . . .	L Near	 0327	  UNIXCOPY	
unix_prompt_8  . . . . . . . . .	L Near	 032F	  UNIXCOPY	
unix_prompt_9  . . . . . . . . .	L Near	 0337	  UNIXCOPY	
unix_prompt_char . . . . . . . .	L Near	 2449	  UNIXCOPY	
usage  . . . . . . . . . . . . .	L Near	 22F4	  UNIXCOPY	
vol_infO_print . . . . . . . . .	L Near	 09CF	  UNIXCOPY	
wdir . . . . . . . . . . . . . .	L Near	 169E	  UNIXCOPY	
write_1  . . . . . . . . . . . .	L Near	 16B9	  UNIXCOPY	
writeinode_sioreg  . . . . . . .	L Near	 1748	  UNIXCOPY	
year . . . . . . . . . . . . . .	L Near	 27E2	  UNIXCOPY	

	   0 Warnings
	   0 Errors
